
GEN2_v0.2_250225.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d08  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08009f60  08009f60  0000af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a0  0800a1a0  0000c0e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a0  0800a1a0  0000b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a8  0800a1a8  0000c0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a8  0800a1a8  0000b1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1ac  0800a1ac  0000b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800a1b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001174  200000e0  0800a290  0000c0e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001254  0800a290  0000c254  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0c0  00000000  00000000  0000c116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b5d  00000000  00000000  0002b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0002ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001193  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002364c  00000000  00000000  00031583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9f6  00000000  00000000  00054bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d98b1  00000000  00000000  000735c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ce76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006628  00000000  00000000  0014cebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001534e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200000e0 	.word	0x200000e0
 8000274:	00000000 	.word	0x00000000
 8000278:	08009f48 	.word	0x08009f48

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200000e4 	.word	0x200000e4
 8000294:	08009f48 	.word	0x08009f48

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_uldivmod>:
 80002a8:	b953      	cbnz	r3, 80002c0 <__aeabi_uldivmod+0x18>
 80002aa:	b94a      	cbnz	r2, 80002c0 <__aeabi_uldivmod+0x18>
 80002ac:	2900      	cmp	r1, #0
 80002ae:	bf08      	it	eq
 80002b0:	2800      	cmpeq	r0, #0
 80002b2:	bf1c      	itt	ne
 80002b4:	f04f 31ff 	movne.w	r1, #4294967295
 80002b8:	f04f 30ff 	movne.w	r0, #4294967295
 80002bc:	f000 b97e 	b.w	80005bc <__aeabi_idiv0>
 80002c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c8:	f000 f806 	bl	80002d8 <__udivmoddi4>
 80002cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d4:	b004      	add	sp, #16
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002dc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002de:	460c      	mov	r4, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14d      	bne.n	8000380 <__udivmoddi4+0xa8>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	460f      	mov	r7, r1
 80002e8:	4684      	mov	ip, r0
 80002ea:	4696      	mov	lr, r2
 80002ec:	fab2 f382 	clz	r3, r2
 80002f0:	d960      	bls.n	80003b4 <__udivmoddi4+0xdc>
 80002f2:	b14b      	cbz	r3, 8000308 <__udivmoddi4+0x30>
 80002f4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000302:	fa20 f202 	lsr.w	r2, r0, r2
 8000306:	4317      	orrs	r7, r2
 8000308:	ea4f 461e 	mov.w	r6, lr, lsr #16
 800030c:	fa1f f48e 	uxth.w	r4, lr
 8000310:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000314:	fbb7 f1f6 	udiv	r1, r7, r6
 8000318:	fb06 7711 	mls	r7, r6, r1, r7
 800031c:	fb01 f004 	mul.w	r0, r1, r4
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	4290      	cmp	r0, r2
 8000326:	d908      	bls.n	800033a <__udivmoddi4+0x62>
 8000328:	eb1e 0202 	adds.w	r2, lr, r2
 800032c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x60>
 8000332:	4290      	cmp	r0, r2
 8000334:	f200 812d 	bhi.w	8000592 <__udivmoddi4+0x2ba>
 8000338:	4639      	mov	r1, r7
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	fa1f fc8c 	uxth.w	ip, ip
 8000340:	fbb2 f0f6 	udiv	r0, r2, r6
 8000344:	fb06 2210 	mls	r2, r6, r0, r2
 8000348:	fb00 f404 	mul.w	r4, r0, r4
 800034c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000350:	4564      	cmp	r4, ip
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x8e>
 8000354:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x8c>
 800035e:	4564      	cmp	r4, ip
 8000360:	f200 811a 	bhi.w	8000598 <__udivmoddi4+0x2c0>
 8000364:	4610      	mov	r0, r2
 8000366:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036a:	ebac 0c04 	sub.w	ip, ip, r4
 800036e:	2100      	movs	r1, #0
 8000370:	b125      	cbz	r5, 800037c <__udivmoddi4+0xa4>
 8000372:	fa2c f303 	lsr.w	r3, ip, r3
 8000376:	2200      	movs	r2, #0
 8000378:	e9c5 3200 	strd	r3, r2, [r5]
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	428b      	cmp	r3, r1
 8000382:	d905      	bls.n	8000390 <__udivmoddi4+0xb8>
 8000384:	b10d      	cbz	r5, 800038a <__udivmoddi4+0xb2>
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	2100      	movs	r1, #0
 800038c:	4608      	mov	r0, r1
 800038e:	e7f5      	b.n	800037c <__udivmoddi4+0xa4>
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d14d      	bne.n	8000434 <__udivmoddi4+0x15c>
 8000398:	42a3      	cmp	r3, r4
 800039a:	f0c0 80f2 	bcc.w	8000582 <__udivmoddi4+0x2aa>
 800039e:	4290      	cmp	r0, r2
 80003a0:	f080 80ef 	bcs.w	8000582 <__udivmoddi4+0x2aa>
 80003a4:	4606      	mov	r6, r0
 80003a6:	4623      	mov	r3, r4
 80003a8:	4608      	mov	r0, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0e6      	beq.n	800037c <__udivmoddi4+0xa4>
 80003ae:	e9c5 6300 	strd	r6, r3, [r5]
 80003b2:	e7e3      	b.n	800037c <__udivmoddi4+0xa4>
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	f040 80a2 	bne.w	80004fe <__udivmoddi4+0x226>
 80003ba:	1a8a      	subs	r2, r1, r2
 80003bc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c0:	fa1f f68e 	uxth.w	r6, lr
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ca:	fb07 2014 	mls	r0, r7, r4, r2
 80003ce:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003d6:	fb06 f004 	mul.w	r0, r6, r4
 80003da:	4290      	cmp	r0, r2
 80003dc:	d90f      	bls.n	80003fe <__udivmoddi4+0x126>
 80003de:	eb1e 0202 	adds.w	r2, lr, r2
 80003e2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003e6:	bf2c      	ite	cs
 80003e8:	f04f 0901 	movcs.w	r9, #1
 80003ec:	f04f 0900 	movcc.w	r9, #0
 80003f0:	4290      	cmp	r0, r2
 80003f2:	d903      	bls.n	80003fc <__udivmoddi4+0x124>
 80003f4:	f1b9 0f00 	cmp.w	r9, #0
 80003f8:	f000 80c8 	beq.w	800058c <__udivmoddi4+0x2b4>
 80003fc:	4644      	mov	r4, r8
 80003fe:	1a12      	subs	r2, r2, r0
 8000400:	fa1f fc8c 	uxth.w	ip, ip
 8000404:	fbb2 f0f7 	udiv	r0, r2, r7
 8000408:	fb07 2210 	mls	r2, r7, r0, r2
 800040c:	fb00 f606 	mul.w	r6, r0, r6
 8000410:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000414:	4566      	cmp	r6, ip
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x152>
 8000418:	eb1e 0c0c 	adds.w	ip, lr, ip
 800041c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000420:	d202      	bcs.n	8000428 <__udivmoddi4+0x150>
 8000422:	4566      	cmp	r6, ip
 8000424:	f200 80bb 	bhi.w	800059e <__udivmoddi4+0x2c6>
 8000428:	4610      	mov	r0, r2
 800042a:	ebac 0c06 	sub.w	ip, ip, r6
 800042e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000432:	e79d      	b.n	8000370 <__udivmoddi4+0x98>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa04 fe01 	lsl.w	lr, r4, r1
 800043e:	fa22 f706 	lsr.w	r7, r2, r6
 8000442:	fa20 fc06 	lsr.w	ip, r0, r6
 8000446:	40f4      	lsrs	r4, r6
 8000448:	408a      	lsls	r2, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	ea4e 030c 	orr.w	r3, lr, ip
 8000450:	fa00 fe01 	lsl.w	lr, r0, r1
 8000454:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000458:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	fbb4 f0f8 	udiv	r0, r4, r8
 8000464:	fb08 4410 	mls	r4, r8, r0, r4
 8000468:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046c:	fb00 f90c 	mul.w	r9, r0, ip
 8000470:	45a1      	cmp	r9, r4
 8000472:	d90e      	bls.n	8000492 <__udivmoddi4+0x1ba>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f100 3aff 	add.w	sl, r0, #4294967295
 800047a:	bf2c      	ite	cs
 800047c:	f04f 0b01 	movcs.w	fp, #1
 8000480:	f04f 0b00 	movcc.w	fp, #0
 8000484:	45a1      	cmp	r9, r4
 8000486:	d903      	bls.n	8000490 <__udivmoddi4+0x1b8>
 8000488:	f1bb 0f00 	cmp.w	fp, #0
 800048c:	f000 8093 	beq.w	80005b6 <__udivmoddi4+0x2de>
 8000490:	4650      	mov	r0, sl
 8000492:	eba4 0409 	sub.w	r4, r4, r9
 8000496:	fa1f f983 	uxth.w	r9, r3
 800049a:	fbb4 f3f8 	udiv	r3, r4, r8
 800049e:	fb08 4413 	mls	r4, r8, r3, r4
 80004a2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d906      	bls.n	80004bc <__udivmoddi4+0x1e4>
 80004ae:	193c      	adds	r4, r7, r4
 80004b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x1e2>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d87a      	bhi.n	80005b0 <__udivmoddi4+0x2d8>
 80004ba:	4643      	mov	r3, r8
 80004bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c0:	eba4 040c 	sub.w	r4, r4, ip
 80004c4:	fba0 9802 	umull	r9, r8, r0, r2
 80004c8:	4544      	cmp	r4, r8
 80004ca:	46cc      	mov	ip, r9
 80004cc:	4643      	mov	r3, r8
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x1fe>
 80004d0:	d106      	bne.n	80004e0 <__udivmoddi4+0x208>
 80004d2:	45ce      	cmp	lr, r9
 80004d4:	d204      	bcs.n	80004e0 <__udivmoddi4+0x208>
 80004d6:	3801      	subs	r0, #1
 80004d8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004dc:	eb68 0307 	sbc.w	r3, r8, r7
 80004e0:	b15d      	cbz	r5, 80004fa <__udivmoddi4+0x222>
 80004e2:	ebbe 020c 	subs.w	r2, lr, ip
 80004e6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ea:	fa04 f606 	lsl.w	r6, r4, r6
 80004ee:	fa22 f301 	lsr.w	r3, r2, r1
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	431e      	orrs	r6, r3
 80004f6:	e9c5 6400 	strd	r6, r4, [r5]
 80004fa:	2100      	movs	r1, #0
 80004fc:	e73e      	b.n	800037c <__udivmoddi4+0xa4>
 80004fe:	fa02 fe03 	lsl.w	lr, r2, r3
 8000502:	f1c3 0120 	rsb	r1, r3, #32
 8000506:	fa04 f203 	lsl.w	r2, r4, r3
 800050a:	fa00 fc03 	lsl.w	ip, r0, r3
 800050e:	40cc      	lsrs	r4, r1
 8000510:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000514:	fa20 f101 	lsr.w	r1, r0, r1
 8000518:	fa1f f68e 	uxth.w	r6, lr
 800051c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000520:	430a      	orrs	r2, r1
 8000522:	fb07 4410 	mls	r4, r7, r0, r4
 8000526:	0c11      	lsrs	r1, r2, #16
 8000528:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800052c:	fb00 f406 	mul.w	r4, r0, r6
 8000530:	428c      	cmp	r4, r1
 8000532:	d90e      	bls.n	8000552 <__udivmoddi4+0x27a>
 8000534:	eb1e 0101 	adds.w	r1, lr, r1
 8000538:	f100 38ff 	add.w	r8, r0, #4294967295
 800053c:	bf2c      	ite	cs
 800053e:	f04f 0901 	movcs.w	r9, #1
 8000542:	f04f 0900 	movcc.w	r9, #0
 8000546:	428c      	cmp	r4, r1
 8000548:	d902      	bls.n	8000550 <__udivmoddi4+0x278>
 800054a:	f1b9 0f00 	cmp.w	r9, #0
 800054e:	d02c      	beq.n	80005aa <__udivmoddi4+0x2d2>
 8000550:	4640      	mov	r0, r8
 8000552:	1b09      	subs	r1, r1, r4
 8000554:	b292      	uxth	r2, r2
 8000556:	fbb1 f4f7 	udiv	r4, r1, r7
 800055a:	fb07 1114 	mls	r1, r7, r4, r1
 800055e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000562:	fb04 f106 	mul.w	r1, r4, r6
 8000566:	4291      	cmp	r1, r2
 8000568:	d907      	bls.n	800057a <__udivmoddi4+0x2a2>
 800056a:	eb1e 0202 	adds.w	r2, lr, r2
 800056e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000572:	d201      	bcs.n	8000578 <__udivmoddi4+0x2a0>
 8000574:	4291      	cmp	r1, r2
 8000576:	d815      	bhi.n	80005a4 <__udivmoddi4+0x2cc>
 8000578:	4644      	mov	r4, r8
 800057a:	1a52      	subs	r2, r2, r1
 800057c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000580:	e721      	b.n	80003c6 <__udivmoddi4+0xee>
 8000582:	1a86      	subs	r6, r0, r2
 8000584:	eb64 0303 	sbc.w	r3, r4, r3
 8000588:	2001      	movs	r0, #1
 800058a:	e70e      	b.n	80003aa <__udivmoddi4+0xd2>
 800058c:	3c02      	subs	r4, #2
 800058e:	4472      	add	r2, lr
 8000590:	e735      	b.n	80003fe <__udivmoddi4+0x126>
 8000592:	3902      	subs	r1, #2
 8000594:	4472      	add	r2, lr
 8000596:	e6d0      	b.n	800033a <__udivmoddi4+0x62>
 8000598:	44f4      	add	ip, lr
 800059a:	3802      	subs	r0, #2
 800059c:	e6e3      	b.n	8000366 <__udivmoddi4+0x8e>
 800059e:	44f4      	add	ip, lr
 80005a0:	3802      	subs	r0, #2
 80005a2:	e742      	b.n	800042a <__udivmoddi4+0x152>
 80005a4:	3c02      	subs	r4, #2
 80005a6:	4472      	add	r2, lr
 80005a8:	e7e7      	b.n	800057a <__udivmoddi4+0x2a2>
 80005aa:	3802      	subs	r0, #2
 80005ac:	4471      	add	r1, lr
 80005ae:	e7d0      	b.n	8000552 <__udivmoddi4+0x27a>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	443c      	add	r4, r7
 80005b4:	e782      	b.n	80004bc <__udivmoddi4+0x1e4>
 80005b6:	3802      	subs	r0, #2
 80005b8:	443c      	add	r4, r7
 80005ba:	e76a      	b.n	8000492 <__udivmoddi4+0x1ba>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <scan_state_manager>:
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void scan_state_manager(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

	  if(key_state == KEY_ON){ 			// checks the key is ON
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <scan_state_manager+0x44>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d106      	bne.n	80005da <scan_state_manager+0x1a>
			  scan_state = SCAN_OFF;
 80005cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <scan_state_manager+0x48>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			  scan_timer =0;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <scan_state_manager+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
				  scan_state = SCAN_OFF;
				  scan_timer = 360;

			  	  }
			  }
}
 80005d8:	e00f      	b.n	80005fa <scan_state_manager+0x3a>
			  if(scan_timer < 360){
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <scan_state_manager+0x4c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80005e2:	da03      	bge.n	80005ec <scan_state_manager+0x2c>
				  scan_state = SCAN_ON;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <scan_state_manager+0x48>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	e006      	b.n	80005fa <scan_state_manager+0x3a>
				  scan_state = SCAN_OFF;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <scan_state_manager+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
				  scan_timer = 360;
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <scan_state_manager+0x4c>)
 80005f4:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80005f8:	601a      	str	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000000 	.word	0x20000000
 8000608:	20000100 	.word	0x20000100
 800060c:	20000154 	.word	0x20000154

08000610 <scan_on_routine>:
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void scan_on_routine(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

	if(prev_state == SCAN_OFF){ //checks for the prev state of the scan
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <scan_on_routine+0xb0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10b      	bne.n	8000634 <scan_on_routine+0x24>
		totp_received = 0;
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <scan_on_routine+0xb4>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
		bmcu_scan_rsp = 0;
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <scan_on_routine+0xb8>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
		initiate_scan_on(); // sends the cmd to TI to start the scan
 8000628:	f000 f89e 	bl	8000768 <initiate_scan_on>
		prev_state = SCAN_ON; // set the prev state to scan on
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <scan_on_routine+0xb0>)
 800062e:	2201      	movs	r2, #1
 8000630:	601a      	str	r2, [r3, #0]
			scan_state = SCAN_OFF;
			scan_timer = 360;
			initiate_scan_off();
		}
	}
}
 8000632:	e043      	b.n	80006bc <scan_on_routine+0xac>
		if(scan_timer < 360){ // it will check the scan timer it has to be less than 360
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <scan_on_routine+0xbc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800063c:	da35      	bge.n	80006aa <scan_on_routine+0x9a>
				if(totp_received == 1){ //check only if the TOTP is received
 800063e:	4b21      	ldr	r3, [pc, #132]	@ (80006c4 <scan_on_routine+0xb4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d10b      	bne.n	800065e <scan_on_routine+0x4e>
					send_totp_to_bmcu();	//collect and send TOTP to BMCU
 8000646:	f000 f997 	bl	8000978 <send_totp_to_bmcu>
					totp_sent_time = scan_timer + 5; //time out for receiving BMCU response
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <scan_on_routine+0xbc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	b29b      	uxth	r3, r3
 8000650:	3305      	adds	r3, #5
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b1e      	ldr	r3, [pc, #120]	@ (80006d0 <scan_on_routine+0xc0>)
 8000656:	801a      	strh	r2, [r3, #0]
					totp_received = 2;  // set this flag to 2 to check the -VE ack from BMCU
 8000658:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <scan_on_routine+0xb4>)
 800065a:	2202      	movs	r2, #2
 800065c:	601a      	str	r2, [r3, #0]
				if(totp_received == 2){
 800065e:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <scan_on_routine+0xb4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b02      	cmp	r3, #2
 8000664:	d12a      	bne.n	80006bc <scan_on_routine+0xac>
						if((bmcu_scan_rsp == -1) ||(scan_timer > totp_sent_time)) {
 8000666:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <scan_on_routine+0xb8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066e:	d006      	beq.n	800067e <scan_on_routine+0x6e>
 8000670:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <scan_on_routine+0xc0>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <scan_on_routine+0xbc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	da07      	bge.n	800068e <scan_on_routine+0x7e>
								totp_received = 0;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <scan_on_routine+0xb4>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
								bmcu_scan_rsp = 0;
 8000684:	4b10      	ldr	r3, [pc, #64]	@ (80006c8 <scan_on_routine+0xb8>)
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
								initiate_scan_on(); //If the -ve ack has received from bmcu the reinit the scan
 800068a:	f000 f86d 	bl	8000768 <initiate_scan_on>
						if(bmcu_scan_rsp == 1){
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <scan_on_routine+0xb8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d112      	bne.n	80006bc <scan_on_routine+0xac>
							scan_state = SCAN_OFF;
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <scan_on_routine+0xc4>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
							scan_timer = 360;  // set the timer to 360 so not to check the condition again
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <scan_on_routine+0xbc>)
 800069e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006a2:	601a      	str	r2, [r3, #0]
							initiate_scan_off();//sends scan stop cmd to TI
 80006a4:	f000 f8b6 	bl	8000814 <initiate_scan_off>
}
 80006a8:	e008      	b.n	80006bc <scan_on_routine+0xac>
			scan_state = SCAN_OFF;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <scan_on_routine+0xc4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			scan_timer = 360;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <scan_on_routine+0xbc>)
 80006b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80006b6:	601a      	str	r2, [r3, #0]
			initiate_scan_off();
 80006b8:	f000 f8ac 	bl	8000814 <initiate_scan_off>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000fc 	.word	0x200000fc
 80006c4:	20000108 	.word	0x20000108
 80006c8:	20000104 	.word	0x20000104
 80006cc:	20000154 	.word	0x20000154
 80006d0:	20000110 	.word	0x20000110
 80006d4:	20000100 	.word	0x20000100

080006d8 <scan_off_routine>:
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void scan_off_routine(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if(prev_state == SCAN_ON){
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <scan_off_routine+0x2c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d107      	bne.n	80006f4 <scan_off_routine+0x1c>
		initiate_scan_off(); //sends scan off cmd to TI
 80006e4:	f000 f896 	bl	8000814 <initiate_scan_off>
		prev_state = SCAN_OFF;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <scan_off_routine+0x2c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
		initiate_broadcast(); //scan is off and key is on then broadast the receiving parameters
 80006ee:	f000 f80d 	bl	800070c <initiate_broadcast>
	}
	else if(update_broadcast == 1){
		initiate_broadcast();
	}

}
 80006f2:	e005      	b.n	8000700 <scan_off_routine+0x28>
	else if(update_broadcast == 1){
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <scan_off_routine+0x30>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d101      	bne.n	8000700 <scan_off_routine+0x28>
		initiate_broadcast();
 80006fc:	f000 f806 	bl	800070c <initiate_broadcast>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200000fc 	.word	0x200000fc
 8000708:	2000010c 	.word	0x2000010c

0800070c <initiate_broadcast>:
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void initiate_broadcast(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
		memset(data_buffer,'\0',sizeof(data_buffer));
 8000710:	2240      	movs	r2, #64	@ 0x40
 8000712:	2100      	movs	r1, #0
 8000714:	4811      	ldr	r0, [pc, #68]	@ (800075c <initiate_broadcast+0x50>)
 8000716:	f008 ff57 	bl	80095c8 <memset>
		memcpy(data_buffer,droadcast_buffer,strlen(droadcast_buffer));
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <initiate_broadcast+0x54>)
 800071c:	f7ff fdbc 	bl	8000298 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	490e      	ldr	r1, [pc, #56]	@ (8000760 <initiate_broadcast+0x54>)
 8000726:	480d      	ldr	r0, [pc, #52]	@ (800075c <initiate_broadcast+0x50>)
 8000728:	f008 ffb0 	bl	800968c <memcpy>
		HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <initiate_broadcast+0x50>)
 800072e:	f7ff fdb3 	bl	8000298 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	4908      	ldr	r1, [pc, #32]	@ (800075c <initiate_broadcast+0x50>)
 800073c:	4809      	ldr	r0, [pc, #36]	@ (8000764 <initiate_broadcast+0x58>)
 800073e:	f007 fb5e 	bl	8007dfe <HAL_UART_Transmit>
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <initiate_broadcast+0x50>)
 8000744:	f7ff fda8 	bl	8000298 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	4902      	ldr	r1, [pc, #8]	@ (800075c <initiate_broadcast+0x50>)
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <initiate_broadcast+0x58>)
 8000754:	f007 fb53 	bl	8007dfe <HAL_UART_Transmit>

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000114 	.word	0x20000114
 8000760:	20000028 	.word	0x20000028
 8000764:	20001060 	.word	0x20001060

08000768 <initiate_scan_on>:
* Function Name: initiate_scan_on
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void initiate_scan_on(void){ //sends dock id and scan on to TI
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

		memset(data_buffer,'\0',sizeof(data_buffer));
 800076c:	2240      	movs	r2, #64	@ 0x40
 800076e:	2100      	movs	r1, #0
 8000770:	4823      	ldr	r0, [pc, #140]	@ (8000800 <initiate_scan_on+0x98>)
 8000772:	f008 ff29 	bl	80095c8 <memset>
		memcpy(data_buffer,dockid_buffer,strlen(dockid_buffer));
 8000776:	4823      	ldr	r0, [pc, #140]	@ (8000804 <initiate_scan_on+0x9c>)
 8000778:	f7ff fd8e 	bl	8000298 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4920      	ldr	r1, [pc, #128]	@ (8000804 <initiate_scan_on+0x9c>)
 8000782:	481f      	ldr	r0, [pc, #124]	@ (8000800 <initiate_scan_on+0x98>)
 8000784:	f008 ff82 	bl	800968c <memcpy>
		HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);
 8000788:	481d      	ldr	r0, [pc, #116]	@ (8000800 <initiate_scan_on+0x98>)
 800078a:	f7ff fd85 	bl	8000298 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	491a      	ldr	r1, [pc, #104]	@ (8000800 <initiate_scan_on+0x98>)
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <initiate_scan_on+0xa0>)
 800079a:	f007 fb30 	bl	8007dfe <HAL_UART_Transmit>
 800079e:	4818      	ldr	r0, [pc, #96]	@ (8000800 <initiate_scan_on+0x98>)
 80007a0:	f7ff fd7a 	bl	8000298 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	4914      	ldr	r1, [pc, #80]	@ (8000800 <initiate_scan_on+0x98>)
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <initiate_scan_on+0xa0>)
 80007b0:	f007 fb25 	bl	8007dfe <HAL_UART_Transmit>

		//HAL_Delay(1000);
		memset(data_buffer,'\0',sizeof(data_buffer));
 80007b4:	2240      	movs	r2, #64	@ 0x40
 80007b6:	2100      	movs	r1, #0
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <initiate_scan_on+0x98>)
 80007ba:	f008 ff05 	bl	80095c8 <memset>
		memcpy(data_buffer,"$,SCANON,#",strlen("$,SCANON,#"));
 80007be:	220a      	movs	r2, #10
 80007c0:	4912      	ldr	r1, [pc, #72]	@ (800080c <initiate_scan_on+0xa4>)
 80007c2:	480f      	ldr	r0, [pc, #60]	@ (8000800 <initiate_scan_on+0x98>)
 80007c4:	f008 ff62 	bl	800968c <memcpy>
		HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);
 80007c8:	480d      	ldr	r0, [pc, #52]	@ (8000800 <initiate_scan_on+0x98>)
 80007ca:	f7ff fd65 	bl	8000298 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	490a      	ldr	r1, [pc, #40]	@ (8000800 <initiate_scan_on+0x98>)
 80007d8:	480b      	ldr	r0, [pc, #44]	@ (8000808 <initiate_scan_on+0xa0>)
 80007da:	f007 fb10 	bl	8007dfe <HAL_UART_Transmit>
 80007de:	4808      	ldr	r0, [pc, #32]	@ (8000800 <initiate_scan_on+0x98>)
 80007e0:	f7ff fd5a 	bl	8000298 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	4904      	ldr	r1, [pc, #16]	@ (8000800 <initiate_scan_on+0x98>)
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <initiate_scan_on+0xa0>)
 80007f0:	f007 fb05 	bl	8007dfe <HAL_UART_Transmit>

		bmcu_scan_rsp = 0;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <initiate_scan_on+0xa8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
	}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000114 	.word	0x20000114
 8000804:	20000004 	.word	0x20000004
 8000808:	20001060 	.word	0x20001060
 800080c:	08009f60 	.word	0x08009f60
 8000810:	20000104 	.word	0x20000104

08000814 <initiate_scan_off>:
* Function Name: initiate_scan_off
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void initiate_scan_off(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	memset(data_buffer,'\0',sizeof(data_buffer));
 8000818:	2240      	movs	r2, #64	@ 0x40
 800081a:	2100      	movs	r1, #0
 800081c:	480f      	ldr	r0, [pc, #60]	@ (800085c <initiate_scan_off+0x48>)
 800081e:	f008 fed3 	bl	80095c8 <memset>
	memcpy(data_buffer,"$,SCANOFF,#",strlen("$,SCANOFF,#"));
 8000822:	220b      	movs	r2, #11
 8000824:	490e      	ldr	r1, [pc, #56]	@ (8000860 <initiate_scan_off+0x4c>)
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <initiate_scan_off+0x48>)
 8000828:	f008 ff30 	bl	800968c <memcpy>
	HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);HAL_UART_Transmit(&huart3,(uint8_t*)data_buffer,strlen(data_buffer),HAL_MAX_DELAY);
 800082c:	480b      	ldr	r0, [pc, #44]	@ (800085c <initiate_scan_off+0x48>)
 800082e:	f7ff fd33 	bl	8000298 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	4908      	ldr	r1, [pc, #32]	@ (800085c <initiate_scan_off+0x48>)
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <initiate_scan_off+0x50>)
 800083e:	f007 fade 	bl	8007dfe <HAL_UART_Transmit>
 8000842:	4806      	ldr	r0, [pc, #24]	@ (800085c <initiate_scan_off+0x48>)
 8000844:	f7ff fd28 	bl	8000298 <strlen>
 8000848:	4603      	mov	r3, r0
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	4902      	ldr	r1, [pc, #8]	@ (800085c <initiate_scan_off+0x48>)
 8000852:	4804      	ldr	r0, [pc, #16]	@ (8000864 <initiate_scan_off+0x50>)
 8000854:	f007 fad3 	bl	8007dfe <HAL_UART_Transmit>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000114 	.word	0x20000114
 8000860:	08009f6c 	.word	0x08009f6c
 8000864:	20001060 	.word	0x20001060

08000868 <process_ti_receive>:
* Function Name: process_ti_receive
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void process_ti_receive(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	  if(ti_data_ready == 1){
 800086c:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <process_ti_receive+0xec>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d16c      	bne.n	800094e <process_ti_receive+0xe6>

		  if(strncmp(ti_buff,"$,TOTP",6)==0){ //$TOTP,1234,# //Check if received data is TOTP
 8000874:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <process_ti_receive+0xf0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2206      	movs	r2, #6
 800087a:	4938      	ldr	r1, [pc, #224]	@ (800095c <process_ti_receive+0xf4>)
 800087c:	4618      	mov	r0, r3
 800087e:	f008 feab 	bl	80095d8 <strncmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d112      	bne.n	80008ae <process_ti_receive+0x46>
			  memset(totp_buf,'\0',sizeof(totp_buf));
 8000888:	4b35      	ldr	r3, [pc, #212]	@ (8000960 <process_ti_receive+0xf8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2204      	movs	r2, #4
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f008 fe99 	bl	80095c8 <memset>
			 // get_field(3,ti_buff,totp_buf);
			  memcpy(totp_buf,ti_buff+6,4); //ti_buff+6 will collect only TOTP from the packet
 8000896:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <process_ti_receive+0xf8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	461a      	mov	r2, r3
 800089c:	4b2e      	ldr	r3, [pc, #184]	@ (8000958 <process_ti_receive+0xf0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3306      	adds	r3, #6
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6013      	str	r3, [r2, #0]
			  totp_received = 1;
 80008a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <process_ti_receive+0xfc>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	e04c      	b.n	8000948 <process_ti_receive+0xe0>
		  }
		  else if (strncmp(ti_buff,"$,SCN",5) == 0){ //checks scan on/off status
 80008ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000958 <process_ti_receive+0xf0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2205      	movs	r2, #5
 80008b4:	492c      	ldr	r1, [pc, #176]	@ (8000968 <process_ti_receive+0x100>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f008 fe8e 	bl	80095d8 <strncmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <process_ti_receive+0x7a>
			  	  	 memset(ack_buff,'\0',sizeof(ack_buff));
 80008c2:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <process_ti_receive+0x104>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2204      	movs	r2, #4
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fe7c 	bl	80095c8 <memset>
			  	  	 get_field(3,ti_buff,ack_buff);
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <process_ti_receive+0xf0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a25      	ldr	r2, [pc, #148]	@ (800096c <process_ti_receive+0x104>)
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	2003      	movs	r0, #3
 80008dc:	f001 ff24 	bl	8002728 <get_field>
 80008e0:	e032      	b.n	8000948 <process_ti_receive+0xe0>
		  	  	  }
		  else if (strncmp(ti_buff,"$,ADV",5) == 0){ // checks broadcast on/off status
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <process_ti_receive+0xf0>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2205      	movs	r2, #5
 80008e8:	4921      	ldr	r1, [pc, #132]	@ (8000970 <process_ti_receive+0x108>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f008 fe74 	bl	80095d8 <strncmp>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10f      	bne.n	8000916 <process_ti_receive+0xae>
			  	  	 memset(ack_buff,'\0',sizeof(ack_buff));
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <process_ti_receive+0x104>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2204      	movs	r2, #4
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f008 fe62 	bl	80095c8 <memset>
			  	  	 get_field(3,ti_buff,ack_buff);
 8000904:	4b14      	ldr	r3, [pc, #80]	@ (8000958 <process_ti_receive+0xf0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	@ (800096c <process_ti_receive+0x104>)
 800090a:	6812      	ldr	r2, [r2, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	2003      	movs	r0, #3
 8000910:	f001 ff0a 	bl	8002728 <get_field>
 8000914:	e018      	b.n	8000948 <process_ti_receive+0xe0>
		  	  	  }
		  else if (strncmp(ti_buff,"$,HRBT",6) == 0){ //response for TI alive or not
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <process_ti_receive+0xf0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2206      	movs	r2, #6
 800091c:	4915      	ldr	r1, [pc, #84]	@ (8000974 <process_ti_receive+0x10c>)
 800091e:	4618      	mov	r0, r3
 8000920:	f008 fe5a 	bl	80095d8 <strncmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d10e      	bne.n	8000948 <process_ti_receive+0xe0>
			  	  	 memset(ack_buff,'\0',sizeof(ack_buff));
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <process_ti_receive+0x104>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2204      	movs	r2, #4
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f008 fe48 	bl	80095c8 <memset>
		 			 get_field(3,ti_buff,ack_buff);
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <process_ti_receive+0xf0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <process_ti_receive+0x104>)
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	2003      	movs	r0, #3
 8000944:	f001 fef0 	bl	8002728 <get_field>
		  	  	  }
		  ti_data_ready=0;
 8000948:	4b02      	ldr	r3, [pc, #8]	@ (8000954 <process_ti_receive+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
	  }
  }
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000158 	.word	0x20000158
 8000958:	2000015c 	.word	0x2000015c
 800095c:	08009f78 	.word	0x08009f78
 8000960:	20000160 	.word	0x20000160
 8000964:	20000108 	.word	0x20000108
 8000968:	08009f80 	.word	0x08009f80
 800096c:	20000164 	.word	0x20000164
 8000970:	08009f88 	.word	0x08009f88
 8000974:	08009f90 	.word	0x08009f90

08000978 <send_totp_to_bmcu>:
* Description  :
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void send_totp_to_bmcu(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

	  Txheader.Identifier = 0x10386070;  //CAN ID for TOTP
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <send_totp_to_bmcu+0x24>)
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <send_totp_to_bmcu+0x28>)
 8000980:	601a      	str	r2, [r3, #0]
	  Txheader.DataLength = 8;			//length of the data
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <send_totp_to_bmcu+0x24>)
 8000984:	2208      	movs	r2, #8
 8000986:	60da      	str	r2, [r3, #12]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Txheader,totp_buf);  //send data TO bmcu over CAN
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <send_totp_to_bmcu+0x2c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4903      	ldr	r1, [pc, #12]	@ (800099c <send_totp_to_bmcu+0x24>)
 8000990:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <send_totp_to_bmcu+0x30>)
 8000992:	f002 fc01 	bl	8003198 <HAL_FDCAN_AddMessageToTxFifoQ>

 }
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000168 	.word	0x20000168
 80009a0:	10386070 	.word	0x10386070
 80009a4:	20000160 	.word	0x20000160
 80009a8:	20000d70 	.word	0x20000d70

080009ac <convert_tod_to_time>:
* Description  : Converts time of the day into hh:mm:ss
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void convert_tod_to_time(char *nTtime, long unsigned int time_of_day)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  int c_hour,c_minutes,c_seconds;

  //calculate hours, minutes and seconds
  c_hour = time_of_day / 3600;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	4a15      	ldr	r2, [pc, #84]	@ (8000a10 <convert_tod_to_time+0x64>)
 80009ba:	fba2 2303 	umull	r2, r3, r2, r3
 80009be:	0adb      	lsrs	r3, r3, #11
 80009c0:	617b      	str	r3, [r7, #20]
  c_minutes = (time_of_day % 3600) / 60;
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <convert_tod_to_time+0x64>)
 80009c6:	fba3 1302 	umull	r1, r3, r3, r2
 80009ca:	0adb      	lsrs	r3, r3, #11
 80009cc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80009d0:	fb01 f303 	mul.w	r3, r1, r3
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <convert_tod_to_time+0x68>)
 80009d8:	fba2 2303 	umull	r2, r3, r2, r3
 80009dc:	095b      	lsrs	r3, r3, #5
 80009de:	613b      	str	r3, [r7, #16]
  c_seconds = time_of_day % 60;
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <convert_tod_to_time+0x68>)
 80009e4:	fba3 2301 	umull	r2, r3, r3, r1
 80009e8:	095a      	lsrs	r2, r3, #5
 80009ea:	4613      	mov	r3, r2
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	1aca      	subs	r2, r1, r3
 80009f4:	60fa      	str	r2, [r7, #12]

 sprintf(nTtime,"%02d%02d%02d",c_hour,c_minutes,c_seconds);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	4906      	ldr	r1, [pc, #24]	@ (8000a18 <convert_tod_to_time+0x6c>)
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f008 fdc1 	bl	8009588 <siprintf>

}
 8000a06:	bf00      	nop
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	91a2b3c5 	.word	0x91a2b3c5
 8000a14:	88888889 	.word	0x88888889
 8000a18:	08009f98 	.word	0x08009f98

08000a1c <calculate_nextdate>:
* Description  : Calculates next date once roll over happens
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
unsigned int calculate_nextdate(char *current_date, char *next_date)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	unsigned int c_month,c_day,c_year;
	char s_date[8]={'\0'};
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
	char temp_day[3],temp_month[3],temp_year[3];

	memset(temp_day,0x00,sizeof(temp_day));
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2203      	movs	r2, #3
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f008 fdc6 	bl	80095c8 <memset>
	strncpy(temp_day, current_date, 2);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2202      	movs	r2, #2
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fdd9 	bl	80095fc <strncpy>

	memset(temp_month,0x00,sizeof(temp_month));
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2203      	movs	r2, #3
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f008 fdb8 	bl	80095c8 <memset>
	strncpy(temp_month, current_date+2, 2);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	1c99      	adds	r1, r3, #2
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2202      	movs	r2, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f008 fdca 	bl	80095fc <strncpy>

	memset(temp_year,0x00,sizeof(temp_year));
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 fda9 	bl	80095c8 <memset>
	strncpy(temp_year, current_date+4, 2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	1d19      	adds	r1, r3, #4
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 fdbb 	bl	80095fc <strncpy>

	//date - ddmmyy
	c_day = atoi(temp_day);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f008 fcf3 	bl	8009476 <atoi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	623b      	str	r3, [r7, #32]
	c_month = atoi(temp_month);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f008 fcec 	bl	8009476 <atoi>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
	c_year = atoi(temp_year);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 fce5 	bl	8009476 <atoi>
 8000aac:	4603      	mov	r3, r0
 8000aae:	61fb      	str	r3, [r7, #28]

        // Adjust for month and year changes using switch statements
        switch (c_month) {
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	2b0c      	cmp	r3, #12
 8000ab4:	bf8c      	ite	hi
 8000ab6:	2301      	movhi	r3, #1
 8000ab8:	2300      	movls	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d164      	bne.n	8000b8a <calculate_nextdate+0x16e>
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8000acc:	401a      	ands	r2, r3
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2201      	movne	r2, #1
 8000ad4:	2200      	moveq	r2, #0
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d112      	bne.n	8000b02 <calculate_nextdate+0xe6>
 8000adc:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2201      	movne	r2, #1
 8000ae6:	2200      	moveq	r2, #0
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d13f      	bne.n	8000b6e <calculate_nextdate+0x152>
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	bf14      	ite	ne
 8000af6:	2301      	movne	r3, #1
 8000af8:	2300      	moveq	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d115      	bne.n	8000b2c <calculate_nextdate+0x110>
 8000b00:	e043      	b.n	8000b8a <calculate_nextdate+0x16e>
            case 5: // May
            case 7: // July
            case 8: // August
            case 10: // October
            case 12: // December
                if(c_day==31){
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	2b1f      	cmp	r3, #31
 8000b06:	d105      	bne.n	8000b14 <calculate_nextdate+0xf8>
			c_day=1; c_month++;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0e:	3301      	adds	r3, #1
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b12:	e002      	b.n	8000b1a <calculate_nextdate+0xfe>
		}
	        else {
			c_day++;
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	3301      	adds	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
		}
	        // Adjust for year change
	        if (c_month > 12) {
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	d933      	bls.n	8000b88 <calculate_nextdate+0x16c>
	            c_month = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
	            c_year++;
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
	        }
                break;
 8000b2a:	e02d      	b.n	8000b88 <calculate_nextdate+0x16c>

            case 2: // February

                if (is_leap_year(c_year)) {
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f83a 	bl	8000ba8 <is_leap_year>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00c      	beq.n	8000b54 <calculate_nextdate+0x138>
                    if(c_day==29){
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	2b1d      	cmp	r3, #29
 8000b3e:	d105      	bne.n	8000b4c <calculate_nextdate+0x130>
			c_day=1;  c_month++;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	3301      	adds	r3, #1
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
		         }
		         else{
			    c_day++;
			    }
                }
                break;
 8000b4a:	e01e      	b.n	8000b8a <calculate_nextdate+0x16e>
		        c_day++;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
                break;
 8000b52:	e01a      	b.n	8000b8a <calculate_nextdate+0x16e>
                    	if(c_day==28){
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	2b1c      	cmp	r3, #28
 8000b58:	d105      	bne.n	8000b66 <calculate_nextdate+0x14a>
		          c_day=1;  c_month++;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	3301      	adds	r3, #1
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8000b64:	e011      	b.n	8000b8a <calculate_nextdate+0x16e>
			    c_day++;
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
                break;
 8000b6c:	e00d      	b.n	8000b8a <calculate_nextdate+0x16e>
            case 4: // April
            case 6: // June
            case 9: // September
            case 11: // November

		        if(c_day==30){
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	2b1e      	cmp	r3, #30
 8000b72:	d105      	bne.n	8000b80 <calculate_nextdate+0x164>
			    c_day=1;  c_month++;
 8000b74:	2301      	movs	r3, #1
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7e:	e004      	b.n	8000b8a <calculate_nextdate+0x16e>
	        	}
	        	else{
		    	c_day++;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	3301      	adds	r3, #1
 8000b84:	623b      	str	r3, [r7, #32]
 8000b86:	e000      	b.n	8000b8a <calculate_nextdate+0x16e>
                break;
 8000b88:	bf00      	nop
	        	}
            }
	sprintf(next_date,"%02d%02d%02d",c_day,c_month,c_year);
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	6a3a      	ldr	r2, [r7, #32]
 8000b92:	4904      	ldr	r1, [pc, #16]	@ (8000ba4 <calculate_nextdate+0x188>)
 8000b94:	6838      	ldr	r0, [r7, #0]
 8000b96:	f008 fcf7 	bl	8009588 <siprintf>
    return 0;
 8000b9a:	2300      	movs	r3, #0
    }
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08009f98 	.word	0x08009f98

08000ba8 <is_leap_year>:
* Function Name: is_leap_year
* Description  : Function to calculate leap year divisible by 4 and year not divisible by 100 or year divisble by 400 then its leap year
* Arguments    : year
* Return Value : 1 - leap year, 0 - not leap year
***********************************************************************************************************************/
int is_leap_year(int year) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    return ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d10c      	bne.n	8000bd4 <is_leap_year+0x2c>
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <is_leap_year+0x5c>)
 8000bbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000bc2:	1159      	asrs	r1, r3, #5
 8000bc4:	17d3      	asrs	r3, r2, #31
 8000bc6:	1acb      	subs	r3, r1, r3
 8000bc8:	2164      	movs	r1, #100	@ 0x64
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10d      	bne.n	8000bf0 <is_leap_year+0x48>
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <is_leap_year+0x5c>)
 8000bd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000bdc:	11d9      	asrs	r1, r3, #7
 8000bde:	17d3      	asrs	r3, r2, #31
 8000be0:	1acb      	subs	r3, r1, r3
 8000be2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000be6:	fb01 f303 	mul.w	r3, r1, r3
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <is_leap_year+0x4c>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <is_leap_year+0x4e>
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	51eb851f 	.word	0x51eb851f

08000c08 <convert_strtime_TO_timeofday>:
* Description  : convert time in hh:mm:ss to time of day in seconds
* Arguments    : stime, tim
* Return Value : Error -1, Success  1
***********************************************************************************************************************/
int convert_strtime_TO_timeofday(char *stime, unsigned long int* tim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	unsigned char tim_hr = 0, tim_min = 0, tim_sec = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	2300      	movs	r3, #0
 8000c18:	73bb      	strb	r3, [r7, #14]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	737b      	strb	r3, [r7, #13]
	char timrtcstr[3];


		//Hour calculating in seconds
		timrtcstr[0] = stime[0];
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	723b      	strb	r3, [r7, #8]
		timrtcstr[1] = stime[1];
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	727b      	strb	r3, [r7, #9]
		timrtcstr[2] = 0x00;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	72bb      	strb	r3, [r7, #10]
		tim_hr = atoi(timrtcstr);
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	4618      	mov	r0, r3
 8000c34:	f008 fc1f 	bl	8009476 <atoi>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
		if (tim_hr > 23){
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b17      	cmp	r3, #23
 8000c40:	d902      	bls.n	8000c48 <convert_strtime_TO_timeofday+0x40>
			return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e03a      	b.n	8000cbe <convert_strtime_TO_timeofday+0xb6>
		}


		// Min calculating in seconds
		timrtcstr[0] = stime[2];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	723b      	strb	r3, [r7, #8]
		timrtcstr[1] = stime[3];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	727b      	strb	r3, [r7, #9]
		timrtcstr[2] = 0x00;
 8000c54:	2300      	movs	r3, #0
 8000c56:	72bb      	strb	r3, [r7, #10]
		tim_min = atoi(timrtcstr);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 fc0a 	bl	8009476 <atoi>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73bb      	strb	r3, [r7, #14]
		if (tim_min > 59){
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c6a:	d902      	bls.n	8000c72 <convert_strtime_TO_timeofday+0x6a>
			return -1; }
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e025      	b.n	8000cbe <convert_strtime_TO_timeofday+0xb6>


		// calculating in seconds
		timrtcstr[0] = stime[4];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	791b      	ldrb	r3, [r3, #4]
 8000c76:	723b      	strb	r3, [r7, #8]
		timrtcstr[1] = stime[5];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	795b      	ldrb	r3, [r3, #5]
 8000c7c:	727b      	strb	r3, [r7, #9]
		timrtcstr[2] = 0x00;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	72bb      	strb	r3, [r7, #10]
		tim_sec = atoi(timrtcstr);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4618      	mov	r0, r3
 8000c88:	f008 fbf5 	bl	8009476 <atoi>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	737b      	strb	r3, [r7, #13]
		if (tim_sec > 59){
 8000c90:	7b7b      	ldrb	r3, [r7, #13]
 8000c92:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c94:	d902      	bls.n	8000c9c <convert_strtime_TO_timeofday+0x94>
			return -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e010      	b.n	8000cbe <convert_strtime_TO_timeofday+0xb6>
		}


		*tim = (long int)(tim_hr)*(3600)+ (long int)(tim_min)*(60)+ (long int)(tim_sec);
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000ca2:	fb02 f103 	mul.w	r1, r2, r3
 8000ca6:	7bba      	ldrb	r2, [r7, #14]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	18ca      	adds	r2, r1, r3
 8000cb2:	7b7b      	ldrb	r3, [r7, #13]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	601a      	str	r2, [r3, #0]
		return 1;
 8000cbc:	2301      	movs	r3, #1


}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <set_tcu_time>:
* Description  : Set time, date, time of day and time source
* Arguments    : c_time, c_date, tod, src
* Return Value : return 1 if successful
***********************************************************************************************************************/
int set_tcu_time(char *c_time, char *c_date,time_source_t src )
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]
   int ret = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   char output_time[6],input_date[6];
   memset(output_time,0x00,sizeof(output_time));
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2206      	movs	r2, #6
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 fc70 	bl	80095c8 <memset>
   memset(input_date,0x00,sizeof(input_date));
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2206      	movs	r2, #6
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fc69 	bl	80095c8 <memset>
   curr_time_src = time_of_day;
 8000cf6:	4b34      	ldr	r3, [pc, #208]	@ (8000dc8 <set_tcu_time+0x100>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <set_tcu_time+0x104>)
 8000cfe:	701a      	strb	r2, [r3, #0]
//   if(curr_time_src > src)
//   {
//   	return -1;
//   }

   switch(src) {
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d020      	beq.n	8000d48 <set_tcu_time+0x80>
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	dc52      	bgt.n	8000db0 <set_tcu_time+0xe8>
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d002      	beq.n	8000d14 <set_tcu_time+0x4c>
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d034      	beq.n	8000d7c <set_tcu_time+0xb4>
			curr_time_src=src;
		}
		else{}
	break;
	default :
	break;
 8000d12:	e04d      	b.n	8000db0 <set_tcu_time+0xe8>
		ret = validate_date_time(c_time,c_date);
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f000 f85e 	bl	8000dd8 <validate_date_time>
 8000d1c:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == 1){
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d147      	bne.n	8000db4 <set_tcu_time+0xec>
	   		strncpy(nTdate,c_date,6);
 8000d24:	2206      	movs	r2, #6
 8000d26:	68b9      	ldr	r1, [r7, #8]
 8000d28:	4829      	ldr	r0, [pc, #164]	@ (8000dd0 <set_tcu_time+0x108>)
 8000d2a:	f008 fc67 	bl	80095fc <strncpy>
   	  		 strncpy(nTtime,c_time,6);
 8000d2e:	2206      	movs	r2, #6
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	4828      	ldr	r0, [pc, #160]	@ (8000dd4 <set_tcu_time+0x10c>)
 8000d34:	f008 fc62 	bl	80095fc <strncpy>
			convert_strtime_TO_timeofday(c_time, &time_of_day);
 8000d38:	4923      	ldr	r1, [pc, #140]	@ (8000dc8 <set_tcu_time+0x100>)
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff ff64 	bl	8000c08 <convert_strtime_TO_timeofday>
			curr_time_src=src;
 8000d40:	4a22      	ldr	r2, [pc, #136]	@ (8000dcc <set_tcu_time+0x104>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	7013      	strb	r3, [r2, #0]
   		break;
 8000d46:	e035      	b.n	8000db4 <set_tcu_time+0xec>
		ret = validate_date_time(c_time,c_date);
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f844 	bl	8000dd8 <validate_date_time>
 8000d50:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == 1){
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d12f      	bne.n	8000db8 <set_tcu_time+0xf0>
	   		strncpy(nTdate,c_date,6);
 8000d58:	2206      	movs	r2, #6
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	481c      	ldr	r0, [pc, #112]	@ (8000dd0 <set_tcu_time+0x108>)
 8000d5e:	f008 fc4d 	bl	80095fc <strncpy>
   	  		 strncpy(nTtime,c_time,6);
 8000d62:	2206      	movs	r2, #6
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	481b      	ldr	r0, [pc, #108]	@ (8000dd4 <set_tcu_time+0x10c>)
 8000d68:	f008 fc48 	bl	80095fc <strncpy>
			convert_strtime_TO_timeofday(c_time, &time_of_day);
 8000d6c:	4916      	ldr	r1, [pc, #88]	@ (8000dc8 <set_tcu_time+0x100>)
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff ff4a 	bl	8000c08 <convert_strtime_TO_timeofday>
			curr_time_src=src;
 8000d74:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <set_tcu_time+0x104>)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	7013      	strb	r3, [r2, #0]
	break;
 8000d7a:	e01d      	b.n	8000db8 <set_tcu_time+0xf0>
		ret = validate_date_time(c_time,c_date);
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f000 f82a 	bl	8000dd8 <validate_date_time>
 8000d84:	6278      	str	r0, [r7, #36]	@ 0x24
		if(ret == 1){
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d117      	bne.n	8000dbc <set_tcu_time+0xf4>
	   		strncpy(nTdate,c_date,6);
 8000d8c:	2206      	movs	r2, #6
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	480f      	ldr	r0, [pc, #60]	@ (8000dd0 <set_tcu_time+0x108>)
 8000d92:	f008 fc33 	bl	80095fc <strncpy>
   	  		 strncpy(nTtime,c_time,6);
 8000d96:	2206      	movs	r2, #6
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <set_tcu_time+0x10c>)
 8000d9c:	f008 fc2e 	bl	80095fc <strncpy>
			convert_strtime_TO_timeofday(c_time, &time_of_day);
 8000da0:	4909      	ldr	r1, [pc, #36]	@ (8000dc8 <set_tcu_time+0x100>)
 8000da2:	68f8      	ldr	r0, [r7, #12]
 8000da4:	f7ff ff30 	bl	8000c08 <convert_strtime_TO_timeofday>
			curr_time_src=src;
 8000da8:	4a08      	ldr	r2, [pc, #32]	@ (8000dcc <set_tcu_time+0x104>)
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	7013      	strb	r3, [r2, #0]
	break;
 8000dae:	e005      	b.n	8000dbc <set_tcu_time+0xf4>
	break;
 8000db0:	bf00      	nop
 8000db2:	e004      	b.n	8000dbe <set_tcu_time+0xf6>
   		break;
 8000db4:	bf00      	nop
 8000db6:	e002      	b.n	8000dbe <set_tcu_time+0xf6>
	break;
 8000db8:	bf00      	nop
 8000dba:	e000      	b.n	8000dbe <set_tcu_time+0xf6>
	break;
 8000dbc:	bf00      	nop
   }

   return ret;
 8000dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3728      	adds	r7, #40	@ 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000e78 	.word	0x20000e78
 8000dcc:	20000068 	.word	0x20000068
 8000dd0:	2000006c 	.word	0x2000006c
 8000dd4:	2000018c 	.word	0x2000018c

08000dd8 <validate_date_time>:
* Function Name: validate_date_time
* Description  : validate given date and time is valid or not
* Arguments    : time, date
* Return Value : 1 - valid, 0 - invalid
***********************************************************************************************************************/
int validate_date_time(char *current_time, char *current_date){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	@ 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]

	unsigned int c_month,c_day,c_year,c_hr,c_min,c_sec;
	char temp_day[3],temp_month[3],temp_year[3];
	char temp_hr[3],temp_min[3],temp_sec[3];

	memset(temp_day,0x00,sizeof(temp_day));
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	2203      	movs	r2, #3
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f008 fbec 	bl	80095c8 <memset>
	strncpy(temp_day, current_date, 2);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2202      	movs	r2, #2
 8000df6:	6839      	ldr	r1, [r7, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 fbff 	bl	80095fc <strncpy>

	memset(temp_month,0x00,sizeof(temp_month));
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2203      	movs	r2, #3
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f008 fbde 	bl	80095c8 <memset>
	strncpy(temp_month, current_date+2, 2);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	1c99      	adds	r1, r3, #2
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	2202      	movs	r2, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f008 fbf0 	bl	80095fc <strncpy>

	memset(temp_year,0x00,sizeof(temp_year));
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2203      	movs	r2, #3
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f008 fbcf 	bl	80095c8 <memset>
	strncpy(temp_year, current_date+4, 2);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	1d19      	adds	r1, r3, #4
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2202      	movs	r2, #2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 fbe1 	bl	80095fc <strncpy>


	memset(temp_hr,0x00,sizeof(temp_hr));
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2203      	movs	r2, #3
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 fbc0 	bl	80095c8 <memset>
	strncpy(temp_hr, current_time, 2);
 8000e48:	f107 0310 	add.w	r3, r7, #16
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f008 fbd3 	bl	80095fc <strncpy>

	memset(temp_min,0x00,sizeof(temp_min));
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 fbb2 	bl	80095c8 <memset>
	strncpy(temp_min, current_time+2, 2);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	1c99      	adds	r1, r3, #2
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f008 fbc4 	bl	80095fc <strncpy>

	memset(temp_sec,0x00,sizeof(temp_sec));
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f008 fba3 	bl	80095c8 <memset>
	strncpy(temp_sec, current_time+4, 2);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	1d19      	adds	r1, r3, #4
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f008 fbb5 	bl	80095fc <strncpy>

	//date - ddmmyy
	c_day = atoi(temp_day);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f008 faed 	bl	8009476 <atoi>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
	c_month = atoi(temp_month);
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 fae6 	bl	8009476 <atoi>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
	c_year = atoi(temp_year);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f008 fadf 	bl	8009476 <atoi>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c

	c_hr = atoi(temp_hr);
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 fad8 	bl	8009476 <atoi>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
	c_min = atoi(temp_min);
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f008 fad1 	bl	8009476 <atoi>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
	c_sec = atoi(temp_sec);
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 faca 	bl	8009476 <atoi>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	623b      	str	r3, [r7, #32]


	if((c_year > 99)|| (c_month > 12) || (c_month < 1)){
 8000ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee8:	2b63      	cmp	r3, #99	@ 0x63
 8000eea:	d805      	bhi.n	8000ef8 <validate_date_time+0x120>
 8000eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d802      	bhi.n	8000ef8 <validate_date_time+0x120>
 8000ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <validate_date_time+0x124>
		// month or year is invalid. Do not update date and time
		return 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e052      	b.n	8000fa2 <validate_date_time+0x1ca>
	}

	if((c_hr > 23) || (c_min > 59) || (c_sec > 59)){
 8000efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000efe:	2b17      	cmp	r3, #23
 8000f00:	d805      	bhi.n	8000f0e <validate_date_time+0x136>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f06:	d802      	bhi.n	8000f0e <validate_date_time+0x136>
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f0c:	d901      	bls.n	8000f12 <validate_date_time+0x13a>
		// invalid time
		return 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e047      	b.n	8000fa2 <validate_date_time+0x1ca>
	}

	   // Adjust for month and year changes using switch statements
        switch (c_month) {
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	2b0c      	cmp	r3, #12
 8000f16:	bf8c      	ite	hi
 8000f18:	2301      	movhi	r3, #1
 8000f1a:	2300      	movls	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d13e      	bne.n	8000fa0 <validate_date_time+0x1c8>
 8000f22:	2201      	movs	r2, #1
 8000f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8000f2e:	401a      	ands	r2, r3
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	bf14      	ite	ne
 8000f34:	2201      	movne	r2, #1
 8000f36:	2200      	moveq	r2, #0
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d112      	bne.n	8000f64 <validate_date_time+0x18c>
 8000f3e:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	bf14      	ite	ne
 8000f46:	2201      	movne	r2, #1
 8000f48:	2200      	moveq	r2, #0
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	2a00      	cmp	r2, #0
 8000f4e:	d11f      	bne.n	8000f90 <validate_date_time+0x1b8>
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d105      	bne.n	8000f6e <validate_date_time+0x196>
 8000f62:	e01d      	b.n	8000fa0 <validate_date_time+0x1c8>
            case 7: // July
            case 8: // August
            case 10: // October
            case 12: // December

                if(c_day>31){
 8000f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f66:	2b1f      	cmp	r3, #31
 8000f68:	d917      	bls.n	8000f9a <validate_date_time+0x1c2>
			//invalid date
			return 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e019      	b.n	8000fa2 <validate_date_time+0x1ca>
		}
                break;

            case 2: // February

                if (is_leap_year(c_year)) {
 8000f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe19 	bl	8000ba8 <is_leap_year>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <validate_date_time+0x1ae>
                    if(c_day>29){
 8000f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7e:	2b1d      	cmp	r3, #29
 8000f80:	d90d      	bls.n	8000f9e <validate_date_time+0x1c6>
                       //invalid date
			return 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e00d      	b.n	8000fa2 <validate_date_time+0x1ca>
		     }
		    else{
			//valid day
		    }
                } else {
                    	if(c_day>28){
 8000f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f88:	2b1c      	cmp	r3, #28
 8000f8a:	d908      	bls.n	8000f9e <validate_date_time+0x1c6>
                    	   //tested
			    return 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e008      	b.n	8000fa2 <validate_date_time+0x1ca>
            case 4: // April
            case 6: // June
            case 9: // September
            case 11: // November

		        if(c_day>30){
 8000f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f92:	2b1e      	cmp	r3, #30
 8000f94:	d904      	bls.n	8000fa0 <validate_date_time+0x1c8>
		            //invalid date
			    return 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e003      	b.n	8000fa2 <validate_date_time+0x1ca>
                break;
 8000f9a:	bf00      	nop
 8000f9c:	e000      	b.n	8000fa0 <validate_date_time+0x1c8>
                break;
 8000f9e:	bf00      	nop
	        	}
	        	else{
		    	//valid
	        	}
            }
    return 1;
 8000fa0:	2301      	movs	r3, #1
 }
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3738      	adds	r7, #56	@ 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <read_tcu_time>:

void read_tcu_time(char *curr_time,char *curr_date){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]

	   //convert the time of day into hhmmss and update it in nTtime
	   convert_tod_to_time(nTtime, time_of_day);
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <read_tcu_time+0x30>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <read_tcu_time+0x34>)
 8000fbe:	f7ff fcf5 	bl	80009ac <convert_tod_to_time>
	   strcpy(curr_time,nTtime);
 8000fc2:	4907      	ldr	r1, [pc, #28]	@ (8000fe0 <read_tcu_time+0x34>)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f008 fb59 	bl	800967c <strcpy>
	   strcpy(curr_date,nTdate);
 8000fca:	4906      	ldr	r1, [pc, #24]	@ (8000fe4 <read_tcu_time+0x38>)
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f008 fb55 	bl	800967c <strcpy>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000e78 	.word	0x20000e78
 8000fe0:	2000018c 	.word	0x2000018c
 8000fe4:	2000006c 	.word	0x2000006c

08000fe8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000fec:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8000fee:	4a27      	ldr	r2, [pc, #156]	@ (800108c <MX_FDCAN1_Init+0xa4>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001004:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001006:	2201      	movs	r2, #1
 8001008:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800100c:	2200      	movs	r2, #0
 800100e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001010:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001012:	2200      	movs	r2, #0
 8001014:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001018:	2208      	movs	r2, #8
 800101a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800101e:	2201      	movs	r2, #1
 8001020:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001024:	2204      	movs	r2, #4
 8001026:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800102a:	2201      	movs	r2, #1
 800102c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 24;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001030:	2218      	movs	r2, #24
 8001032:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001036:	2201      	movs	r2, #1
 8001038:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800103c:	2201      	movs	r2, #1
 800103e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001042:	2201      	movs	r2, #1
 8001044:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800104e:	2200      	movs	r2, #0
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 800105a:	f001 ff1b 	bl	8002e94 <HAL_FDCAN_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001064:	f000 fe8e 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  TxHeader.IdType = FDCAN_EXTENDED_ID;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_FDCAN1_Init+0xa8>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106e:	605a      	str	r2, [r3, #4]
    RxHeader.IdType = FDCAN_EXTENDED_ID;
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <MX_FDCAN1_Init+0xac>)
 8001072:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001076:	605a      	str	r2, [r3, #4]
    HAL_FDCAN_ActivateNotification(&hfdcan1,HAL_FDCAN_RxFifo0Callback,0);
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_FDCAN1_Init+0xb0>)
 800107a:	2200      	movs	r2, #0
 800107c:	4619      	mov	r1, r3
 800107e:	4802      	ldr	r0, [pc, #8]	@ (8001088 <MX_FDCAN1_Init+0xa0>)
 8001080:	f002 f9d6 	bl	8003430 <HAL_FDCAN_ActivateNotification>

  /* USER CODE END FDCAN1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000d70 	.word	0x20000d70
 800108c:	4000a400 	.word	0x4000a400
 8001090:	20000194 	.word	0x20000194
 8001094:	200001b8 	.word	0x200001b8
 8001098:	0800117d 	.word	0x0800117d

0800109c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0ac      	sub	sp, #176	@ 0xb0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2288      	movs	r2, #136	@ 0x88
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f008 fa83 	bl	80095c8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001170 <HAL_FDCAN_MspInit+0xd4>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d14d      	bne.n	8001168 <HAL_FDCAN_MspInit+0xcc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0304 	mov.w	r3, #4
 80010d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80010d8:	2300      	movs	r3, #0
 80010da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fdcf 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80010ec:	f000 fe4a 	bl	8001d84 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 80010f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80010f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 80010f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 8001102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 8001110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_FDCAN_MspInit+0xd8>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB10     ------> FDCAN1_TX
    PB12     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800112c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001146:	2309      	movs	r3, #9
 8001148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001150:	4619      	mov	r1, r3
 8001152:	4809      	ldr	r0, [pc, #36]	@ (8001178 <HAL_FDCAN_MspInit+0xdc>)
 8001154:	f002 fcb2 	bl	8003abc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2027      	movs	r0, #39	@ 0x27
 800115e:	f001 fd1b 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001162:	2027      	movs	r0, #39	@ 0x27
 8001164:	f001 fd32 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	37b0      	adds	r7, #176	@ 0xb0
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	4000a400 	.word	0x4000a400
 8001174:	44020c00 	.word	0x44020c00
 8001178:	42020400 	.word	0x42020400

0800117c <HAL_FDCAN_RxFifo0Callback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
	unsigned int canid;
	 if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 81c1 	beq.w	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
	 {
		 if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8001192:	4ba4      	ldr	r3, [pc, #656]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8001194:	4aa4      	ldr	r2, [pc, #656]	@ (8001428 <HAL_FDCAN_RxFifo0Callback+0x2ac>)
 8001196:	2140      	movs	r1, #64	@ 0x40
 8001198:	48a4      	ldr	r0, [pc, #656]	@ (800142c <HAL_FDCAN_RxFifo0Callback+0x2b0>)
 800119a:	f002 f841 	bl	8003220 <HAL_FDCAN_GetRxMessage>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_FDCAN_RxFifo0Callback+0x2c>
			 Error_Handler();
 80011a4:	f000 fdee 	bl	8001d84 <Error_Handler>
		}
		check_can_int = 0;
 80011a8:	4ba1      	ldr	r3, [pc, #644]	@ (8001430 <HAL_FDCAN_RxFifo0Callback+0x2b4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
		canid = RxHeader.Identifier;
 80011ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001428 <HAL_FDCAN_RxFifo0Callback+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]
		switch(canid)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a9f      	ldr	r2, [pc, #636]	@ (8001434 <HAL_FDCAN_RxFifo0Callback+0x2b8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	f000 8169 	beq.w	8001490 <HAL_FDCAN_RxFifo0Callback+0x314>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4a9c      	ldr	r2, [pc, #624]	@ (8001434 <HAL_FDCAN_RxFifo0Callback+0x2b8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	f200 819b 	bhi.w	80014fe <HAL_FDCAN_RxFifo0Callback+0x382>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4a9b      	ldr	r2, [pc, #620]	@ (8001438 <HAL_FDCAN_RxFifo0Callback+0x2bc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d022      	beq.n	8001216 <HAL_FDCAN_RxFifo0Callback+0x9a>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a99      	ldr	r2, [pc, #612]	@ (8001438 <HAL_FDCAN_RxFifo0Callback+0x2bc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f200 8192 	bhi.w	80014fe <HAL_FDCAN_RxFifo0Callback+0x382>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a97      	ldr	r2, [pc, #604]	@ (800143c <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f000 8185 	beq.w	80014ee <HAL_FDCAN_RxFifo0Callback+0x372>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4a95      	ldr	r2, [pc, #596]	@ (800143c <HAL_FDCAN_RxFifo0Callback+0x2c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	f200 8188 	bhi.w	80014fe <HAL_FDCAN_RxFifo0Callback+0x382>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4a93      	ldr	r2, [pc, #588]	@ (8001440 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	f000 80b6 	beq.w	8001364 <HAL_FDCAN_RxFifo0Callback+0x1e8>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4a91      	ldr	r2, [pc, #580]	@ (8001440 <HAL_FDCAN_RxFifo0Callback+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f200 817e 	bhi.w	80014fe <HAL_FDCAN_RxFifo0Callback+0x382>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4a8f      	ldr	r2, [pc, #572]	@ (8001444 <HAL_FDCAN_RxFifo0Callback+0x2c8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d050      	beq.n	80012ac <HAL_FDCAN_RxFifo0Callback+0x130>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a8e      	ldr	r2, [pc, #568]	@ (8001448 <HAL_FDCAN_RxFifo0Callback+0x2cc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f000 80d8 	beq.w	80013c4 <HAL_FDCAN_RxFifo0Callback+0x248>
				 totp_ack_buf[0] = RxData[0];
				 totp_rec =1;
				break;

			default:
			break;
 8001214:	e173      	b.n	80014fe <HAL_FDCAN_RxFifo0Callback+0x382>
				frame_no = RxData[0]; //frame number received
 8001216:	4b83      	ldr	r3, [pc, #524]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	4b8c      	ldr	r3, [pc, #560]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 800121c:	701a      	strb	r2, [r3, #0]
				memcpy(&rx_buffer1[((frame_no-1)*7) + buff_segment_id * 259 ],RxData+1,7); //copy to the given segment
 800121e:	4b8b      	ldr	r3, [pc, #556]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	4613      	mov	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	1a99      	subs	r1, r3, r2
 800122a:	4b89      	ldr	r3, [pc, #548]	@ (8001450 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4613      	mov	r3, r2
 8001232:	01db      	lsls	r3, r3, #7
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	440b      	add	r3, r1
 800123c:	4a85      	ldr	r2, [pc, #532]	@ (8001454 <HAL_FDCAN_RxFifo0Callback+0x2d8>)
 800123e:	4413      	add	r3, r2
 8001240:	4985      	ldr	r1, [pc, #532]	@ (8001458 <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 8001242:	2207      	movs	r2, #7
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fa21 	bl	800968c <memcpy>
				frame_checksum = RxData[0] ^ frame_checksum;  //calculate checksum using the frame no.
 800124a:	4b76      	ldr	r3, [pc, #472]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 800124c:	781a      	ldrb	r2, [r3, #0]
 800124e:	4b83      	ldr	r3, [pc, #524]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4053      	eors	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b81      	ldr	r3, [pc, #516]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8001258:	701a      	strb	r2, [r3, #0]
				if(RxData[0] == LAST_FRAME){                 //check the below condition only when 37th frame is received.
 800125a:	4b72      	ldr	r3, [pc, #456]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b25      	cmp	r3, #37	@ 0x25
 8001260:	f040 814f 	bne.w	8001502 <HAL_FDCAN_RxFifo0Callback+0x386>
					if(frame_checksum == CHECKSUM){
 8001264:	4b7d      	ldr	r3, [pc, #500]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d116      	bne.n	800129a <HAL_FDCAN_RxFifo0Callback+0x11e>
						can_data_valid = 1;
 800126c:	4b7c      	ldr	r3, [pc, #496]	@ (8001460 <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
						frame_checksum= 0;
 8001272:	4b7a      	ldr	r3, [pc, #488]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
						checksum_success++;
 8001278:	4b7a      	ldr	r3, [pc, #488]	@ (8001464 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a79      	ldr	r2, [pc, #484]	@ (8001464 <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8001280:	6013      	str	r3, [r2, #0]
						if(!buff_segment_id){
 8001282:	4b73      	ldr	r3, [pc, #460]	@ (8001450 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <HAL_FDCAN_RxFifo0Callback+0x116>
							buff_segment_id = 1;
 800128a:	4b71      	ldr	r3, [pc, #452]	@ (8001450 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
				break;
 8001290:	e137      	b.n	8001502 <HAL_FDCAN_RxFifo0Callback+0x386>
							buff_segment_id = 0;
 8001292:	4b6f      	ldr	r3, [pc, #444]	@ (8001450 <HAL_FDCAN_RxFifo0Callback+0x2d4>)
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
				break;
 8001298:	e133      	b.n	8001502 <HAL_FDCAN_RxFifo0Callback+0x386>
						frame_checksum= 0;
 800129a:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
						checksum_error ++;
 80012a0:	4b71      	ldr	r3, [pc, #452]	@ (8001468 <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	4a70      	ldr	r2, [pc, #448]	@ (8001468 <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 80012a8:	6013      	str	r3, [r2, #0]
				break;
 80012aa:	e12a      	b.n	8001502 <HAL_FDCAN_RxFifo0Callback+0x386>
				memcpy(mempcb_can_data,RxData,8);
 80012ac:	4b6f      	ldr	r3, [pc, #444]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 80012ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 80012b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b4:	e883 0003 	stmia.w	r3, {r0, r1}
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, mempcb_can_data[0] & 0x1);    //LED 3
 80012b8:	4b6c      	ldr	r3, [pc, #432]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	2110      	movs	r1, #16
 80012c6:	486a      	ldr	r0, [pc, #424]	@ (8001470 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 80012c8:	f002 fd4a 	bl	8003d60 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, (mempcb_can_data[0] & 0x4)<<3);  // LED 2							              //LED 5
 80012cc:	4b67      	ldr	r3, [pc, #412]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	2108      	movs	r1, #8
 80012de:	4864      	ldr	r0, [pc, #400]	@ (8001470 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 80012e0:	f002 fd3e 	bl	8003d60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (mempcb_can_data[0] & 0x10) << 1 );   //LED 5
 80012e4:	4b61      	ldr	r3, [pc, #388]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	2140      	movs	r1, #64	@ 0x40
 80012f6:	485e      	ldr	r0, [pc, #376]	@ (8001470 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 80012f8:	f002 fd32 	bl	8003d60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (mempcb_can_data[0] & 0x40) << 1); //LED 4
 80012fc:	4b5b      	ldr	r3, [pc, #364]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	2120      	movs	r1, #32
 800130e:	4858      	ldr	r0, [pc, #352]	@ (8001470 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 8001310:	f002 fd26 	bl	8003d60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, mempcb_can_data[1] & 0x1);  //LED 1
 8001314:	4b55      	ldr	r3, [pc, #340]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001324:	4853      	ldr	r0, [pc, #332]	@ (8001474 <HAL_FDCAN_RxFifo0Callback+0x2f8>)
 8001326:	f002 fd1b 	bl	8003d60 <HAL_GPIO_WritePin>
			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (mempcb_can_data[1] & 0x4) << 3); //LED 6
 800132a:	4b50      	ldr	r3, [pc, #320]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	2180      	movs	r1, #128	@ 0x80
 800133c:	484c      	ldr	r0, [pc, #304]	@ (8001470 <HAL_FDCAN_RxFifo0Callback+0x2f4>)
 800133e:	f002 fd0f 	bl	8003d60 <HAL_GPIO_WritePin>
			    if(mempcb_can_data[1] == 0x10)
 8001342:	4b4a      	ldr	r3, [pc, #296]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8001344:	785b      	ldrb	r3, [r3, #1]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d103      	bne.n	8001352 <HAL_FDCAN_RxFifo0Callback+0x1d6>
			    	key_state = 1;
 800134a:	4b4b      	ldr	r3, [pc, #300]	@ (8001478 <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
				break;
 8001350:	e0d9      	b.n	8001506 <HAL_FDCAN_RxFifo0Callback+0x38a>
			    else if (mempcb_can_data[1] == 0x00)
 8001352:	4b46      	ldr	r3, [pc, #280]	@ (800146c <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 80d5 	bne.w	8001506 <HAL_FDCAN_RxFifo0Callback+0x38a>
			    	key_state = 0;
 800135c:	4b46      	ldr	r3, [pc, #280]	@ (8001478 <HAL_FDCAN_RxFifo0Callback+0x2fc>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
				break;
 8001362:	e0d0      	b.n	8001506 <HAL_FDCAN_RxFifo0Callback+0x38a>
				frame_no = RxData[0];               //frame number received
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	4b38      	ldr	r3, [pc, #224]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 800136a:	701a      	strb	r2, [r3, #0]
				memcpy(&dockID_buffer[(frame_no -1)*7],RxData+1,7); //copy 7 bytes of data from each frame
 800136c:	4b37      	ldr	r3, [pc, #220]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	1e5a      	subs	r2, r3, #1
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_FDCAN_RxFifo0Callback+0x300>)
 800137a:	4413      	add	r3, r2
 800137c:	4936      	ldr	r1, [pc, #216]	@ (8001458 <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 800137e:	2207      	movs	r2, #7
 8001380:	4618      	mov	r0, r3
 8001382:	f008 f983 	bl	800968c <memcpy>
				dockID_checksum = RxData[0] ^ dockID_checksum; //calculate checksum using frame no 0th byte
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 8001388:	781a      	ldrb	r2, [r3, #0]
 800138a:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <HAL_FDCAN_RxFifo0Callback+0x304>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4053      	eors	r3, r2
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_FDCAN_RxFifo0Callback+0x304>)
 8001394:	701a      	strb	r2, [r3, #0]
				if(frame_no >= 0x03){  //last frame detected
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	f240 80b5 	bls.w	800150a <HAL_FDCAN_RxFifo0Callback+0x38e>
					frame_no = 0;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
					if(dockID_checksum == DOCK_ID_CHECKSUM){  //validate checksum
 80013a6:	4b36      	ldr	r3, [pc, #216]	@ (8001480 <HAL_FDCAN_RxFifo0Callback+0x304>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_FDCAN_RxFifo0Callback+0x240>
						dockID_checksum = 0 ;
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <HAL_FDCAN_RxFifo0Callback+0x304>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
						dockID_buffer[20] = 0x00; //
 80013b4:	4b31      	ldr	r3, [pc, #196]	@ (800147c <HAL_FDCAN_RxFifo0Callback+0x300>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	751a      	strb	r2, [r3, #20]
				break;
 80013ba:	e0a6      	b.n	800150a <HAL_FDCAN_RxFifo0Callback+0x38e>
						dockID_checksum = 0 ;
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_FDCAN_RxFifo0Callback+0x304>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
				break;
 80013c2:	e0a2      	b.n	800150a <HAL_FDCAN_RxFifo0Callback+0x38e>
					frame_no = RxData[0];               //frame number received
 80013c4:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b20      	ldr	r3, [pc, #128]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 80013ca:	701a      	strb	r2, [r3, #0]
					memcpy(&alertData_buffer[(frame_no -1)*7],RxData+1,7); //copy 7 bytes of data from each frame
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	1e5a      	subs	r2, r3, #1
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001484 <HAL_FDCAN_RxFifo0Callback+0x308>)
 80013da:	4413      	add	r3, r2
 80013dc:	491e      	ldr	r1, [pc, #120]	@ (8001458 <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 80013de:	2207      	movs	r2, #7
 80013e0:	4618      	mov	r0, r3
 80013e2:	f008 f953 	bl	800968c <memcpy>
					alertData_checksum = RxData[0] ^ alertData_checksum;  //calculate checksum using frame no 0th byte
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_FDCAN_RxFifo0Callback+0x2a8>)
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4053      	eors	r3, r2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b25      	ldr	r3, [pc, #148]	@ (8001488 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 80013f4:	701a      	strb	r2, [r3, #0]
					if(frame_no >= 0x25){   //last frame detected
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b24      	cmp	r3, #36	@ 0x24
 80013fc:	f240 8087 	bls.w	800150e <HAL_FDCAN_RxFifo0Callback+0x392>
								frame_no = 0;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_FDCAN_RxFifo0Callback+0x2d0>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
								if(alertData_checksum == 1){   //data is valid of checksum match
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_FDCAN_RxFifo0Callback+0x2a0>
									alertData_checksum = 0;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
									alert_data_valid = 1;
 8001414:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_FDCAN_RxFifo0Callback+0x310>)
 8001416:	2201      	movs	r2, #1
 8001418:	701a      	strb	r2, [r3, #0]
					break;
 800141a:	e078      	b.n	800150e <HAL_FDCAN_RxFifo0Callback+0x392>
									alertData_checksum = 0;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_FDCAN_RxFifo0Callback+0x30c>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
					break;
 8001422:	e074      	b.n	800150e <HAL_FDCAN_RxFifo0Callback+0x392>
 8001424:	200001e0 	.word	0x200001e0
 8001428:	200001b8 	.word	0x200001b8
 800142c:	20000d70 	.word	0x20000d70
 8001430:	2000021a 	.word	0x2000021a
 8001434:	18327060 	.word	0x18327060
 8001438:	18227060 	.word	0x18227060
 800143c:	10397060 	.word	0x10397060
 8001440:	10377060 	.word	0x10377060
 8001444:	10217060 	.word	0x10217060
 8001448:	10367060 	.word	0x10367060
 800144c:	20000211 	.word	0x20000211
 8001450:	20000210 	.word	0x20000210
 8001454:	20000228 	.word	0x20000228
 8001458:	200001e1 	.word	0x200001e1
 800145c:	20000212 	.word	0x20000212
 8001460:	20000213 	.word	0x20000213
 8001464:	20000220 	.word	0x20000220
 8001468:	2000021c 	.word	0x2000021c
 800146c:	20000848 	.word	0x20000848
 8001470:	42020400 	.word	0x42020400
 8001474:	42020800 	.word	0x42020800
 8001478:	20000000 	.word	0x20000000
 800147c:	20000830 	.word	0x20000830
 8001480:	20000214 	.word	0x20000214
 8001484:	20000864 	.word	0x20000864
 8001488:	20000215 	.word	0x20000215
 800148c:	20000216 	.word	0x20000216
							frame_no = RxData[0];               //frame number received
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <HAL_FDCAN_RxFifo0Callback+0x3a0>)
 8001492:	781a      	ldrb	r2, [r3, #0]
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <HAL_FDCAN_RxFifo0Callback+0x3a4>)
 8001496:	701a      	strb	r2, [r3, #0]
							memcpy(&summaryData_buffer[(frame_no -1)*7],RxData+1,7); //copy 7 bytes of data from each frame
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <HAL_FDCAN_RxFifo0Callback+0x3a4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001524 <HAL_FDCAN_RxFifo0Callback+0x3a8>)
 80014a6:	4413      	add	r3, r2
 80014a8:	491f      	ldr	r1, [pc, #124]	@ (8001528 <HAL_FDCAN_RxFifo0Callback+0x3ac>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	4618      	mov	r0, r3
 80014ae:	f008 f8ed 	bl	800968c <memcpy>
							summaryData_checksum = RxData[0] ^ summaryData_checksum;  //calculate checksum using frame no 0th byte
 80014b2:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <HAL_FDCAN_RxFifo0Callback+0x3a0>)
 80014b4:	781a      	ldrb	r2, [r3, #0]
 80014b6:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_FDCAN_RxFifo0Callback+0x3b0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4053      	eors	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_FDCAN_RxFifo0Callback+0x3b0>)
 80014c0:	701a      	strb	r2, [r3, #0]
							if(frame_no >= 0x25){   //last frame detected
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_FDCAN_RxFifo0Callback+0x3a4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b24      	cmp	r3, #36	@ 0x24
 80014c8:	d923      	bls.n	8001512 <HAL_FDCAN_RxFifo0Callback+0x396>
									frame_no = 0;
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <HAL_FDCAN_RxFifo0Callback+0x3a4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
									if(summaryData_checksum == 1){   //data is valid of checksum match
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_FDCAN_RxFifo0Callback+0x3b0>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_FDCAN_RxFifo0Callback+0x36a>
													summaryData_checksum = 0;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <HAL_FDCAN_RxFifo0Callback+0x3b0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
													summary_data_valid = 1;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_FDCAN_RxFifo0Callback+0x3b4>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
							break;
 80014e4:	e015      	b.n	8001512 <HAL_FDCAN_RxFifo0Callback+0x396>
													summaryData_checksum = 0;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_FDCAN_RxFifo0Callback+0x3b0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
							break;
 80014ec:	e011      	b.n	8001512 <HAL_FDCAN_RxFifo0Callback+0x396>
				 totp_ack_buf[0] = RxData[0];
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_FDCAN_RxFifo0Callback+0x3a0>)
 80014f0:	781a      	ldrb	r2, [r3, #0]
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <HAL_FDCAN_RxFifo0Callback+0x3b8>)
 80014f4:	701a      	strb	r2, [r3, #0]
				 totp_rec =1;
 80014f6:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <HAL_FDCAN_RxFifo0Callback+0x3bc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
				break;
 80014fc:	e00a      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
			break;
 80014fe:	bf00      	nop
 8001500:	e008      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
				break;
 8001502:	bf00      	nop
 8001504:	e006      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
				break;
 8001506:	bf00      	nop
 8001508:	e004      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
				break;
 800150a:	bf00      	nop
 800150c:	e002      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
					break;
 800150e:	bf00      	nop
 8001510:	e000      	b.n	8001514 <HAL_FDCAN_RxFifo0Callback+0x398>
							break;
 8001512:	bf00      	nop
		}
	 }
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200001e0 	.word	0x200001e0
 8001520:	20000211 	.word	0x20000211
 8001524:	200009e4 	.word	0x200009e4
 8001528:	200001e1 	.word	0x200001e1
 800152c:	20000218 	.word	0x20000218
 8001530:	20000219 	.word	0x20000219
 8001534:	20000d6c 	.word	0x20000d6c
 8001538:	20000224 	.word	0x20000224

0800153c <store_data>:
* Description  : This function creates packet using the received can data & stores to flash
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
//Function gets the valid CAN data from isr, creates packet & writes to external flash
void store_data(void){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

	int packetlen=0;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]

	//checks for new live data received & packetizes
	if(can_data_valid){   // all 37 frames have been received copy to main buffer for further processing
 8001546:	4b66      	ldr	r3, [pc, #408]	@ (80016e0 <store_data+0x1a4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d072      	beq.n	8001634 <store_data+0xf8>
		read_tcu_time(device_time,device_date);    //Get current date & time
 800154e:	4965      	ldr	r1, [pc, #404]	@ (80016e4 <store_data+0x1a8>)
 8001550:	4865      	ldr	r0, [pc, #404]	@ (80016e8 <store_data+0x1ac>)
 8001552:	f7ff fd2b 	bl	8000fac <read_tcu_time>
				  can_data_valid = 0;
 8001556:	4b62      	ldr	r3, [pc, #392]	@ (80016e0 <store_data+0x1a4>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
				  strncpy(rx_buffer2,"$$H",3);
 800155c:	4b63      	ldr	r3, [pc, #396]	@ (80016ec <store_data+0x1b0>)
 800155e:	4a64      	ldr	r2, [pc, #400]	@ (80016f0 <store_data+0x1b4>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	4611      	mov	r1, r2
 8001564:	8019      	strh	r1, [r3, #0]
 8001566:	3302      	adds	r3, #2
 8001568:	0c12      	lsrs	r2, r2, #16
 800156a:	701a      	strb	r2, [r3, #0]
				  get_devid(rx_buffer2+3);				// device id is 10 chars long
 800156c:	4b61      	ldr	r3, [pc, #388]	@ (80016f4 <store_data+0x1b8>)
 800156e:	4618      	mov	r0, r3
 8001570:	f000 fa7a 	bl	8001a68 <get_devid>
				  strncpy(rx_buffer2+13,device_date,6);	   // HHMMSS
 8001574:	4b60      	ldr	r3, [pc, #384]	@ (80016f8 <store_data+0x1bc>)
 8001576:	2206      	movs	r2, #6
 8001578:	495a      	ldr	r1, [pc, #360]	@ (80016e4 <store_data+0x1a8>)
 800157a:	4618      	mov	r0, r3
 800157c:	f008 f83e 	bl	80095fc <strncpy>
				  strncpy(rx_buffer2+19,device_time,6); 	//YYMMDD
 8001580:	4b5e      	ldr	r3, [pc, #376]	@ (80016fc <store_data+0x1c0>)
 8001582:	2206      	movs	r2, #6
 8001584:	4958      	ldr	r1, [pc, #352]	@ (80016e8 <store_data+0x1ac>)
 8001586:	4618      	mov	r0, r3
 8001588:	f008 f838 	bl	80095fc <strncpy>
				  if(buff_segment_id){  //segment 0 =>  0- 258
 800158c:	4b5c      	ldr	r3, [pc, #368]	@ (8001700 <store_data+0x1c4>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <store_data+0x74>
						  //copy from the Upper section of 518 i.e. 0 - 258 & update the segment id to 1
						  memcpy(rx_buffer2+25,rx_buffer1+0,259); //holds received can data
 8001594:	4b5b      	ldr	r3, [pc, #364]	@ (8001704 <store_data+0x1c8>)
 8001596:	f240 1203 	movw	r2, #259	@ 0x103
 800159a:	495b      	ldr	r1, [pc, #364]	@ (8001708 <store_data+0x1cc>)
 800159c:	4618      	mov	r0, r3
 800159e:	f008 f875 	bl	800968c <memcpy>
						  memset(rx_buffer1,0x00,259);           //clear segment 0 of rx buffer1 0-258
 80015a2:	f240 1203 	movw	r2, #259	@ 0x103
 80015a6:	2100      	movs	r1, #0
 80015a8:	4857      	ldr	r0, [pc, #348]	@ (8001708 <store_data+0x1cc>)
 80015aa:	f008 f80d 	bl	80095c8 <memset>
 80015ae:	e00d      	b.n	80015cc <store_data+0x90>
				   }else{  //segment 1  => 259-517
						  //copy from the lower section of 518 i.e. 259 - 517 & update the segment id to 0
						  memcpy(rx_buffer2+25,rx_buffer1+259,259);
 80015b0:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <store_data+0x1c8>)
 80015b2:	4956      	ldr	r1, [pc, #344]	@ (800170c <store_data+0x1d0>)
 80015b4:	f240 1203 	movw	r2, #259	@ 0x103
 80015b8:	4618      	mov	r0, r3
 80015ba:	f008 f867 	bl	800968c <memcpy>
						  memset(rx_buffer1+259,0x00,259);      ////clear segment 1 of rx buffer1 259-517
 80015be:	4b53      	ldr	r3, [pc, #332]	@ (800170c <store_data+0x1d0>)
 80015c0:	f240 1203 	movw	r2, #259	@ 0x103
 80015c4:	2100      	movs	r1, #0
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 fffe 	bl	80095c8 <memset>
				  }
				  //Write 512 bytes of data to external flash & read back, followed by write & read pointer handling
				  memset(error_buf,0x00,sizeof(error_buf));
 80015cc:	2208      	movs	r2, #8
 80015ce:	2100      	movs	r1, #0
 80015d0:	484f      	ldr	r0, [pc, #316]	@ (8001710 <store_data+0x1d4>)
 80015d2:	f007 fff9 	bl	80095c8 <memset>
				  sprintf((char *)error_buf,"%.6d",checksum_error);  //RX Checksum error count
 80015d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001714 <store_data+0x1d8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	494e      	ldr	r1, [pc, #312]	@ (8001718 <store_data+0x1dc>)
 80015de:	484c      	ldr	r0, [pc, #304]	@ (8001710 <store_data+0x1d4>)
 80015e0:	f007 ffd2 	bl	8009588 <siprintf>
			      strncpy(rx_buffer2+284,error_buf,6);
 80015e4:	4b4d      	ldr	r3, [pc, #308]	@ (800171c <store_data+0x1e0>)
 80015e6:	2206      	movs	r2, #6
 80015e8:	4949      	ldr	r1, [pc, #292]	@ (8001710 <store_data+0x1d4>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 f806 	bl	80095fc <strncpy>
				  strncpy(rx_buffer2+290,",",1);
 80015f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <store_data+0x1e4>)
 80015f2:	222c      	movs	r2, #44	@ 0x2c
 80015f4:	701a      	strb	r2, [r3, #0]
				  memset(error_buf,0x00,sizeof(error_buf));
 80015f6:	2208      	movs	r2, #8
 80015f8:	2100      	movs	r1, #0
 80015fa:	4845      	ldr	r0, [pc, #276]	@ (8001710 <store_data+0x1d4>)
 80015fc:	f007 ffe4 	bl	80095c8 <memset>
				  sprintf((char *)error_buf,"%.6d",checksum_success);   //rx checksum success count
 8001600:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <store_data+0x1e8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4944      	ldr	r1, [pc, #272]	@ (8001718 <store_data+0x1dc>)
 8001608:	4841      	ldr	r0, [pc, #260]	@ (8001710 <store_data+0x1d4>)
 800160a:	f007 ffbd 	bl	8009588 <siprintf>
				  strncpy(rx_buffer2+291,error_buf,6);
 800160e:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <store_data+0x1ec>)
 8001610:	2206      	movs	r2, #6
 8001612:	493f      	ldr	r1, [pc, #252]	@ (8001710 <store_data+0x1d4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f007 fff1 	bl	80095fc <strncpy>
				  strcpy((char*)rx_buffer2+297,"$*");   //terminator
 800161a:	4b44      	ldr	r3, [pc, #272]	@ (800172c <store_data+0x1f0>)
 800161c:	4a44      	ldr	r2, [pc, #272]	@ (8001730 <store_data+0x1f4>)
 800161e:	8811      	ldrh	r1, [r2, #0]
 8001620:	7892      	ldrb	r2, [r2, #2]
 8001622:	8019      	strh	r1, [r3, #0]
 8001624:	709a      	strb	r2, [r3, #2]
				  HAL_UART_Transmit(&huart1,rx_buffer2,300,100);
 8001626:	2364      	movs	r3, #100	@ 0x64
 8001628:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800162c:	492f      	ldr	r1, [pc, #188]	@ (80016ec <store_data+0x1b0>)
 800162e:	4841      	ldr	r0, [pc, #260]	@ (8001734 <store_data+0x1f8>)
 8001630:	f006 fbe5 	bl	8007dfe <HAL_UART_Transmit>
				           //update_flash(rx_buffer2,&collar.wptr,&collar.rptr,HISTORYDATAFLASHSTART,HISTORYDATAFLASHEND,WRITE_SIZE); //actual packet size - 292 bytesz
				  //}
	}

	//creates alert packet if valid data received from can
	if(alert_data_valid){
 8001634:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <store_data+0x1fc>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <store_data+0x138>
			alert_data_valid =0;
 800163c:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <store_data+0x1fc>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
			memset(write_data,0x00,sizeof(write_data));
 8001642:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001646:	2100      	movs	r1, #0
 8001648:	483c      	ldr	r0, [pc, #240]	@ (800173c <store_data+0x200>)
 800164a:	f007 ffbd 	bl	80095c8 <memset>
			alert_packet(write_data,sizeof(write_data));  //create $$A packet
 800164e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001652:	483a      	ldr	r0, [pc, #232]	@ (800173c <store_data+0x200>)
 8001654:	f000 f9c0 	bl	80019d8 <alert_packet>
			HAL_UART_Transmit(&huart1,write_data,279,100); //Push Alert packet to UART
 8001658:	2364      	movs	r3, #100	@ 0x64
 800165a:	f240 1217 	movw	r2, #279	@ 0x117
 800165e:	4937      	ldr	r1, [pc, #220]	@ (800173c <store_data+0x200>)
 8001660:	4834      	ldr	r0, [pc, #208]	@ (8001734 <store_data+0x1f8>)
 8001662:	f006 fbcc 	bl	8007dfe <HAL_UART_Transmit>
			collar.alertwptr = collar.wptr;
 8001666:	4b36      	ldr	r3, [pc, #216]	@ (8001740 <store_data+0x204>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a35      	ldr	r2, [pc, #212]	@ (8001740 <store_data+0x204>)
 800166c:	6113      	str	r3, [r2, #16]
			send_alert_data = 1;
 800166e:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <store_data+0x208>)
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
			}
			send_alert_data=0;
	}*/

	//if summary data is received generate packet, store to flash read back & send over UART
	if(summary_data_valid){
 8001674:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <store_data+0x20c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00f      	beq.n	800169c <store_data+0x160>
			packetlen=0;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
			summary_data_valid =0;
 8001680:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <store_data+0x20c>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
			memset(write_data,0x00,sizeof(write_data));
 8001686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800168a:	2100      	movs	r1, #0
 800168c:	482b      	ldr	r0, [pc, #172]	@ (800173c <store_data+0x200>)
 800168e:	f007 ff9b 	bl	80095c8 <memset>
			summary_packet(write_data,sizeof(write_data));  //create $$S packet
 8001692:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001696:	4829      	ldr	r0, [pc, #164]	@ (800173c <store_data+0x200>)
 8001698:	f000 f956 	bl	8001948 <summary_packet>
			//if(flash_state == FLASH_READY_STATE ){
				//	update_flash(write_data,&collar.summarywptr,&collar.summaryrptr,SUMMARYDATASTART,SUMMARYDATAEND,WRITE_SIZE); //actual packet size - 292 bytesz
			//}
	}

if(check_can_int >=30){  //Heartbeat event
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <store_data+0x210>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b1d      	cmp	r3, #29
 80016a2:	d907      	bls.n	80016b4 <store_data+0x178>
			check_can_int =0;
 80016a4:	4b29      	ldr	r3, [pc, #164]	@ (800174c <store_data+0x210>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
			tiu_heartbeat_string(write_data,sizeof(write_data)); //create $$B packet
 80016aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ae:	4823      	ldr	r0, [pc, #140]	@ (800173c <store_data+0x200>)
 80016b0:	f000 f850 	bl	8001754 <tiu_heartbeat_string>
}

	if(totp_rec){  //when TOTP Ack is received from BMCU
 80016b4:	4b26      	ldr	r3, [pc, #152]	@ (8001750 <store_data+0x214>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00d      	beq.n	80016d8 <store_data+0x19c>
		totp_rec = 0;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <store_data+0x214>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
		memset(write_data,0x00,sizeof(write_data));
 80016c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016c6:	2100      	movs	r1, #0
 80016c8:	481c      	ldr	r0, [pc, #112]	@ (800173c <store_data+0x200>)
 80016ca:	f007 ff7d 	bl	80095c8 <memset>
		tiu_totp_string(write_data,sizeof(write_data));   //create $$T packet
 80016ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016d2:	481a      	ldr	r0, [pc, #104]	@ (800173c <store_data+0x200>)
 80016d4:	f000 f8b6 	bl	8001844 <tiu_totp_string>
				//	update_flash(write_data,&collar.totp_wptr,&collar.totp_rptr,TOTP_STORE_START,TOTP_STORE_END,256); //actual packet size - 292 bytesz
		//}
	}


}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000213 	.word	0x20000213
 80016e4:	2000085c 	.word	0x2000085c
 80016e8:	20000854 	.word	0x20000854
 80016ec:	20000430 	.word	0x20000430
 80016f0:	08009fa8 	.word	0x08009fa8
 80016f4:	20000433 	.word	0x20000433
 80016f8:	2000043d 	.word	0x2000043d
 80016fc:	20000443 	.word	0x20000443
 8001700:	20000210 	.word	0x20000210
 8001704:	20000449 	.word	0x20000449
 8001708:	20000228 	.word	0x20000228
 800170c:	2000032b 	.word	0x2000032b
 8001710:	20000d64 	.word	0x20000d64
 8001714:	2000021c 	.word	0x2000021c
 8001718:	08009fac 	.word	0x08009fac
 800171c:	2000054c 	.word	0x2000054c
 8001720:	20000552 	.word	0x20000552
 8001724:	20000220 	.word	0x20000220
 8001728:	20000553 	.word	0x20000553
 800172c:	20000559 	.word	0x20000559
 8001730:	08009fb4 	.word	0x08009fb4
 8001734:	20000f38 	.word	0x20000f38
 8001738:	20000216 	.word	0x20000216
 800173c:	20000b64 	.word	0x20000b64
 8001740:	200001e8 	.word	0x200001e8
 8001744:	20000217 	.word	0x20000217
 8001748:	20000219 	.word	0x20000219
 800174c:	2000021a 	.word	0x2000021a
 8001750:	20000224 	.word	0x20000224

08001754 <tiu_heartbeat_string>:
* Function Name: tiu_heartbeat_string
* Description  : Function creates the heartbeat packet
* Arguments    : None
* Return Value : None
***********************************************************************************************************************/
void tiu_heartbeat_string(unsigned char * hb_string,int maxsize){
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]

	int packetlen=0;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
   // get_batteryid();
	//get_latlon_fr_hb (c_lat,c_lon);
	read_tcu_time(device_time,device_date);    //Get current date & time
 8001762:	4932      	ldr	r1, [pc, #200]	@ (800182c <tiu_heartbeat_string+0xd8>)
 8001764:	4832      	ldr	r0, [pc, #200]	@ (8001830 <tiu_heartbeat_string+0xdc>)
 8001766:	f7ff fc21 	bl	8000fac <read_tcu_time>
	memset(hb_string,0x00,maxsize);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	2100      	movs	r1, #0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f007 ff29 	bl	80095c8 <memset>
	strncpy(hb_string,"$$B",3);  		// Start of packet
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a2e      	ldr	r2, [pc, #184]	@ (8001834 <tiu_heartbeat_string+0xe0>)
 800177a:	8811      	ldrh	r1, [r2, #0]
 800177c:	7892      	ldrb	r2, [r2, #2]
 800177e:	8019      	strh	r1, [r3, #0]
 8001780:	709a      	strb	r2, [r3, #2]
	get_devid(hb_string+3);				// device id is 10 chars long
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f96e 	bl	8001a68 <get_devid>
	strncpy(hb_string+13,device_date,6); 	//YYMMDD
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	330d      	adds	r3, #13
 8001790:	2206      	movs	r2, #6
 8001792:	4926      	ldr	r1, [pc, #152]	@ (800182c <tiu_heartbeat_string+0xd8>)
 8001794:	4618      	mov	r0, r3
 8001796:	f007 ff31 	bl	80095fc <strncpy>
	strncpy(hb_string+19,device_time,6);	// hhmmss
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3313      	adds	r3, #19
 800179e:	2206      	movs	r2, #6
 80017a0:	4923      	ldr	r1, [pc, #140]	@ (8001830 <tiu_heartbeat_string+0xdc>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 ff2a 	bl	80095fc <strncpy>
	strncpy(hb_string+25,",",1);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3319      	adds	r3, #25
 80017ac:	222c      	movs	r2, #44	@ 0x2c
 80017ae:	701a      	strb	r2, [r3, #0]
	strncpy(hb_string+26,"61680.6168",strlen("61680.6168"));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	331a      	adds	r3, #26
 80017b4:	4920      	ldr	r1, [pc, #128]	@ (8001838 <tiu_heartbeat_string+0xe4>)
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	cb03      	ldmia	r3!, {r0, r1}
 80017bc:	6010      	str	r0, [r2, #0]
 80017be:	6051      	str	r1, [r2, #4]
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	8113      	strh	r3, [r2, #8]
	strncpy(hb_string+36,",",1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3324      	adds	r3, #36	@ 0x24
 80017c8:	222c      	movs	r2, #44	@ 0x2c
 80017ca:	701a      	strb	r2, [r3, #0]
	strncpy(hb_string+37,"61680.6168",strlen("61680.6168"));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3325      	adds	r3, #37	@ 0x25
 80017d0:	4919      	ldr	r1, [pc, #100]	@ (8001838 <tiu_heartbeat_string+0xe4>)
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	cb03      	ldmia	r3!, {r0, r1}
 80017d8:	6010      	str	r0, [r2, #0]
 80017da:	6051      	str	r1, [r2, #4]
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	8113      	strh	r3, [r2, #8]
	strncpy(hb_string+47,",",1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	332f      	adds	r3, #47	@ 0x2f
 80017e4:	222c      	movs	r2, #44	@ 0x2c
 80017e6:	701a      	strb	r2, [r3, #0]
	strncpy(hb_string+48,"112233445566778899",strlen("112233445566778899"));  //Battery ID
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3330      	adds	r3, #48	@ 0x30
 80017ec:	4a13      	ldr	r2, [pc, #76]	@ (800183c <tiu_heartbeat_string+0xe8>)
 80017ee:	461d      	mov	r5, r3
 80017f0:	4614      	mov	r4, r2
 80017f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f4:	6028      	str	r0, [r5, #0]
 80017f6:	6069      	str	r1, [r5, #4]
 80017f8:	60aa      	str	r2, [r5, #8]
 80017fa:	60eb      	str	r3, [r5, #12]
 80017fc:	8823      	ldrh	r3, [r4, #0]
 80017fe:	822b      	strh	r3, [r5, #16]
	strncpy(hb_string+67,",",1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3343      	adds	r3, #67	@ 0x43
 8001804:	222c      	movs	r2, #44	@ 0x2c
 8001806:	701a      	strb	r2, [r3, #0]
	packetlen=strlen(hb_string);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7fe fd45 	bl	8000298 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	60fb      	str	r3, [r7, #12]
	memcpy(hb_string+packetlen,"$*",2);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	2202      	movs	r2, #2
 800181a:	4909      	ldr	r1, [pc, #36]	@ (8001840 <tiu_heartbeat_string+0xec>)
 800181c:	4618      	mov	r0, r3
 800181e:	f007 ff35 	bl	800968c <memcpy>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bdb0      	pop	{r4, r5, r7, pc}
 800182a:	bf00      	nop
 800182c:	2000085c 	.word	0x2000085c
 8001830:	20000854 	.word	0x20000854
 8001834:	08009fb8 	.word	0x08009fb8
 8001838:	08009fbc 	.word	0x08009fbc
 800183c:	08009fc8 	.word	0x08009fc8
 8001840:	08009fb4 	.word	0x08009fb4

08001844 <tiu_totp_string>:
* Function Name: tiu_totp_string
* Description  : Function creates the TOTP packet
* Arguments    : unsigned char * totp_string, int maxsize
* Return Value : None
***********************************************************************************************************************/
void tiu_totp_string(unsigned char * totp_string, int maxsize){
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	read_tcu_time(device_time,device_date);    //Get current date & time
 800184e:	4936      	ldr	r1, [pc, #216]	@ (8001928 <tiu_totp_string+0xe4>)
 8001850:	4836      	ldr	r0, [pc, #216]	@ (800192c <tiu_totp_string+0xe8>)
 8001852:	f7ff fbab 	bl	8000fac <read_tcu_time>
	memset(totp_string,0x00,maxsize);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f007 feb3 	bl	80095c8 <memset>
	strncpy(totp_string,"$$T",3);  		    // Start of packet
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a32      	ldr	r2, [pc, #200]	@ (8001930 <tiu_totp_string+0xec>)
 8001866:	8811      	ldrh	r1, [r2, #0]
 8001868:	7892      	ldrb	r2, [r2, #2]
 800186a:	8019      	strh	r1, [r3, #0]
 800186c:	709a      	strb	r2, [r3, #2]
	get_devid(totp_string+3);				// device id is 10 chars long
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3303      	adds	r3, #3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f8f8 	bl	8001a68 <get_devid>
	strncpy(totp_string+13,device_date,6); 	//YYMMDD
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	330d      	adds	r3, #13
 800187c:	2206      	movs	r2, #6
 800187e:	492a      	ldr	r1, [pc, #168]	@ (8001928 <tiu_totp_string+0xe4>)
 8001880:	4618      	mov	r0, r3
 8001882:	f007 febb 	bl	80095fc <strncpy>
	strncpy(totp_string+19,device_time,6);	// hhmmss
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3313      	adds	r3, #19
 800188a:	2206      	movs	r2, #6
 800188c:	4927      	ldr	r1, [pc, #156]	@ (800192c <tiu_totp_string+0xe8>)
 800188e:	4618      	mov	r0, r3
 8001890:	f007 feb4 	bl	80095fc <strncpy>
	if(totp_ack_buf[0]==0xAA){              //TOTP Match
 8001894:	4b27      	ldr	r3, [pc, #156]	@ (8001934 <tiu_totp_string+0xf0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2baa      	cmp	r3, #170	@ 0xaa
 800189a:	d113      	bne.n	80018c4 <tiu_totp_string+0x80>
		strncpy(totp_string+25,"1",1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3319      	adds	r3, #25
 80018a0:	2231      	movs	r2, #49	@ 0x31
 80018a2:	701a      	strb	r2, [r3, #0]
		totp_ack_buf[0]=0x00;
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <tiu_totp_string+0xf0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
		//strncpy(totp_string+26,dock_totp,18);  // 18 bytes received DOCK ID &  TOTP (BLE)
		strncpy(totp_string+26,"123456789ABCDE7123",18);  // 18 bytes received DOCK ID &  TOTP (BLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	331a      	adds	r3, #26
 80018ae:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <tiu_totp_string+0xf4>)
 80018b0:	461d      	mov	r5, r3
 80018b2:	4614      	mov	r4, r2
 80018b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b6:	6028      	str	r0, [r5, #0]
 80018b8:	6069      	str	r1, [r5, #4]
 80018ba:	60aa      	str	r2, [r5, #8]
 80018bc:	60eb      	str	r3, [r5, #12]
 80018be:	8823      	ldrh	r3, [r4, #0]
 80018c0:	822b      	strh	r3, [r5, #16]
 80018c2:	e01e      	b.n	8001902 <tiu_totp_string+0xbe>
	}else if(totp_ack_buf[0]==0xFF){       //TOTP Failure
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <tiu_totp_string+0xf0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2bff      	cmp	r3, #255	@ 0xff
 80018ca:	d113      	bne.n	80018f4 <tiu_totp_string+0xb0>
		strncpy(totp_string+25,"0",1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3319      	adds	r3, #25
 80018d0:	2230      	movs	r2, #48	@ 0x30
 80018d2:	701a      	strb	r2, [r3, #0]
		//strncpy(totp_string+26,dock_totp,18);   // 18 bytes received DOCK ID &  TOTP (BLE)
		strncpy(totp_string+26,"123456789ABCDE0103",18);  // 18 bytes received DOCK ID &  TOTP (BLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	331a      	adds	r3, #26
 80018d8:	4a18      	ldr	r2, [pc, #96]	@ (800193c <tiu_totp_string+0xf8>)
 80018da:	461d      	mov	r5, r3
 80018dc:	4614      	mov	r4, r2
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	6028      	str	r0, [r5, #0]
 80018e2:	6069      	str	r1, [r5, #4]
 80018e4:	60aa      	str	r2, [r5, #8]
 80018e6:	60eb      	str	r3, [r5, #12]
 80018e8:	8823      	ldrh	r3, [r4, #0]
 80018ea:	822b      	strh	r3, [r5, #16]
		totp_ack_buf[0]=0x00;
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <tiu_totp_string+0xf0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e006      	b.n	8001902 <tiu_totp_string+0xbe>
	}else{
		strncpy(totp_string+25,"3",1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3319      	adds	r3, #25
 80018f8:	2233      	movs	r2, #51	@ 0x33
 80018fa:	701a      	strb	r2, [r3, #0]
		totp_ack_buf[0]=0x00;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <tiu_totp_string+0xf0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	}
	strncpy(totp_string+44,(char *)(dockID_buffer),14);  //14 Bytes DOCK ID queried via CAN
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	332c      	adds	r3, #44	@ 0x2c
 8001906:	220e      	movs	r2, #14
 8001908:	490d      	ldr	r1, [pc, #52]	@ (8001940 <tiu_totp_string+0xfc>)
 800190a:	4618      	mov	r0, r3
 800190c:	f007 fe76 	bl	80095fc <strncpy>
	strncpy(totp_string+58,"$*",2);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	333a      	adds	r3, #58	@ 0x3a
 8001914:	490b      	ldr	r1, [pc, #44]	@ (8001944 <tiu_totp_string+0x100>)
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	8013      	strh	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bdb0      	pop	{r4, r5, r7, pc}
 8001926:	bf00      	nop
 8001928:	2000085c 	.word	0x2000085c
 800192c:	20000854 	.word	0x20000854
 8001930:	08009fdc 	.word	0x08009fdc
 8001934:	20000d6c 	.word	0x20000d6c
 8001938:	08009fe0 	.word	0x08009fe0
 800193c:	08009ff4 	.word	0x08009ff4
 8001940:	20000830 	.word	0x20000830
 8001944:	08009fb4 	.word	0x08009fb4

08001948 <summary_packet>:
* Function Name: summary_packet
* Description  : Function creates the summary packet
* Arguments    : unsigned char * summary_string, int maxsize
* Return Value : None
***********************************************************************************************************************/
void summary_packet(unsigned char * summary_string, int maxsize){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]

	int packetlen =0;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
	read_tcu_time(device_time,device_date);    //Get current date & time
 8001956:	491b      	ldr	r1, [pc, #108]	@ (80019c4 <summary_packet+0x7c>)
 8001958:	481b      	ldr	r0, [pc, #108]	@ (80019c8 <summary_packet+0x80>)
 800195a:	f7ff fb27 	bl	8000fac <read_tcu_time>
	strncpy(summary_string,"$$S",3);  		// Start of packet
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1a      	ldr	r2, [pc, #104]	@ (80019cc <summary_packet+0x84>)
 8001962:	8811      	ldrh	r1, [r2, #0]
 8001964:	7892      	ldrb	r2, [r2, #2]
 8001966:	8019      	strh	r1, [r3, #0]
 8001968:	709a      	strb	r2, [r3, #2]
	get_devid(summary_string+3);				// device id is 10 chars long
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3303      	adds	r3, #3
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f87a 	bl	8001a68 <get_devid>
	strncpy(summary_string+13,device_date,6); 	//YYMMDD
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	330d      	adds	r3, #13
 8001978:	2206      	movs	r2, #6
 800197a:	4912      	ldr	r1, [pc, #72]	@ (80019c4 <summary_packet+0x7c>)
 800197c:	4618      	mov	r0, r3
 800197e:	f007 fe3d 	bl	80095fc <strncpy>
	strncpy(summary_string+19,device_time,6);	// hhmmss	collar_tmp_date collar_tmp_time
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3313      	adds	r3, #19
 8001986:	2206      	movs	r2, #6
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <summary_packet+0x80>)
 800198a:	4618      	mov	r0, r3
 800198c:	f007 fe36 	bl	80095fc <strncpy>
	packetlen=strlen(summary_string);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7fe fc81 	bl	8000298 <strlen>
 8001996:	4603      	mov	r3, r0
 8001998:	60fb      	str	r3, [r7, #12]
	memcpy(summary_string+25,summaryData_buffer,259);              //can_test_buf
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3319      	adds	r3, #25
 800199e:	f240 1203 	movw	r2, #259	@ 0x103
 80019a2:	490b      	ldr	r1, [pc, #44]	@ (80019d0 <summary_packet+0x88>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fe71 	bl	800968c <memcpy>
	memcpy(summary_string+284,"$*",2);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80019b0:	2202      	movs	r2, #2
 80019b2:	4908      	ldr	r1, [pc, #32]	@ (80019d4 <summary_packet+0x8c>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fe69 	bl	800968c <memcpy>
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000085c 	.word	0x2000085c
 80019c8:	20000854 	.word	0x20000854
 80019cc:	0800a008 	.word	0x0800a008
 80019d0:	200009e4 	.word	0x200009e4
 80019d4:	08009fb4 	.word	0x08009fb4

080019d8 <alert_packet>:
* Function Name: alert_packet
* Description  : Function creates the alert packet
* Arguments    : unsigned char * alert_string, int maxsize
* Return Value : None
***********************************************************************************************************************/
void alert_packet(unsigned char * alert_string, int maxsize){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	int packetlen =0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
	read_tcu_time(device_time,device_date);    //Get current date & time
 80019e6:	491b      	ldr	r1, [pc, #108]	@ (8001a54 <alert_packet+0x7c>)
 80019e8:	481b      	ldr	r0, [pc, #108]	@ (8001a58 <alert_packet+0x80>)
 80019ea:	f7ff fadf 	bl	8000fac <read_tcu_time>
	strncpy(alert_string,(unsigned char*)"$$A",3);  		// Start of packet -> header
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a5c <alert_packet+0x84>)
 80019f2:	8811      	ldrh	r1, [r2, #0]
 80019f4:	7892      	ldrb	r2, [r2, #2]
 80019f6:	8019      	strh	r1, [r3, #0]
 80019f8:	709a      	strb	r2, [r3, #2]
	get_devid(alert_string+3);				// device id is 10 chars long
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3303      	adds	r3, #3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f832 	bl	8001a68 <get_devid>
	strncpy(alert_string+13,device_date,6); 	//YYMMDD
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	330d      	adds	r3, #13
 8001a08:	2206      	movs	r2, #6
 8001a0a:	4912      	ldr	r1, [pc, #72]	@ (8001a54 <alert_packet+0x7c>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f007 fdf5 	bl	80095fc <strncpy>
    strncpy(alert_string+19,device_time,6);	   // HHMMSS
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3313      	adds	r3, #19
 8001a16:	2206      	movs	r2, #6
 8001a18:	490f      	ldr	r1, [pc, #60]	@ (8001a58 <alert_packet+0x80>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 fdee 	bl	80095fc <strncpy>
	packetlen=strlen(alert_string);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fc39 	bl	8000298 <strlen>
 8001a26:	4603      	mov	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]
	memcpy(alert_string+packetlen,alertData_buffer,259);  //copy CAN data
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f240 1203 	movw	r2, #259	@ 0x103
 8001a34:	490a      	ldr	r1, [pc, #40]	@ (8001a60 <alert_packet+0x88>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f007 fe28 	bl	800968c <memcpy>
	memcpy(alert_string+284,"$*",2);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8001a42:	2202      	movs	r2, #2
 8001a44:	4907      	ldr	r1, [pc, #28]	@ (8001a64 <alert_packet+0x8c>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f007 fe20 	bl	800968c <memcpy>
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	2000085c 	.word	0x2000085c
 8001a58:	20000854 	.word	0x20000854
 8001a5c:	0800a00c 	.word	0x0800a00c
 8001a60:	20000864 	.word	0x20000864
 8001a64:	08009fb4 	.word	0x08009fb4

08001a68 <get_devid>:

void get_devid(unsigned char *bnum){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	strncpy(bnum,"1023456789",strlen("1023456789"));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <get_devid+0x28>)
 8001a74:	461a      	mov	r2, r3
 8001a76:	460b      	mov	r3, r1
 8001a78:	cb03      	ldmia	r3!, {r0, r1}
 8001a7a:	6010      	str	r0, [r2, #0]
 8001a7c:	6051      	str	r1, [r2, #4]
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	8113      	strh	r3, [r2, #8]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0800a010 	.word	0x0800a010

08001a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b51      	ldr	r3, [pc, #324]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aba:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac8:	4b49      	ldr	r3, [pc, #292]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ace:	4a48      	ldr	r2, [pc, #288]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ad8:	4b45      	ldr	r3, [pc, #276]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b42      	ldr	r3, [pc, #264]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aec:	4a40      	ldr	r2, [pc, #256]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001af6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b04:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b0a:	4a39      	ldr	r2, [pc, #228]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <MX_GPIO_Init+0x15c>)
 8001b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b28:	4832      	ldr	r0, [pc, #200]	@ (8001bf4 <MX_GPIO_Init+0x160>)
 8001b2a:	f002 f919 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 61ec 	mov.w	r1, #1888	@ 0x760
 8001b34:	4830      	ldr	r0, [pc, #192]	@ (8001bf8 <MX_GPIO_Init+0x164>)
 8001b36:	f002 f913 	bl	8003d60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	21ff      	movs	r1, #255	@ 0xff
 8001b3e:	482f      	ldr	r0, [pc, #188]	@ (8001bfc <MX_GPIO_Init+0x168>)
 8001b40:	f002 f90e 	bl	8003d60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4825      	ldr	r0, [pc, #148]	@ (8001bf4 <MX_GPIO_Init+0x160>)
 8001b5e:	f001 ffad 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8001b62:	f44f 63ec 	mov.w	r3, #1888	@ 0x760
 8001b66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481f      	ldr	r0, [pc, #124]	@ (8001bf8 <MX_GPIO_Init+0x164>)
 8001b7c:	f001 ff9e 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_GPIO_Init+0x16c>)
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4819      	ldr	r0, [pc, #100]	@ (8001bf8 <MX_GPIO_Init+0x164>)
 8001b94:	f001 ff92 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b98:	23ff      	movs	r3, #255	@ 0xff
 8001b9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <MX_GPIO_Init+0x168>)
 8001bb0:	f001 ff84 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <MX_GPIO_Init+0x164>)
 8001bca:	f001 ff77 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	@ (8001bfc <MX_GPIO_Init+0x168>)
 8001be4:	f001 ff6a 	bl	8003abc <HAL_GPIO_Init>

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	44020c00 	.word	0x44020c00
 8001bf4:	42020800 	.word	0x42020800
 8001bf8:	42020000 	.word	0x42020000
 8001bfc:	42020400 	.word	0x42020400
 8001c00:	10110000 	.word	0x10110000

08001c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c08:	f000 fe50 	bl	80028ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0c:	f000 f858 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c10:	f7ff ff40 	bl	8001a94 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8001c14:	f7ff f9e8 	bl	8000fe8 <MX_FDCAN1_Init>
  MX_SPI2_Init();
 8001c18:	f000 f8ba 	bl	8001d90 <MX_SPI2_Init>
  MX_TIM6_Init();
 8001c1c:	f000 fac2 	bl	80021a4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001c20:	f000 faf8 	bl	8002214 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001c24:	f000 fbb8 	bl	8002398 <MX_USART1_UART_Init>
 // MX_USART2_UART_Init();
  MX_USART3_UART_Init();
 8001c28:	f000 fc02 	bl	8002430 <MX_USART3_UART_Init>
  MX_WWDG_Init();
 8001c2c:	f000 fdcc 	bl	80027c8 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
    HAL_FDCAN_Start(&hfdcan1);
 8001c30:	4818      	ldr	r0, [pc, #96]	@ (8001c94 <main+0x90>)
 8001c32:	f001 fa89 	bl	8003148 <HAL_FDCAN_Start>
    HAL_TIM_Base_Start_IT(&htim6);  //1sec timer
 8001c36:	4818      	ldr	r0, [pc, #96]	@ (8001c98 <main+0x94>)
 8001c38:	f005 fd28 	bl	800768c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);  //50 ms timer
 8001c3c:	4817      	ldr	r0, [pc, #92]	@ (8001c9c <main+0x98>)
 8001c3e:	f005 fd25 	bl	800768c <HAL_TIM_Base_Start_IT>
 //   HAL_UART_Transmit(&huart1,"CAN TEST\r\n",strlen("CAN TEST\r\n"),10);
    set_tcu_time(cTime,Date,2);
 8001c42:	2202      	movs	r2, #2
 8001c44:	4916      	ldr	r1, [pc, #88]	@ (8001ca0 <main+0x9c>)
 8001c46:	4817      	ldr	r0, [pc, #92]	@ (8001ca4 <main+0xa0>)
 8001c48:	f7ff f83e 	bl	8000cc8 <set_tcu_time>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_tcu_time(current_time,current_date);
 8001c4c:	4916      	ldr	r1, [pc, #88]	@ (8001ca8 <main+0xa4>)
 8001c4e:	4817      	ldr	r0, [pc, #92]	@ (8001cac <main+0xa8>)
 8001c50:	f7ff f9ac 	bl	8000fac <read_tcu_time>

	 scan_state_manager(); //  checks the key state and sets the scan state
 8001c54:	f7fe fcb4 	bl	80005c0 <scan_state_manager>

	  if (scan_state == SCAN_ON){
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <main+0xac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <main+0x62>
	  scan_on_routine();// this func checks the scan state and initiates the scan on
 8001c60:	f7fe fcd6 	bl	8000610 <scan_on_routine>
 8001c64:	e001      	b.n	8001c6a <main+0x66>

	  }else{
	  scan_off_routine();//this func checks the scan state and initiates the scan off or broadcaste
 8001c66:	f7fe fd37 	bl	80006d8 <scan_off_routine>
	  }

	  process_ti_receive();//fun to receive and check the TI data
 8001c6a:	f7fe fdfd 	bl	8000868 <process_ti_receive>


	  if (scan_timer >= 120){ //checks the scan time if exceeds the limit it stops the scan
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <main+0xb0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b77      	cmp	r3, #119	@ 0x77
 8001c74:	dd04      	ble.n	8001c80 <main+0x7c>
	  initiate_scan_off();
 8001c76:	f7fe fdcd 	bl	8000814 <initiate_scan_off>
	   // send_totp_to_bmcu();
	  scan_timer = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <main+0xb0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
	  }

	  	  store_data();
 8001c80:	f7ff fc5c 	bl	800153c <store_data>
	  	  HAL_UART_Transmit_IT(&huart1,can_read_buffer,301);
 8001c84:	f240 122d 	movw	r2, #301	@ 0x12d
 8001c88:	490b      	ldr	r1, [pc, #44]	@ (8001cb8 <main+0xb4>)
 8001c8a:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <main+0xb8>)
 8001c8c:	f006 f956 	bl	8007f3c <HAL_UART_Transmit_IT>
	  read_tcu_time(current_time,current_date);
 8001c90:	e7dc      	b.n	8001c4c <main+0x48>
 8001c92:	bf00      	nop
 8001c94:	20000d70 	.word	0x20000d70
 8001c98:	20000ea0 	.word	0x20000ea0
 8001c9c:	20000eec 	.word	0x20000eec
 8001ca0:	2000007c 	.word	0x2000007c
 8001ca4:	20000074 	.word	0x20000074
 8001ca8:	20000ddc 	.word	0x20000ddc
 8001cac:	20000dd4 	.word	0x20000dd4
 8001cb0:	20000100 	.word	0x20000100
 8001cb4:	20000154 	.word	0x20000154
 8001cb8:	20000630 	.word	0x20000630
 8001cbc:	20000f38 	.word	0x20000f38

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b09c      	sub	sp, #112	@ 0x70
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0320 	add.w	r3, r7, #32
 8001cca:	2250      	movs	r2, #80	@ 0x50
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f007 fc7a 	bl	80095c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
 8001ce4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ce6:	4b25      	ldr	r3, [pc, #148]	@ (8001d7c <SystemClock_Config+0xbc>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	4a24      	ldr	r2, [pc, #144]	@ (8001d7c <SystemClock_Config+0xbc>)
 8001cec:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001cf0:	6113      	str	r3, [r2, #16]
 8001cf2:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <SystemClock_Config+0xbc>)
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cfe:	bf00      	nop
 8001d00:	4b1e      	ldr	r3, [pc, #120]	@ (8001d7c <SystemClock_Config+0xbc>)
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d1f9      	bne.n	8001d00 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d16:	2301      	movs	r3, #1
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d1e:	2340      	movs	r3, #64	@ 0x40
 8001d20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 f830 	bl	8003d90 <HAL_RCC_OscConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001d36:	f000 f825 	bl	8001d84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 fc51 	bl	8004600 <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001d64:	f000 f80e 	bl	8001d84 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SystemClock_Config+0xc0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <SystemClock_Config+0xc0>)
 8001d6e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	3770      	adds	r7, #112	@ 0x70
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	44020800 	.word	0x44020800
 8001d80:	40022000 	.word	0x40022000

08001d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <Error_Handler+0x8>

08001d90 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d94:	4b27      	ldr	r3, [pc, #156]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001d96:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <MX_SPI2_Init+0xa8>)
 8001d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001d9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001da0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001da8:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001daa:	2207      	movs	r2, #7
 8001dac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dae:	4b21      	ldr	r3, [pc, #132]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dbc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dde:	2207      	movs	r2, #7
 8001de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001de2:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_SPI2_Init+0xa4>)
 8001e20:	f005 f802 	bl	8006e28 <HAL_SPI_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001e2a:	f7ff ffab 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000de4 	.word	0x20000de4
 8001e38:	40003800 	.word	0x40003800

08001e3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0ac      	sub	sp, #176	@ 0xb0
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2288      	movs	r2, #136	@ 0x88
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 fbb3 	bl	80095c8 <memset>
  if(spiHandle->Instance==SPI2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a35      	ldr	r2, [pc, #212]	@ (8001f3c <HAL_SPI_MspInit+0x100>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d163      	bne.n	8001f34 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSI;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 20;
 8001e80:	2314      	movs	r3, #20
 8001e82:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 40;
 8001e84:	2328      	movs	r3, #40	@ 0x28
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 40;
 8001e88:	2328      	movs	r3, #40	@ 0x28
 8001e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_3;
 8001e90:	230c      	movs	r3, #12
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVP;
 8001e9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL2P;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fee9 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001eb8:	f7ff ff64 	bl	8001d84 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ebc:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001ece:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ee0:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_SPI_MspInit+0x104>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ef8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f12:	2305      	movs	r3, #5
 8001f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4809      	ldr	r0, [pc, #36]	@ (8001f44 <HAL_SPI_MspInit+0x108>)
 8001f20:	f001 fdcc 	bl	8003abc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2038      	movs	r0, #56	@ 0x38
 8001f2a:	f000 fe35 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001f2e:	2038      	movs	r0, #56	@ 0x38
 8001f30:	f000 fe4c 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f34:	bf00      	nop
 8001f36:	37b0      	adds	r7, #176	@ 0xb0
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40003800 	.word	0x40003800
 8001f40:	44020c00 	.word	0x44020c00
 8001f44:	42020400 	.word	0x42020400

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	bf00      	nop
 8001f64:	e7fd      	b.n	8001f62 <HardFault_Handler+0x4>

08001f66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6a:	bf00      	nop
 8001f6c:	e7fd      	b.n	8001f6a <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <BusFault_Handler+0x4>

08001f76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 fd1c 	bl	80029e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window WatchDog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <WWDG_IRQHandler+0x10>)
 8001fba:	f007 fa33 	bl	8009424 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200010f4 	.word	0x200010f4

08001fc8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001fce:	f001 fb15 	bl	80035fc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000d70 	.word	0x20000d70

08001fdc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <TIM6_IRQHandler+0x10>)
 8001fe2:	f005 fba7 	bl	8007734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000ea0 	.word	0x20000ea0

08001ff0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <TIM7_IRQHandler+0x10>)
 8001ff6:	f005 fb9d 	bl	8007734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000eec 	.word	0x20000eec

08002004 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <SPI2_IRQHandler+0x10>)
 800200a:	f005 f80d 	bl	8007028 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000de4 	.word	0x20000de4

08002018 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <USART1_IRQHandler+0x10>)
 800201e:	f006 f831 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000f38 	.word	0x20000f38

0800202c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <USART2_IRQHandler+0x10>)
 8002032:	f006 f827 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000fcc 	.word	0x20000fcc

08002040 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <USART3_IRQHandler+0x10>)
 8002046:	f006 f81d 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20001060 	.word	0x20001060

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	@ (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	@ (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f007 face 	bl	8009624 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20008000 	.word	0x20008000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	20000e74 	.word	0x20000e74
 80020bc:	20001258 	.word	0x20001258

080020c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020c6:	4b30      	ldr	r3, [pc, #192]	@ (8002188 <SystemInit+0xc8>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002188 <SystemInit+0xc8>)
 80020ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80020d6:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <SystemInit+0xcc>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80020dc:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <SystemInit+0xcc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80020e2:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <SystemInit+0xcc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <SystemInit+0xcc>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4927      	ldr	r1, [pc, #156]	@ (800218c <SystemInit+0xcc>)
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <SystemInit+0xd0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <SystemInit+0xcc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <SystemInit+0xcc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <SystemInit+0xcc>)
 8002102:	4a24      	ldr	r2, [pc, #144]	@ (8002194 <SystemInit+0xd4>)
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002106:	4b21      	ldr	r3, [pc, #132]	@ (800218c <SystemInit+0xcc>)
 8002108:	2200      	movs	r2, #0
 800210a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <SystemInit+0xcc>)
 800210e:	4a21      	ldr	r2, [pc, #132]	@ (8002194 <SystemInit+0xd4>)
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <SystemInit+0xcc>)
 8002114:	2200      	movs	r2, #0
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <SystemInit+0xcc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <SystemInit+0xcc>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002122:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002124:	4b19      	ldr	r3, [pc, #100]	@ (800218c <SystemInit+0xcc>)
 8002126:	2200      	movs	r2, #0
 8002128:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <SystemInit+0xc8>)
 800212c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002130:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002132:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <SystemInit+0xd8>)
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800213a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002142:	d003      	beq.n	800214c <SystemInit+0x8c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800214a:	d117      	bne.n	800217c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <SystemInit+0xd8>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <SystemInit+0xd8>)
 800215a:	4a10      	ldr	r2, [pc, #64]	@ (800219c <SystemInit+0xdc>)
 800215c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <SystemInit+0xd8>)
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <SystemInit+0xe0>)
 8002162:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <SystemInit+0xd8>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <SystemInit+0xd8>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <SystemInit+0xd8>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	4a08      	ldr	r2, [pc, #32]	@ (8002198 <SystemInit+0xd8>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	61d3      	str	r3, [r2, #28]
  }
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00
 800218c:	44020c00 	.word	0x44020c00
 8002190:	fae2eae3 	.word	0xfae2eae3
 8002194:	01010280 	.word	0x01010280
 8002198:	40022000 	.word	0x40022000
 800219c:	08192a3b 	.word	0x08192a3b
 80021a0:	4c5d6e7f 	.word	0x4c5d6e7f

080021a4 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80021b4:	4b15      	ldr	r3, [pc, #84]	@ (800220c <MX_TIM6_Init+0x68>)
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <MX_TIM6_Init+0x6c>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 80021ba:	4b14      	ldr	r3, [pc, #80]	@ (800220c <MX_TIM6_Init+0x68>)
 80021bc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80021c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	4b12      	ldr	r3, [pc, #72]	@ (800220c <MX_TIM6_Init+0x68>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80021c8:	4b10      	ldr	r3, [pc, #64]	@ (800220c <MX_TIM6_Init+0x68>)
 80021ca:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80021ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <MX_TIM6_Init+0x68>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <MX_TIM6_Init+0x68>)
 80021d8:	f005 fa01 	bl	80075de <HAL_TIM_Base_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021e2:	f7ff fdcf 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	@ (800220c <MX_TIM6_Init+0x68>)
 80021f4:	f005 fc7c 	bl	8007af0 <HAL_TIMEx_MasterConfigSynchronization>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021fe:	f7ff fdc1 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000ea0 	.word	0x20000ea0
 8002210:	40001000 	.word	0x40001000

08002214 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002224:	4b15      	ldr	r3, [pc, #84]	@ (800227c <MX_TIM7_Init+0x68>)
 8002226:	4a16      	ldr	r2, [pc, #88]	@ (8002280 <MX_TIM7_Init+0x6c>)
 8002228:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <MX_TIM7_Init+0x68>)
 800222c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002230:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <MX_TIM7_Init+0x68>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200;
 8002238:	4b10      	ldr	r3, [pc, #64]	@ (800227c <MX_TIM7_Init+0x68>)
 800223a:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800223e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <MX_TIM7_Init+0x68>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002246:	480d      	ldr	r0, [pc, #52]	@ (800227c <MX_TIM7_Init+0x68>)
 8002248:	f005 f9c9 	bl	80075de <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002252:	f7ff fd97 	bl	8001d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	@ (800227c <MX_TIM7_Init+0x68>)
 8002264:	f005 fc44 	bl	8007af0 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800226e:	f7ff fd89 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000eec 	.word	0x20000eec
 8002280:	40001400 	.word	0x40001400

08002284 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1d      	ldr	r2, [pc, #116]	@ (8002308 <HAL_TIM_Base_MspInit+0x84>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d117      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002296:	4b1d      	ldr	r3, [pc, #116]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 8002298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800229c:	4a1b      	ldr	r2, [pc, #108]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022a6:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 80022a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2031      	movs	r0, #49	@ 0x31
 80022ba:	f000 fc6d 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80022be:	2031      	movs	r0, #49	@ 0x31
 80022c0:	f000 fc84 	bl	8002bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80022c4:	e01b      	b.n	80022fe <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM7)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_TIM_Base_MspInit+0x8c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d116      	bne.n	80022fe <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 80022d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022d6:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022e0:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_TIM_Base_MspInit+0x88>)
 80022e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2032      	movs	r0, #50	@ 0x32
 80022f4:	f000 fc50 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022f8:	2032      	movs	r0, #50	@ 0x32
 80022fa:	f000 fc67 	bl	8002bcc <HAL_NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40001000 	.word	0x40001000
 800230c:	44020c00 	.word	0x44020c00
 8002310:	40001400 	.word	0x40001400

08002314 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(htim);
if(htim->Instance == TIM6)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a15      	ldr	r2, [pc, #84]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d11a      	bne.n	800235c <HAL_TIM_PeriodElapsedCallback+0x48>
	if(hour == 23){
		hour = 0;*/


	//}
	time_of_day++;
 8002326:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a13      	ldr	r2, [pc, #76]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800232e:	6013      	str	r3, [r2, #0]
	if(time_of_day >= 86400)
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	dd10      	ble.n	800235c <HAL_TIM_PeriodElapsedCallback+0x48>
		{
		// nTdate updated accordingly inside the function
		strncpy(input_date,nTdate,6);
 800233a:	2206      	movs	r2, #6
 800233c:	4911      	ldr	r1, [pc, #68]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800233e:	4812      	ldr	r0, [pc, #72]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002340:	f007 f95c 	bl	80095fc <strncpy>
		//sending current from nTdate and updating nextdate into nTdate itself
		calculate_nextdate(input_date,nTdate);
 8002344:	490f      	ldr	r1, [pc, #60]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002346:	4810      	ldr	r0, [pc, #64]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002348:	f7fe fb68 	bl	8000a1c <calculate_nextdate>
		//reset nTtime and tod
	    memset(nTtime,'0',sizeof(nTtime)); //resetting time to 00:00:00
 800234c:	2208      	movs	r2, #8
 800234e:	2130      	movs	r1, #48	@ 0x30
 8002350:	480e      	ldr	r0, [pc, #56]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002352:	f007 f939 	bl	80095c8 <memset>
		time_of_day=0;
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
	}
}



if(htim->Instance == TIM7)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0b      	ldr	r2, [pc, #44]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d104      	bne.n	8002370 <HAL_TIM_PeriodElapsedCallback+0x5c>
{
	time_50ms++;
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	4a09      	ldr	r2, [pc, #36]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800236e:	6013      	str	r3, [r2, #0]
}


}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40001000 	.word	0x40001000
 800237c:	20000e78 	.word	0x20000e78
 8002380:	0001517f 	.word	0x0001517f
 8002384:	2000006c 	.word	0x2000006c
 8002388:	20000e7c 	.word	0x20000e7c
 800238c:	2000018c 	.word	0x2000018c
 8002390:	40001400 	.word	0x40001400
 8002394:	20000e9c 	.word	0x20000e9c

08002398 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800239c:	4b22      	ldr	r3, [pc, #136]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 800239e:	4a23      	ldr	r2, [pc, #140]	@ (800242c <MX_USART1_UART_Init+0x94>)
 80023a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023a2:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023be:	220c      	movs	r2, #12
 80023c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c2:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023c8:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023d4:	4b14      	ldr	r3, [pc, #80]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023da:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e0:	4811      	ldr	r0, [pc, #68]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023e2:	f005 fc33 	bl	8007c4c <HAL_UART_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023ec:	f7ff fcca 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f0:	2100      	movs	r1, #0
 80023f2:	480d      	ldr	r0, [pc, #52]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 80023f4:	f006 ff27 	bl	8009246 <HAL_UARTEx_SetTxFifoThreshold>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023fe:	f7ff fcc1 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002402:	2100      	movs	r1, #0
 8002404:	4808      	ldr	r0, [pc, #32]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 8002406:	f006 ff5c 	bl	80092c2 <HAL_UARTEx_SetRxFifoThreshold>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002410:	f7ff fcb8 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	@ (8002428 <MX_USART1_UART_Init+0x90>)
 8002416:	f006 fedd 	bl	80091d4 <HAL_UARTEx_DisableFifoMode>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002420:	f7ff fcb0 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000f38 	.word	0x20000f38
 800242c:	40013800 	.word	0x40013800

08002430 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002434:	4b22      	ldr	r3, [pc, #136]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002436:	4a23      	ldr	r2, [pc, #140]	@ (80024c4 <MX_USART3_UART_Init+0x94>)
 8002438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800243a:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800243c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002448:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002456:	220c      	movs	r2, #12
 8002458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245a:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002462:	2200      	movs	r2, #0
 8002464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800246c:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800246e:	2200      	movs	r2, #0
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 8002474:	2200      	movs	r2, #0
 8002476:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002478:	4811      	ldr	r0, [pc, #68]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800247a:	f005 fbe7 	bl	8007c4c <HAL_UART_Init>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002484:	f7ff fc7e 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002488:	2100      	movs	r1, #0
 800248a:	480d      	ldr	r0, [pc, #52]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800248c:	f006 fedb 	bl	8009246 <HAL_UARTEx_SetTxFifoThreshold>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002496:	f7ff fc75 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800249a:	2100      	movs	r1, #0
 800249c:	4808      	ldr	r0, [pc, #32]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 800249e:	f006 ff10 	bl	80092c2 <HAL_UARTEx_SetRxFifoThreshold>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80024a8:	f7ff fc6c 	bl	8001d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	@ (80024c0 <MX_USART3_UART_Init+0x90>)
 80024ae:	f006 fe91 	bl	80091d4 <HAL_UARTEx_DisableFifoMode>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024b8:	f7ff fc64 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20001060 	.word	0x20001060
 80024c4:	40004800 	.word	0x40004800

080024c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0b0      	sub	sp, #192	@ 0xc0
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	2288      	movs	r2, #136	@ 0x88
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f007 f86d 	bl	80095c8 <memset>
  if(uartHandle->Instance==USART1)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a88      	ldr	r2, [pc, #544]	@ (8002714 <HAL_UART_MspInit+0x24c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d163      	bne.n	80025c0 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024f8:	f04f 0201 	mov.w	r2, #1
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002504:	2300      	movs	r3, #0
 8002506:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002508:	f107 0320 	add.w	r3, r7, #32
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fbb9 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002518:	f7ff fc34 	bl	8001d84 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800251c:	4b7e      	ldr	r3, [pc, #504]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800251e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002522:	4a7d      	ldr	r2, [pc, #500]	@ (8002718 <HAL_UART_MspInit+0x250>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800252c:	4b7a      	ldr	r3, [pc, #488]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800252e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	4b77      	ldr	r3, [pc, #476]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800253c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002540:	4a75      	ldr	r2, [pc, #468]	@ (8002718 <HAL_UART_MspInit+0x250>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800254a:	4b73      	ldr	r3, [pc, #460]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> USART1_CTS
    PA1     ------> USART1_RX
    PA2     ------> USART1_TX
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002558:	2307      	movs	r3, #7
 800255a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART1;
 8002570:	2308      	movs	r3, #8
 8002572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800257a:	4619      	mov	r1, r3
 800257c:	4867      	ldr	r0, [pc, #412]	@ (800271c <HAL_UART_MspInit+0x254>)
 800257e:	f001 fa9d 	bl	8003abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800259c:	2307      	movs	r3, #7
 800259e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80025a6:	4619      	mov	r1, r3
 80025a8:	485c      	ldr	r0, [pc, #368]	@ (800271c <HAL_UART_MspInit+0x254>)
 80025aa:	f001 fa87 	bl	8003abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	203a      	movs	r0, #58	@ 0x3a
 80025b4:	f000 faf0 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b8:	203a      	movs	r0, #58	@ 0x3a
 80025ba:	f000 fb07 	bl	8002bcc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80025be:	e0a5      	b.n	800270c <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a56      	ldr	r2, [pc, #344]	@ (8002720 <HAL_UART_MspInit+0x258>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d14e      	bne.n	8002668 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025ca:	f04f 0202 	mov.w	r2, #2
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fb50 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_UART_MspInit+0x126>
      Error_Handler();
 80025ea:	f7ff fbcb 	bl	8001d84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80025f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025f4:	4a48      	ldr	r2, [pc, #288]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80025f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025fe:	4b46      	ldr	r3, [pc, #280]	@ (8002718 <HAL_UART_MspInit+0x250>)
 8002600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260c:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002612:	4a41      	ldr	r2, [pc, #260]	@ (8002718 <HAL_UART_MspInit+0x250>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800261c:	4b3e      	ldr	r3, [pc, #248]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800261e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800262a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800262e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 8002644:	2309      	movs	r3, #9
 8002646:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800264e:	4619      	mov	r1, r3
 8002650:	4832      	ldr	r0, [pc, #200]	@ (800271c <HAL_UART_MspInit+0x254>)
 8002652:	f001 fa33 	bl	8003abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	203b      	movs	r0, #59	@ 0x3b
 800265c:	f000 fa9c 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002660:	203b      	movs	r0, #59	@ 0x3b
 8002662:	f000 fab3 	bl	8002bcc <HAL_NVIC_EnableIRQ>
}
 8002666:	e051      	b.n	800270c <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2d      	ldr	r2, [pc, #180]	@ (8002724 <HAL_UART_MspInit+0x25c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d14c      	bne.n	800270c <HAL_UART_MspInit+0x244>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002672:	f04f 0204 	mov.w	r2, #4
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800267e:	2300      	movs	r3, #0
 8002680:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fafc 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8002692:	f7ff fb77 	bl	8001d84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_UART_MspInit+0x250>)
 8002698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800269c:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <HAL_UART_MspInit+0x250>)
 800269e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80026a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80026a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80026b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ba:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026c4:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <HAL_UART_MspInit+0x250>)
 80026c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80026d2:	2318      	movs	r3, #24
 80026d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 80026ea:	230d      	movs	r3, #13
 80026ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026f4:	4619      	mov	r1, r3
 80026f6:	4809      	ldr	r0, [pc, #36]	@ (800271c <HAL_UART_MspInit+0x254>)
 80026f8:	f001 f9e0 	bl	8003abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	203c      	movs	r0, #60	@ 0x3c
 8002702:	f000 fa49 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002706:	203c      	movs	r0, #60	@ 0x3c
 8002708:	f000 fa60 	bl	8002bcc <HAL_NVIC_EnableIRQ>
}
 800270c:	bf00      	nop
 800270e:	37c0      	adds	r7, #192	@ 0xc0
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40013800 	.word	0x40013800
 8002718:	44020c00 	.word	0x44020c00
 800271c:	42020000 	.word	0x42020000
 8002720:	40004400 	.word	0x40004400
 8002724:	40004800 	.word	0x40004800

08002728 <get_field>:
		 Field numbers start from 1 .. N, ensure record is a null terminated string, TBD - there seems to be a bug if N =1  -- need to check
* Arguments    : char*, char*, char*
* Return Value : char
***********************************************************************************************************************/
char get_field(char N,char * record,char * fielddata)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	73fb      	strb	r3, [r7, #15]
	unsigned int index,i; //len
	char in_c;
	// return the string between the N-1th and Nth comma
	//print_debug(record,(int)strlen(record));
	//give_delay_in_ms(200);
	index = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
	//len = (int)(int)strlen(record);
	for (i=0; i<N-1; i++)
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	e011      	b.n	8002764 <get_field+0x3c>
		while ((in_c = record[index++]) != ',')
			if (in_c == '\0') return ((char)-1) ; // skip N-1 commas
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <get_field+0x22>
 8002746:	23ff      	movs	r3, #255	@ 0xff
 8002748:	e037      	b.n	80027ba <get_field+0x92>
		while ((in_c = record[index++]) != ',')
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	4413      	add	r3, r2
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	75fb      	strb	r3, [r7, #23]
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b2c      	cmp	r3, #44	@ 0x2c
 800275c:	d1f0      	bne.n	8002740 <get_field+0x18>
	for (i=0; i<N-1; i++)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	3301      	adds	r3, #1
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	3b01      	subs	r3, #1
 8002768:	461a      	mov	r2, r3
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	4293      	cmp	r3, r2
 800276e:	d3ec      	bcc.n	800274a <get_field+0x22>
	 // the data from here to till the next ',' has to be returned
	 i=0;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
	 while ( (in_c = record[index++]) != ',') {
 8002774:	e011      	b.n	800279a <get_field+0x72>
		 if((in_c=='\r')||in_c=='\n')
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b0d      	cmp	r3, #13
 800277a:	d018      	beq.n	80027ae <get_field+0x86>
 800277c:	7dfb      	ldrb	r3, [r7, #23]
 800277e:	2b0a      	cmp	r3, #10
 8002780:	d015      	beq.n	80027ae <get_field+0x86>
			break;
		 fielddata[i++] = in_c;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	61ba      	str	r2, [r7, #24]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	7dfa      	ldrb	r2, [r7, #23]
 800278e:	701a      	strb	r2, [r3, #0]
		 if (in_c == '\0') return ((char)-1); // we reached end of string before hitting the next comma
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <get_field+0x72>
 8002796:	23ff      	movs	r3, #255	@ 0xff
 8002798:	e00f      	b.n	80027ba <get_field+0x92>
	 while ( (in_c = record[index++]) != ',') {
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	61fa      	str	r2, [r7, #28]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	75fb      	strb	r3, [r7, #23]
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80027ac:	d1e3      	bne.n	8002776 <get_field+0x4e>
	 }
	 fielddata[i] = '\0';
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
	 return(0);
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002804 <MX_WWDG_Init+0x3c>)
 80027d0:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80027d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027da:	2240      	movs	r2, #64	@ 0x40
 80027dc:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027e0:	2240      	movs	r2, #64	@ 0x40
 80027e2:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	@ (8002800 <MX_WWDG_Init+0x38>)
 80027ec:	f006 fdf6 	bl	80093dc <HAL_WWDG_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 80027f6:	f7ff fac5 	bl	8001d84 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200010f4 	.word	0x200010f4
 8002804:	40002c00 	.word	0x40002c00

08002808 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	@ (8002850 <HAL_WWDG_MspInit+0x48>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d116      	bne.n	8002848 <HAL_WWDG_MspInit+0x40>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_WWDG_MspInit+0x4c>)
 800281c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002820:	4a0c      	ldr	r2, [pc, #48]	@ (8002854 <HAL_WWDG_MspInit+0x4c>)
 8002822:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002826:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800282a:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <HAL_WWDG_MspInit+0x4c>)
 800282c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]

    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	2000      	movs	r0, #0
 800283e:	f000 f9ab 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f9c2 	bl	8002bcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40002c00 	.word	0x40002c00
 8002854:	44020c00 	.word	0x44020c00

08002858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002890 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800285c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800285e:	e003      	b.n	8002868 <LoopCopyDataInit>

08002860 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002860:	4b0c      	ldr	r3, [pc, #48]	@ (8002894 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002862:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002864:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002866:	3104      	adds	r1, #4

08002868 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002868:	480b      	ldr	r0, [pc, #44]	@ (8002898 <LoopForever+0xa>)
	ldr	r3, =_edata
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <LoopForever+0xe>)
	adds	r2, r0, r1
 800286c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800286e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002870:	d3f6      	bcc.n	8002860 <CopyDataInit>
	ldr	r2, =_sbss
 8002872:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002874:	e002      	b.n	800287c <LoopFillZerobss>

08002876 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002876:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002878:	f842 3b04 	str.w	r3, [r2], #4

0800287c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <LoopForever+0x16>)
	cmp	r2, r3
 800287e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002880:	d3f9      	bcc.n	8002876 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002882:	f7ff fc1d 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002886:	f006 fed3 	bl	8009630 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800288a:	f7ff f9bb 	bl	8001c04 <main>

0800288e <LoopForever>:

LoopForever:
    b LoopForever
 800288e:	e7fe      	b.n	800288e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002890:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002894:	0800a1b0 	.word	0x0800a1b0
	ldr	r0, =_sdata
 8002898:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800289c:	200000e0 	.word	0x200000e0
	ldr	r2, =_sbss
 80028a0:	200000e0 	.word	0x200000e0
	ldr	r3, = _ebss
 80028a4:	20001254 	.word	0x20001254

080028a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC1_IRQHandler>
	...

080028ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 f966 	bl	8002b82 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80028b6:	f002 f85b 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_Init+0x44>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	490b      	ldr	r1, [pc, #44]	@ (80028f4 <HAL_Init+0x48>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
 80028cc:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <HAL_Init+0x4c>)
 80028ce:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80028d0:	2004      	movs	r0, #4
 80028d2:	f000 f9ab 	bl	8002c2c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d6:	200f      	movs	r0, #15
 80028d8:	f000 f810 	bl	80028fc <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e002      	b.n	80028ec <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028e6:	f7ff fb2f 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	44020c00 	.word	0x44020c00
 80028f4:	0800a01c 	.word	0x0800a01c
 80028f8:	20000084 	.word	0x20000084

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002908:	4b33      	ldr	r3, [pc, #204]	@ (80029d8 <HAL_InitTick+0xdc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e05c      	b.n	80029ce <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <HAL_InitTick+0xe0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b04      	cmp	r3, #4
 800291e:	d10c      	bne.n	800293a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002920:	4b2f      	ldr	r3, [pc, #188]	@ (80029e0 <HAL_InitTick+0xe4>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b2c      	ldr	r3, [pc, #176]	@ (80029d8 <HAL_InitTick+0xdc>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e037      	b.n	80029aa <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800293a:	f000 f9cf 	bl	8002cdc <HAL_SYSTICK_GetCLKSourceConfig>
 800293e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d023      	beq.n	800298e <HAL_InitTick+0x92>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d82d      	bhi.n	80029a8 <HAL_InitTick+0xac>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_InitTick+0x5e>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d00d      	beq.n	8002974 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002958:	e026      	b.n	80029a8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800295a:	4b21      	ldr	r3, [pc, #132]	@ (80029e0 <HAL_InitTick+0xe4>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b1e      	ldr	r3, [pc, #120]	@ (80029d8 <HAL_InitTick+0xdc>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002968:	fbb3 f3f1 	udiv	r3, r3, r1
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	60fb      	str	r3, [r7, #12]
        break;
 8002972:	e01a      	b.n	80029aa <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_InitTick+0xdc>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002982:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	60fb      	str	r3, [r7, #12]
        break;
 800298c:	e00d      	b.n	80029aa <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_InitTick+0xdc>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002998:	fbb3 f3f2 	udiv	r3, r3, r2
 800299c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	60fb      	str	r3, [r7, #12]
        break;
 80029a6:	e000      	b.n	80029aa <HAL_InitTick+0xae>
        break;
 80029a8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f91c 	bl	8002be8 <HAL_SYSTICK_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e009      	b.n	80029ce <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ba:	2200      	movs	r2, #0
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	f000 f8e9 	bl	8002b98 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80029c6:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <HAL_InitTick+0xe8>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000008c 	.word	0x2000008c
 80029dc:	e000e010 	.word	0xe000e010
 80029e0:	20000084 	.word	0x20000084
 80029e4:	20000088 	.word	0x20000088

080029e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029ec:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_IncTick+0x20>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_IncTick+0x24>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4413      	add	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <HAL_IncTick+0x24>)
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	2000008c 	.word	0x2000008c
 8002a0c:	20001108 	.word	0x20001108

08002a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return uwTick;
 8002a14:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_GetTick+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20001108 	.word	0x20001108

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	@ (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	@ (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	@ 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff4c 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba6:	f7ff ff63 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002baa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6978      	ldr	r0, [r7, #20]
 8002bb2:	f7ff ffb3 	bl	8002b1c <NVIC_EncodePriority>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff82 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002bc4:	bf00      	nop
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff56 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00d      	b.n	8002c1a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_SYSTICK_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002c06:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_SYSTICK_Config+0x40>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_SYSTICK_Config+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a05      	ldr	r2, [pc, #20]	@ (8002c28 <HAL_SYSTICK_Config+0x40>)
 8002c12:	f043 0303 	orr.w	r3, r3, #3
 8002c16:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d844      	bhi.n	8002cc4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002c63 	.word	0x08002c63
 8002c44:	08002c81 	.word	0x08002c81
 8002c48:	08002ca3 	.word	0x08002ca3
 8002c4c:	08002cc5 	.word	0x08002cc5
 8002c50:	08002c55 	.word	0x08002c55
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6013      	str	r3, [r2, #0]
      break;
 8002c60:	e031      	b.n	8002cc6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002c62:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c76:	f023 030c 	bic.w	r3, r3, #12
 8002c7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002c7e:	e022      	b.n	8002cc6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002c80:	4b14      	ldr	r3, [pc, #80]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c86:	f023 0304 	bic.w	r3, r3, #4
 8002c8a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002c92:	f023 030c 	bic.w	r3, r3, #12
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002ca0:	e011      	b.n	8002cc6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002cb4:	f023 030c 	bic.w	r3, r3, #12
 8002cb8:	4a07      	ldr	r2, [pc, #28]	@ (8002cd8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002cba:	f043 0308 	orr.w	r3, r3, #8
 8002cbe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002cc4:	bf00      	nop
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010
 8002cd8:	44020c00 	.word	0x44020c00

08002cdc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002ce2:	4b17      	ldr	r3, [pc, #92]	@ (8002d40 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	e01e      	b.n	8002d32 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002cf4:	4b13      	ldr	r3, [pc, #76]	@ (8002d44 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002cf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d00f      	beq.n	8002d26 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d80f      	bhi.n	8002d2c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d003      	beq.n	8002d20 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002d18:	e008      	b.n	8002d2c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
        break;
 8002d1e:	e008      	b.n	8002d32 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002d20:	2301      	movs	r3, #1
 8002d22:	607b      	str	r3, [r7, #4]
        break;
 8002d24:	e005      	b.n	8002d32 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002d26:	2302      	movs	r3, #2
 8002d28:	607b      	str	r3, [r7, #4]
        break;
 8002d2a:	e002      	b.n	8002d32 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
        break;
 8002d30:	bf00      	nop
    }
  }
  return systick_source;
 8002d32:	687b      	ldr	r3, [r7, #4]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e010 	.word	0xe000e010
 8002d44:	44020c00 	.word	0x44020c00

08002d48 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002d50:	f7ff fe5e 	bl	8002a10 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e06b      	b.n	8002e38 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e05c      	b.n	8002e38 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0204 	orr.w	r2, r2, #4
 8002d8c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2205      	movs	r2, #5
 8002d92:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002d96:	e020      	b.n	8002dda <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002d98:	f7ff fe3a 	bl	8002a10 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d919      	bls.n	8002dda <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dca:	2201      	movs	r2, #1
 8002dcc:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e02e      	b.n	8002e38 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0d7      	beq.n	8002d98 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0202 	orr.w	r2, r2, #2
 8002df6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002e08:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e22:	2201      	movs	r2, #1
 8002e24:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e019      	b.n	8002e86 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e00e      	b.n	8002e86 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e147      	b.n	8003136 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe f8ee 	bl	800109c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0210 	bic.w	r2, r2, #16
 8002ece:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed0:	f7ff fd9e 	bl	8002a10 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002ed6:	e012      	b.n	8002efe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ed8:	f7ff fd9a 	bl	8002a10 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b0a      	cmp	r3, #10
 8002ee4:	d90b      	bls.n	8002efe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e11b      	b.n	8003136 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d0e5      	beq.n	8002ed8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1c:	f7ff fd78 	bl	8002a10 <HAL_GetTick>
 8002f20:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f22:	e012      	b.n	8002f4a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002f24:	f7ff fd74 	bl	8002a10 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b0a      	cmp	r3, #10
 8002f30:	d90b      	bls.n	8002f4a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f36:	f043 0201 	orr.w	r2, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2203      	movs	r2, #3
 8002f42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0f5      	b.n	8003136 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0e5      	beq.n	8002f24 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0202 	orr.w	r2, r2, #2
 8002f66:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a74      	ldr	r2, [pc, #464]	@ (8003140 <HAL_FDCAN_Init+0x2ac>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d103      	bne.n	8002f7a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002f72:	4a74      	ldr	r2, [pc, #464]	@ (8003144 <HAL_FDCAN_Init+0x2b0>)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7c1b      	ldrb	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f90:	619a      	str	r2, [r3, #24]
 8002f92:	e007      	b.n	8002fa4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fa2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7c5b      	ldrb	r3, [r3, #17]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d108      	bne.n	8002fbe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fba:	619a      	str	r2, [r3, #24]
 8002fbc:	e007      	b.n	8002fce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7c9b      	ldrb	r3, [r3, #18]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fe4:	619a      	str	r2, [r3, #24]
 8002fe6:	e007      	b.n	8002ff8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ff6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800301c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0210 	bic.w	r2, r2, #16
 800302c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d108      	bne.n	8003048 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	619a      	str	r2, [r3, #24]
 8003046:	e02c      	b.n	80030a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b02      	cmp	r3, #2
 8003056:	d01c      	beq.n	8003092 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003066:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0210 	orr.w	r2, r2, #16
 8003076:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d110      	bne.n	80030a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0220 	orr.w	r2, r2, #32
 800308e:	619a      	str	r2, [r3, #24]
 8003090:	e007      	b.n	80030a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0220 	orr.w	r2, r2, #32
 80030a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80030ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80030cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030d6:	d115      	bne.n	8003104 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	3b01      	subs	r3, #1
 80030e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80030e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ec:	3b01      	subs	r3, #1
 80030ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003100:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003102:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fbfc 	bl	8003918 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	4000a400 	.word	0x4000a400
 8003144:	4000a500 	.word	0x4000a500

08003148 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	d110      	bne.n	800317e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0201 	bic.w	r2, r2, #1
 8003172:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e006      	b.n	800318c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
  }
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d12c      	bne.n	800320a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e023      	b.n	8003218 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fbec 	bl	80039c4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80031fc:	2201      	movs	r2, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	409a      	lsls	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e006      	b.n	8003218 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320e:	f043 0208 	orr.w	r2, r3, #8
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
  }
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003220:	b480      	push	{r7}
 8003222:	b08b      	sub	sp, #44	@ 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003238:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b02      	cmp	r3, #2
 800323e:	f040 80e8 	bne.w	8003412 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b40      	cmp	r3, #64	@ 0x40
 8003246:	d137      	bne.n	80032b8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0db      	b.n	8003420 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10a      	bne.n	8003290 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003282:	0a5b      	lsrs	r3, r3, #9
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800328c:	2301      	movs	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003298:	0a1b      	lsrs	r3, r3, #8
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80032a8:	69fa      	ldr	r2, [r7, #28]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b6:	e036      	b.n	8003326 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0a3      	b.n	8003420 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032e0:	0e1b      	lsrs	r3, r3, #24
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d10a      	bne.n	8003300 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80032fc:	2301      	movs	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	4413      	add	r3, r2
 8003312:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e005      	b.n	8003356 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	3304      	adds	r3, #4
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0fda      	lsrs	r2, r3, #31
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	3304      	adds	r3, #4
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	e00a      	b.n	80033e2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	441a      	add	r2, r3
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	440b      	add	r3, r1
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	3301      	adds	r3, #1
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	4a11      	ldr	r2, [pc, #68]	@ (800342c <HAL_FDCAN_GetRxMessage+0x20c>)
 80033e8:	5cd3      	ldrb	r3, [r2, r3]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d3ec      	bcc.n	80033cc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b40      	cmp	r3, #64	@ 0x40
 80033f6:	d105      	bne.n	8003404 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8003402:	e004      	b.n	800340e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e006      	b.n	8003420 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003416:	f043 0208 	orr.w	r2, r3, #8
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	372c      	adds	r7, #44	@ 0x2c
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	0800a034 	.word	0x0800a034

08003430 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003442:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003444:	7dfb      	ldrb	r3, [r7, #23]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d003      	beq.n	8003452 <HAL_FDCAN_ActivateNotification+0x22>
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b02      	cmp	r3, #2
 800344e:	f040 80c8 	bne.w	80035e2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03b      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d031      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d027      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01d      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d13b      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d131      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d127      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11d      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d113      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0202 	orr.w	r2, r2, #2
 8003590:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	430a      	orrs	r2, r1
 80035dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e006      	b.n	80035f0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003618:	4013      	ands	r3, r2
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003630:	4013      	ands	r3, r2
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800363a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003648:	4013      	ands	r3, r2
 800364a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003652:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8003656:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	4013      	ands	r3, r2
 8003662:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800366e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d006      	beq.n	80036ae <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2240      	movs	r2, #64	@ 0x40
 80036a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f916 	bl	80038da <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d019      	beq.n	80036ec <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036ca:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036e2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8d8 	bl	800389c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80036fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8a2 	bl	8003846 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800370e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd fd32 	bl	800117c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003726:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f897 	bl	800385c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00c      	beq.n	8003752 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800374a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f890 	bl	8003872 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d018      	beq.n	800378e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d013      	beq.n	800378e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800376e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2280      	movs	r2, #128	@ 0x80
 8003784:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f87c 	bl	8003886 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d007      	beq.n	80037b2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f880 	bl	80038b2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f878 	bl	80038c6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69fa      	ldr	r2, [r7, #28]
 800380c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800380e:	69f9      	ldr	r1, [r7, #28]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f876 	bl	8003902 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6a3a      	ldr	r2, [r7, #32]
 8003822:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f858 	bl	80038ee <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800383e:	bf00      	nop
 8003840:	3730      	adds	r7, #48	@ 0x30
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003920:	4b27      	ldr	r3, [pc, #156]	@ (80039c0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003922:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003932:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	041a      	lsls	r2, r3, #16
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003958:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	061a      	lsls	r2, r3, #24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e005      	b.n	80039a6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3304      	adds	r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3f3      	bcc.n	800399a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	4000ac00 	.word	0x4000ac00

080039c4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	@ 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80039e2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e00a      	b.n	8003a06 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80039f8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80039fe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003a00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a04:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a10:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003a16:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003a1c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	440b      	add	r3, r1
 8003a38:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	3304      	adds	r3, #4
 8003a44:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e020      	b.n	8003a9a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3303      	adds	r3, #3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3302      	adds	r3, #2
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	440b      	add	r3, r1
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a70:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	440b      	add	r3, r1
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003a7e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	440a      	add	r2, r1
 8003a86:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003a88:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3304      	adds	r3, #4
 8003a92:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3304      	adds	r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4a06      	ldr	r2, [pc, #24]	@ (8003ab8 <FDCAN_CopyMessageToRAM+0xf4>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d3d6      	bcc.n	8003a58 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	3724      	adds	r7, #36	@ 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	0800a034 	.word	0x0800a034

08003abc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003aca:	e136      	b.n	8003d3a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	4013      	ands	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8128 	beq.w	8003d34 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x38>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b12      	cmp	r3, #18
 8003af2:	d125      	bne.n	8003b40 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4013      	ands	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	08da      	lsrs	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3208      	adds	r2, #8
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0203 	and.w	r2, r3, #3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d00b      	beq.n	8003b94 <HAL_GPIO_Init+0xd8>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d007      	beq.n	8003b94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b88:	2b11      	cmp	r3, #17
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d130      	bne.n	8003bf6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bca:	2201      	movs	r2, #1
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 0201 	and.w	r2, r3, #1
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d017      	beq.n	8003c2e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4013      	ands	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d07c      	beq.n	8003d34 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003c3a:	4a47      	ldr	r2, [pc, #284]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3318      	adds	r3, #24
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0a9a      	lsrs	r2, r3, #10
 8003c62:	4b3e      	ldr	r3, [pc, #248]	@ (8003d5c <HAL_GPIO_Init+0x2a0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003c76:	4938      	ldr	r1, [pc, #224]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3318      	adds	r3, #24
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003c84:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003cae:	4b2a      	ldr	r3, [pc, #168]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003cd2:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003cfe:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <HAL_GPIO_Init+0x29c>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3301      	adds	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f aec1 	bne.w	8003acc <HAL_GPIO_Init+0x10>
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	44022000 	.word	0x44022000
 8003d5c:	002f7f7f 	.word	0x002f7f7f

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d7c:	e002      	b.n	8003d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f000 bc28 	b.w	80045f4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da4:	4b94      	ldr	r3, [pc, #592]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f003 0318 	and.w	r3, r3, #24
 8003dac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003dae:	4b92      	ldr	r3, [pc, #584]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d05b      	beq.n	8003e7c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x46>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b18      	cmp	r3, #24
 8003dce:	d114      	bne.n	8003dfa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d111      	bne.n	8003dfa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f000 bc08 	b.w	80045f4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003de4:	4b84      	ldr	r3, [pc, #528]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	041b      	lsls	r3, r3, #16
 8003df2:	4981      	ldr	r1, [pc, #516]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003df8:	e040      	b.n	8003e7c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d023      	beq.n	8003e4a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e02:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fdff 	bl	8002a10 <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003e16:	f7fe fdfb 	bl	8002a10 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e3e5      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003e28:	4b73      	ldr	r3, [pc, #460]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003e34:	4b70      	ldr	r3, [pc, #448]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	496d      	ldr	r1, [pc, #436]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	618b      	str	r3, [r1, #24]
 8003e48:	e018      	b.n	8003e7c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fe fddb 	bl	8002a10 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003e5e:	f7fe fdd7 	bl	8002a10 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e3c1      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e70:	4b61      	ldr	r3, [pc, #388]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80a0 	beq.w	8003fca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x10c>
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b18      	cmp	r3, #24
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8092 	bne.w	8003fca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e3a4      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x132>
 8003eb4:	4b50      	ldr	r3, [pc, #320]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e058      	b.n	8003f74 <HAL_RCC_OscConfig+0x1e4>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d112      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x160>
 8003eca:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b48      	ldr	r3, [pc, #288]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a47      	ldr	r2, [pc, #284]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003edc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b45      	ldr	r3, [pc, #276]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a44      	ldr	r2, [pc, #272]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e041      	b.n	8003f74 <HAL_RCC_OscConfig+0x1e4>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x190>
 8003efa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a3e      	ldr	r2, [pc, #248]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b3c      	ldr	r3, [pc, #240]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b39      	ldr	r3, [pc, #228]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a38      	ldr	r2, [pc, #224]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e029      	b.n	8003f74 <HAL_RCC_OscConfig+0x1e4>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003f28:	d112      	bne.n	8003f50 <HAL_RCC_OscConfig+0x1c0>
 8003f2a:	4b33      	ldr	r3, [pc, #204]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a32      	ldr	r2, [pc, #200]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b30      	ldr	r3, [pc, #192]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e011      	b.n	8003f74 <HAL_RCC_OscConfig+0x1e4>
 8003f50:	4b29      	ldr	r3, [pc, #164]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a28      	ldr	r2, [pc, #160]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a25      	ldr	r2, [pc, #148]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f6e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d013      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fe fd48 	bl	8002a10 <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f84:	f7fe fd44 	bl	8002a10 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	@ 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e32e      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f96:	4b18      	ldr	r3, [pc, #96]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x1f4>
 8003fa2:	e012      	b.n	8003fca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fd34 	bl	8002a10 <HAL_GetTick>
 8003fa8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003fac:	f7fe fd30 	bl	8002a10 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	@ 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e31a      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_RCC_OscConfig+0x268>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 809a 	beq.w	800410c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x25a>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b18      	cmp	r3, #24
 8003fe2:	d149      	bne.n	8004078 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d146      	bne.n	8004078 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d104      	bne.n	8003ffc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e2fe      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
 8003ff6:	bf00      	nop
 8003ff8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11c      	bne.n	800403c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004002:	4b9a      	ldr	r3, [pc, #616]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0218 	and.w	r2, r3, #24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d014      	beq.n	800403c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004012:	4b96      	ldr	r3, [pc, #600]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 0218 	bic.w	r2, r3, #24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	4993      	ldr	r1, [pc, #588]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004024:	f000 fdd0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004028:	4b91      	ldr	r3, [pc, #580]	@ (8004270 <HAL_RCC_OscConfig+0x4e0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fc65 	bl	80028fc <HAL_InitTick>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e2db      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fe fce8 	bl	8002a10 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004044:	f7fe fce4 	bl	8002a10 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e2ce      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004056:	4b85      	ldr	r3, [pc, #532]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004062:	4b82      	ldr	r3, [pc, #520]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	497e      	ldr	r1, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004076:	e049      	b.n	800410c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02c      	beq.n	80040da <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004080:	4b7a      	ldr	r3, [pc, #488]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 0218 	bic.w	r2, r3, #24
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4977      	ldr	r1, [pc, #476]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004092:	4b76      	ldr	r3, [pc, #472]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a75      	ldr	r2, [pc, #468]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fe fcb7 	bl	8002a10 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80040a6:	f7fe fcb3 	bl	8002a10 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e29d      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	4b6c      	ldr	r3, [pc, #432]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80040c4:	4b69      	ldr	r3, [pc, #420]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	4966      	ldr	r1, [pc, #408]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	610b      	str	r3, [r1, #16]
 80040d8:	e018      	b.n	800410c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040da:	4b64      	ldr	r3, [pc, #400]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a63      	ldr	r2, [pc, #396]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fe fc93 	bl	8002a10 <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80040ee:	f7fe fc8f 	bl	8002a10 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e279      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004100:	4b5a      	ldr	r3, [pc, #360]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03c      	beq.n	8004192 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01c      	beq.n	800415a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004120:	4b52      	ldr	r3, [pc, #328]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004126:	4a51      	ldr	r2, [pc, #324]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004128:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800412c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004130:	f7fe fc6e 	bl	8002a10 <HAL_GetTick>
 8004134:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004138:	f7fe fc6a 	bl	8002a10 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e254      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800414a:	4b48      	ldr	r3, [pc, #288]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800414c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0ef      	beq.n	8004138 <HAL_RCC_OscConfig+0x3a8>
 8004158:	e01b      	b.n	8004192 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415a:	4b44      	ldr	r3, [pc, #272]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800415c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004160:	4a42      	ldr	r2, [pc, #264]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004162:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004166:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fe fc51 	bl	8002a10 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004172:	f7fe fc4d 	bl	8002a10 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e237      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004184:	4b39      	ldr	r3, [pc, #228]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800418a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1ef      	bne.n	8004172 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 80d2 	beq.w	8004344 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041a0:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <HAL_RCC_OscConfig+0x4e4>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d118      	bne.n	80041de <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80041ac:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <HAL_RCC_OscConfig+0x4e4>)
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	4a30      	ldr	r2, [pc, #192]	@ (8004274 <HAL_RCC_OscConfig+0x4e4>)
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b8:	f7fe fc2a 	bl	8002a10 <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c0:	f7fe fc26 	bl	8002a10 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e210      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041d2:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <HAL_RCC_OscConfig+0x4e4>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_RCC_OscConfig+0x468>
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80041e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ec:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041f6:	e074      	b.n	80042e2 <HAL_RCC_OscConfig+0x552>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d118      	bne.n	8004232 <HAL_RCC_OscConfig+0x4a2>
 8004200:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004206:	4a19      	ldr	r2, [pc, #100]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004210:	4b16      	ldr	r3, [pc, #88]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004218:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800421c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004220:	4b12      	ldr	r3, [pc, #72]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004226:	4a11      	ldr	r2, [pc, #68]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004230:	e057      	b.n	80042e2 <HAL_RCC_OscConfig+0x552>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d11e      	bne.n	8004278 <HAL_RCC_OscConfig+0x4e8>
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800423c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004240:	4a0a      	ldr	r2, [pc, #40]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004242:	f043 0304 	orr.w	r3, r3, #4
 8004246:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800424c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004250:	4a06      	ldr	r2, [pc, #24]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004256:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800425a:	4b04      	ldr	r3, [pc, #16]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 800425c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004260:	4a02      	ldr	r2, [pc, #8]	@ (800426c <HAL_RCC_OscConfig+0x4dc>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800426a:	e03a      	b.n	80042e2 <HAL_RCC_OscConfig+0x552>
 800426c:	44020c00 	.word	0x44020c00
 8004270:	20000088 	.word	0x20000088
 8004274:	44020800 	.word	0x44020800
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b85      	cmp	r3, #133	@ 0x85
 800427e:	d118      	bne.n	80042b2 <HAL_RCC_OscConfig+0x522>
 8004280:	4ba2      	ldr	r3, [pc, #648]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004286:	4aa1      	ldr	r2, [pc, #644]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004288:	f043 0304 	orr.w	r3, r3, #4
 800428c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004290:	4b9e      	ldr	r3, [pc, #632]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004296:	4a9d      	ldr	r2, [pc, #628]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800429c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042a0:	4b9a      	ldr	r3, [pc, #616]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042a6:	4a99      	ldr	r2, [pc, #612]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042b0:	e017      	b.n	80042e2 <HAL_RCC_OscConfig+0x552>
 80042b2:	4b96      	ldr	r3, [pc, #600]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042b8:	4a94      	ldr	r2, [pc, #592]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042c2:	4b92      	ldr	r3, [pc, #584]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042c8:	4a90      	ldr	r2, [pc, #576]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042ca:	f023 0304 	bic.w	r3, r3, #4
 80042ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042d2:	4b8e      	ldr	r3, [pc, #568]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042d8:	4a8c      	ldr	r2, [pc, #560]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80042da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ea:	f7fe fb91 	bl	8002a10 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f0:	e00a      	b.n	8004308 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fe fb8d 	bl	8002a10 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e175      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004308:	4b80      	ldr	r3, [pc, #512]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800430a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ed      	beq.n	80042f2 <HAL_RCC_OscConfig+0x562>
 8004316:	e015      	b.n	8004344 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe fb7a 	bl	8002a10 <HAL_GetTick>
 800431c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fe fb76 	bl	8002a10 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e15e      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004336:	4b75      	ldr	r3, [pc, #468]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ed      	bne.n	8004320 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d036      	beq.n	80043be <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	d019      	beq.n	800438c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004358:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a6b      	ldr	r2, [pc, #428]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800435e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fe fb54 	bl	8002a10 <HAL_GetTick>
 8004368:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800436c:	f7fe fb50 	bl	8002a10 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e13a      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800437e:	4b63      	ldr	r3, [pc, #396]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f0      	beq.n	800436c <HAL_RCC_OscConfig+0x5dc>
 800438a:	e018      	b.n	80043be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800438c:	4b5f      	ldr	r3, [pc, #380]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a5e      	ldr	r2, [pc, #376]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004396:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe fb3a 	bl	8002a10 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80043a0:	f7fe fb36 	bl	8002a10 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e120      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80043b2:	4b56      	ldr	r3, [pc, #344]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 8115 	beq.w	80045f2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b18      	cmp	r3, #24
 80043cc:	f000 80af 	beq.w	800452e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 8086 	bne.w	80044e6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80043da:	4b4c      	ldr	r3, [pc, #304]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a4b      	ldr	r2, [pc, #300]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80043e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fe fb13 	bl	8002a10 <HAL_GetTick>
 80043ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043ee:	f7fe fb0f 	bl	8002a10 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0f9      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004400:	4b42      	ldr	r3, [pc, #264]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800440c:	4b3f      	ldr	r3, [pc, #252]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800440e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004410:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004414:	f023 0303 	bic.w	r3, r3, #3
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004420:	0212      	lsls	r2, r2, #8
 8004422:	430a      	orrs	r2, r1
 8004424:	4939      	ldr	r1, [pc, #228]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	628b      	str	r3, [r1, #40]	@ 0x28
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	3b01      	subs	r3, #1
 8004430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	3b01      	subs	r3, #1
 800443a:	025b      	lsls	r3, r3, #9
 800443c:	b29b      	uxth	r3, r3
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	3b01      	subs	r3, #1
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800445a:	492c      	ldr	r1, [pc, #176]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004460:	4b2a      	ldr	r3, [pc, #168]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004464:	4a29      	ldr	r2, [pc, #164]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004466:	f023 0310 	bic.w	r3, r3, #16
 800446a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004470:	4a26      	ldr	r2, [pc, #152]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004476:	4b25      	ldr	r3, [pc, #148]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	4a24      	ldr	r2, [pc, #144]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 800447c:	f043 0310 	orr.w	r3, r3, #16
 8004480:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004482:	4b22      	ldr	r3, [pc, #136]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	f023 020c 	bic.w	r2, r3, #12
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448e:	491f      	ldr	r1, [pc, #124]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004494:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	f023 0220 	bic.w	r2, r3, #32
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	491a      	ldr	r1, [pc, #104]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044a6:	4b19      	ldr	r3, [pc, #100]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80044b2:	4b16      	ldr	r3, [pc, #88]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a15      	ldr	r2, [pc, #84]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe faa7 	bl	8002a10 <HAL_GetTick>
 80044c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80044c6:	f7fe faa3 	bl	8002a10 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e08d      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044d8:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x736>
 80044e4:	e085      	b.n	80045f2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80044e6:	4b09      	ldr	r3, [pc, #36]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a08      	ldr	r2, [pc, #32]	@ (800450c <HAL_RCC_OscConfig+0x77c>)
 80044ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f2:	f7fe fa8d 	bl	8002a10 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80044fa:	f7fe fa89 	bl	8002a10 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d903      	bls.n	8004510 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e073      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
 800450c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004510:	4b3a      	ldr	r3, [pc, #232]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ee      	bne.n	80044fa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800451c:	4b37      	ldr	r3, [pc, #220]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	4a36      	ldr	r2, [pc, #216]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 8004522:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	6293      	str	r3, [r2, #40]	@ 0x28
 800452c:	e061      	b.n	80045f2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800452e:	4b33      	ldr	r3, [pc, #204]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 8004530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004532:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004534:	4b31      	ldr	r3, [pc, #196]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 8004536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004538:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d031      	beq.n	80045a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0203 	and.w	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d12a      	bne.n	80045a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d122      	bne.n	80045a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d11a      	bne.n	80045a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800457e:	429a      	cmp	r2, r3
 8004580:	d111      	bne.n	80045a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d108      	bne.n	80045a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	0e1b      	lsrs	r3, r3, #24
 8004598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e024      	b.n	80045f4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045aa:	4b14      	ldr	r3, [pc, #80]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ae:	08db      	lsrs	r3, r3, #3
 80045b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d01a      	beq.n	80045f2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c0:	4a0e      	ldr	r2, [pc, #56]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe fa22 	bl	8002a10 <HAL_GetTick>
 80045cc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80045ce:	bf00      	nop
 80045d0:	f7fe fa1e 	bl	8002a10 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d0f9      	beq.n	80045d0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e0:	4a06      	ldr	r2, [pc, #24]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80045e6:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ea:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_RCC_OscConfig+0x86c>)
 80045ec:	f043 0310 	orr.w	r3, r3, #16
 80045f0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	44020c00 	.word	0x44020c00

08004600 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e19e      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004614:	4b83      	ldr	r3, [pc, #524]	@ (8004824 <HAL_RCC_ClockConfig+0x224>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d910      	bls.n	8004644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004622:	4b80      	ldr	r3, [pc, #512]	@ (8004824 <HAL_RCC_ClockConfig+0x224>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	497e      	ldr	r1, [pc, #504]	@ (8004824 <HAL_RCC_ClockConfig+0x224>)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b7c      	ldr	r3, [pc, #496]	@ (8004824 <HAL_RCC_ClockConfig+0x224>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e186      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	4b74      	ldr	r3, [pc, #464]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800465e:	429a      	cmp	r2, r3
 8004660:	d909      	bls.n	8004676 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004662:	4b71      	ldr	r3, [pc, #452]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	496d      	ldr	r1, [pc, #436]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004672:	4313      	orrs	r3, r2
 8004674:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d012      	beq.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	4b68      	ldr	r3, [pc, #416]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004690:	429a      	cmp	r2, r3
 8004692:	d909      	bls.n	80046a8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004694:	4b64      	ldr	r3, [pc, #400]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	4961      	ldr	r1, [pc, #388]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d908      	bls.n	80046d6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80046c4:	4b58      	ldr	r3, [pc, #352]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4955      	ldr	r1, [pc, #340]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	4b50      	ldr	r3, [pc, #320]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d908      	bls.n	8004704 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80046f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 020f 	bic.w	r2, r3, #15
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	494a      	ldr	r1, [pc, #296]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004700:	4313      	orrs	r3, r2
 8004702:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8093 	beq.w	8004838 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800471a:	4b43      	ldr	r3, [pc, #268]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d121      	bne.n	800476a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e113      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004732:	4b3d      	ldr	r3, [pc, #244]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e107      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800474a:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0fb      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800475a:	4b33      	ldr	r3, [pc, #204]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0f3      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800476a:	4b2f      	ldr	r3, [pc, #188]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	492c      	ldr	r1, [pc, #176]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004778:	4313      	orrs	r3, r2
 800477a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800477c:	f7fe f948 	bl	8002a10 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d112      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7fe f940 	bl	8002a10 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0d7      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a2:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f003 0318 	and.w	r3, r3, #24
 80047aa:	2b18      	cmp	r3, #24
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_ClockConfig+0x18c>
 80047ae:	e043      	b.n	8004838 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d112      	bne.n	80047de <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047ba:	f7fe f929 	bl	8002a10 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e0c0      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d0:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0318 	and.w	r3, r3, #24
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_ClockConfig+0x1ba>
 80047dc:	e02c      	b.n	8004838 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d122      	bne.n	800482c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047e8:	f7fe f912 	bl	8002a10 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0a9      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <HAL_RCC_ClockConfig+0x228>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 0318 	and.w	r3, r3, #24
 8004806:	2b08      	cmp	r3, #8
 8004808:	d1ee      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1e8>
 800480a:	e015      	b.n	8004838 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800480c:	f7fe f900 	bl	8002a10 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481a:	4293      	cmp	r3, r2
 800481c:	d906      	bls.n	800482c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e097      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
 8004822:	bf00      	nop
 8004824:	40022000 	.word	0x40022000
 8004828:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800482c:	4b4b      	ldr	r3, [pc, #300]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0318 	and.w	r3, r3, #24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e9      	bne.n	800480c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d010      	beq.n	8004866 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	429a      	cmp	r2, r3
 8004852:	d208      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004854:	4b41      	ldr	r3, [pc, #260]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f023 020f 	bic.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	493e      	ldr	r1, [pc, #248]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004866:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCC_ClockConfig+0x360>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d210      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004874:	4b3a      	ldr	r3, [pc, #232]	@ (8004960 <HAL_RCC_ClockConfig+0x360>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 020f 	bic.w	r2, r3, #15
 800487c:	4938      	ldr	r1, [pc, #224]	@ (8004960 <HAL_RCC_ClockConfig+0x360>)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004884:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <HAL_RCC_ClockConfig+0x360>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d001      	beq.n	8004896 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e05d      	b.n	8004952 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d010      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	4b2d      	ldr	r3, [pc, #180]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d208      	bcs.n	80048c4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80048b2:	4b2a      	ldr	r3, [pc, #168]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4927      	ldr	r1, [pc, #156]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d012      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	4b21      	ldr	r3, [pc, #132]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048de:	429a      	cmp	r2, r3
 80048e0:	d209      	bcs.n	80048f6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	491a      	ldr	r1, [pc, #104]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0310 	and.w	r3, r3, #16
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695a      	ldr	r2, [r3, #20]
 8004906:	4b15      	ldr	r3, [pc, #84]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004910:	429a      	cmp	r2, r3
 8004912:	d209      	bcs.n	8004928 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004914:	4b11      	ldr	r3, [pc, #68]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	490e      	ldr	r1, [pc, #56]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004924:	4313      	orrs	r3, r2
 8004926:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004928:	f000 f822 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_ClockConfig+0x35c>)
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490b      	ldr	r1, [pc, #44]	@ (8004964 <HAL_RCC_ClockConfig+0x364>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a0a      	ldr	r2, [pc, #40]	@ (8004968 <HAL_RCC_ClockConfig+0x368>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004942:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x36c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fd ffd8 	bl	80028fc <HAL_InitTick>
 800494c:	4603      	mov	r3, r0
 800494e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004950:	7afb      	ldrb	r3, [r7, #11]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	44020c00 	.word	0x44020c00
 8004960:	40022000 	.word	0x40022000
 8004964:	0800a01c 	.word	0x0800a01c
 8004968:	20000084 	.word	0x20000084
 800496c:	20000088 	.word	0x20000088

08004970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004976:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0318 	and.w	r3, r3, #24
 800497e:	2b08      	cmp	r3, #8
 8004980:	d102      	bne.n	8004988 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004982:	4b8a      	ldr	r3, [pc, #552]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x23c>)
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e107      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004988:	4b87      	ldr	r3, [pc, #540]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0318 	and.w	r3, r3, #24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d112      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004994:	4b84      	ldr	r3, [pc, #528]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049a0:	4b81      	ldr	r3, [pc, #516]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	4a81      	ldr	r2, [pc, #516]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x240>)
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e0f1      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80049b4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x240>)
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	e0ee      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 0318 	and.w	r3, r3, #24
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049c6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x244>)
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	e0e5      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049cc:	4b76      	ldr	r3, [pc, #472]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	f003 0318 	and.w	r3, r3, #24
 80049d4:	2b18      	cmp	r3, #24
 80049d6:	f040 80dd 	bne.w	8004b94 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049da:	4b73      	ldr	r3, [pc, #460]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80049e4:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	0a1b      	lsrs	r3, r3, #8
 80049ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049f0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	091b      	lsrs	r3, r3, #4
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80049fc:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004a00:	08db      	lsrs	r3, r3, #3
 8004a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80b7 	beq.w	8004b8e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_GetSysClockFreq+0xbe>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d056      	beq.n	8004ada <HAL_RCC_GetSysClockFreq+0x16a>
 8004a2c:	e077      	b.n	8004b1e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d02d      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	08db      	lsrs	r3, r3, #3
 8004a40:	f003 0303 	and.w	r3, r3, #3
 8004a44:	4a5a      	ldr	r2, [pc, #360]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a64:	4b50      	ldr	r3, [pc, #320]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a74:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a78:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8004a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a90:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004a94:	e065      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	ee07 3a90 	vmov	s15, r3
 8004a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004bbc <HAL_RCC_GetSysClockFreq+0x24c>
 8004aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab0:	ee07 3a90 	vmov	s15, r3
 8004ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ab8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004abc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8004ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004ad8:	e043      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004bc0 <HAL_RCC_GetSysClockFreq+0x250>
 8004ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aec:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004afc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b00:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8004b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b18:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004b1c:	e021      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	ee07 3a90 	vmov	s15, r3
 8004b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b28:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bc4 <HAL_RCC_GetSysClockFreq+0x254>
 8004b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b44:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8004b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004b60:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004b62:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	0a5b      	lsrs	r3, r3, #9
 8004b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b7a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 3a90 	vmov	r3, s15
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	e004      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e001      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004b94:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004b96:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004b98:	69fb      	ldr	r3, [r7, #28]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3724      	adds	r7, #36	@ 0x24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	44020c00 	.word	0x44020c00
 8004bac:	003d0900 	.word	0x003d0900
 8004bb0:	03d09000 	.word	0x03d09000
 8004bb4:	016e3600 	.word	0x016e3600
 8004bb8:	46000000 	.word	0x46000000
 8004bbc:	4c742400 	.word	0x4c742400
 8004bc0:	4bb71b00 	.word	0x4bb71b00
 8004bc4:	4a742400 	.word	0x4a742400

08004bc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004bcc:	f7ff fed0 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004bd6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004bda:	4907      	ldr	r1, [pc, #28]	@ (8004bf8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004bde:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	4a05      	ldr	r2, [pc, #20]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x34>)
 8004be8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004bea:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <HAL_RCC_GetHCLKFreq+0x34>)
 8004bec:	681b      	ldr	r3, [r3, #0]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	44020c00 	.word	0x44020c00
 8004bf8:	0800a01c 	.word	0x0800a01c
 8004bfc:	20000084 	.word	0x20000084

08004c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004c04:	f7ff ffe0 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4904      	ldr	r1, [pc, #16]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	44020c00 	.word	0x44020c00
 8004c28:	0800a02c 	.word	0x0800a02c

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004c30:	f7ff ffca 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4904      	ldr	r1, [pc, #16]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	44020c00 	.word	0x44020c00
 8004c54:	0800a02c 	.word	0x0800a02c

08004c58 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004c5c:	f7ff ffb4 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	0b1b      	lsrs	r3, r3, #12
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	@ (8004c80 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	44020c00 	.word	0x44020c00
 8004c80:	0800a02c 	.word	0x0800a02c

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c88:	b0aa      	sub	sp, #168	@ 0xa8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004ca8:	2500      	movs	r5, #0
 8004caa:	ea54 0305 	orrs.w	r3, r4, r5
 8004cae:	d00b      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004cb0:	4bb8      	ldr	r3, [pc, #736]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cb6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004cba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	4ab4      	ldr	r2, [pc, #720]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 0801 	and.w	r8, r2, #1
 8004cd4:	f04f 0900 	mov.w	r9, #0
 8004cd8:	ea58 0309 	orrs.w	r3, r8, r9
 8004cdc:	d038      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d819      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d09 	.word	0x08004d09
 8004cf8:	08004d1d 	.word	0x08004d1d
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fff2 	bl	8006cf8 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004d1a:	e004      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d26:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004d2e:	4b99      	ldr	r3, [pc, #612]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d34:	f023 0107 	bic.w	r1, r3, #7
 8004d38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	4a95      	ldr	r2, [pc, #596]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d46:	e003      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004d4c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f002 0a02 	and.w	sl, r2, #2
 8004d5c:	f04f 0b00 	mov.w	fp, #0
 8004d60:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d64:	d03c      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	2b28      	cmp	r3, #40	@ 0x28
 8004d6e:	d01b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8004d70:	2b28      	cmp	r3, #40	@ 0x28
 8004d72:	d815      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d019      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d811      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004d7c:	2b18      	cmp	r3, #24
 8004d7e:	d017      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004d80:	2b18      	cmp	r3, #24
 8004d82:	d80d      	bhi.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d015      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d90:	3308      	adds	r3, #8
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 ffb0 	bl	8006cf8 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004da6:	e006      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004da8:	bf00      	nop
 8004daa:	e004      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8004db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004dbe:	4b75      	ldr	r3, [pc, #468]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dc4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	4a71      	ldr	r2, [pc, #452]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dd6:	e003      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ddc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f002 0304 	and.w	r3, r2, #4
 8004dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004df6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d040      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e0a:	d01e      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004e0c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e10:	d817      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e16:	d01a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e1c:	d811      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e20:	d017      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004e22:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e24:	d80d      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d015      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004e2a:	2b40      	cmp	r3, #64	@ 0x40
 8004e2c:	d109      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e32:	3308      	adds	r3, #8
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 ff5f 	bl	8006cf8 <RCCEx_PLL2_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e004      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10c      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e60:	4b4c      	ldr	r3, [pc, #304]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e66:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e70:	4a48      	ldr	r2, [pc, #288]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e72:	430b      	orrs	r3, r1
 8004e74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e78:	e003      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004e7e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e98:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	d043      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ea2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004eac:	d021      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004eae:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004eb2:	d81a      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004eb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb8:	d01d      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004eba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ebe:	d814      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004ec0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ec4:	d019      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ec6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eca:	d80e      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d016      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8004ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ed4:	d109      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004eda:	3308      	adds	r3, #8
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 ff0b 	bl	8006cf8 <RCCEx_PLL2_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004ef0:	e006      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e004      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004efa:	bf00      	nop
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8004efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10c      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f08:	4b22      	ldr	r3, [pc, #136]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f0e:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f20:	e003      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f22:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f26:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f38:	2300      	movs	r3, #0
 8004f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004f40:	460b      	mov	r3, r1
 8004f42:	4313      	orrs	r3, r2
 8004f44:	d03e      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f50:	d01b      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f56:	d814      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5c:	d017      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004f5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f62:	d80e      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d017      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f72:	3308      	adds	r3, #8
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 febf 	bl	8006cf8 <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f80:	e00b      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004f88:	e007      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004f8a:	bf00      	nop
 8004f8c:	e005      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004f8e:	bf00      	nop
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004f92:	bf00      	nop
 8004f94:	44020c00 	.word	0x44020c00
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004fa2:	4ba5      	ldr	r3, [pc, #660]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fa8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	4aa1      	ldr	r2, [pc, #644]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fba:	e003      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004fc0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fd6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d03b      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004fe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fea:	d01b      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8004fec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ff0:	d814      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004ff2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ff6:	d017      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ff8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ffc:	d80e      	bhi.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x398>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005002:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005006:	d109      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800500c:	3308      	adds	r3, #8
 800500e:	4618      	mov	r0, r3
 8005010:	f001 fe72 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800501a:	e008      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005024:	bf00      	nop
 8005026:	e002      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10c      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005036:	4b80      	ldr	r3, [pc, #512]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800503c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005040:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005046:	4a7c      	ldr	r2, [pc, #496]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005048:	430b      	orrs	r3, r1
 800504a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800504e:	e003      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005054:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005058:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005066:	2300      	movs	r3, #0
 8005068:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800506a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	d033      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005074:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800507e:	d015      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005084:	d80e      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005086:	2b00      	cmp	r3, #0
 8005088:	d012      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800508a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508e:	d109      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005090:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005094:	3308      	adds	r3, #8
 8005096:	4618      	mov	r0, r3
 8005098:	f001 fe2e 	bl	8006cf8 <RCCEx_PLL2_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80050a2:	e006      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80050aa:	e002      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80050ac:	bf00      	nop
 80050ae:	e000      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 80050b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80050ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80050bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050c0:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80050c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ca:	4a5b      	ldr	r2, [pc, #364]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80050d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80050dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	2100      	movs	r1, #0
 80050e6:	6639      	str	r1, [r7, #96]	@ 0x60
 80050e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80050ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d033      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80050f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005102:	d015      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005108:	d80e      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800510e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005112:	d109      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005114:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005118:	3308      	adds	r3, #8
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fdec 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005126:	e006      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800512e:	e002      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005134:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005136:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10c      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800513e:	4b3e      	ldr	r3, [pc, #248]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005144:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005148:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800514c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514e:	4a3a      	ldr	r2, [pc, #232]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005150:	430b      	orrs	r3, r1
 8005152:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800515c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005160:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	2100      	movs	r1, #0
 800516a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800516c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005172:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005176:	460b      	mov	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800517c:	4b2e      	ldr	r3, [pc, #184]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	4a2d      	ldr	r2, [pc, #180]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005182:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005186:	61d3      	str	r3, [r2, #28]
 8005188:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005194:	4a28      	ldr	r2, [pc, #160]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005196:	430b      	orrs	r3, r1
 8005198:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800519a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051a8:	2300      	movs	r3, #0
 80051aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051b0:	460b      	mov	r3, r1
 80051b2:	4313      	orrs	r3, r2
 80051b4:	d046      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80051b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80051c0:	d021      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80051c2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80051c6:	d81a      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051cc:	d01d      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80051ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d2:	d814      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80051d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d8:	d019      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80051da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051de:	d80e      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d016      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e8:	d109      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051ee:	3308      	adds	r3, #8
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fd81 	bl	8006cf8 <RCCEx_PLL2_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80051fc:	e00a      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005206:	bf00      	nop
 8005208:	e004      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005214:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800521c:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800521e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005222:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	4a02      	ldr	r2, [pc, #8]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800522e:	430b      	orrs	r3, r1
 8005230:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005236:	bf00      	nop
 8005238:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005240:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005252:	2300      	movs	r3, #0
 8005254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005256:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d043      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800526a:	d021      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800526c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005270:	d81a      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005276:	d01d      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800527c:	d814      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800527e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005282:	d019      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005284:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005288:	d80e      	bhi.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x638>
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005292:	d109      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005294:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005298:	3308      	adds	r3, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f001 fd2c 	bl	8006cf8 <RCCEx_PLL2_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80052a6:	e00a      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80052ae:	e006      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80052b0:	bf00      	nop
 80052b2:	e004      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80052b4:	bf00      	nop
 80052b6:	e002      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80052b8:	bf00      	nop
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80052bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052be:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80052c6:	4bb6      	ldr	r3, [pc, #728]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80052d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	4ab2      	ldr	r2, [pc, #712]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80052d8:	430b      	orrs	r3, r1
 80052da:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052de:	e003      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80052e4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80052e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f6:	2300      	movs	r3, #0
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80052fe:	460b      	mov	r3, r1
 8005300:	4313      	orrs	r3, r2
 8005302:	d030      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005304:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800530a:	2b05      	cmp	r3, #5
 800530c:	d80f      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 800530e:	2b03      	cmp	r3, #3
 8005310:	d211      	bcs.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005312:	2b01      	cmp	r3, #1
 8005314:	d911      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005316:	2b02      	cmp	r3, #2
 8005318:	d109      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800531a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800531e:	3308      	adds	r3, #8
 8005320:	4618      	mov	r0, r3
 8005322:	f001 fce9 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800532c:	e006      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005334:	e002      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800533a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10c      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005344:	4b96      	ldr	r3, [pc, #600]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800534a:	f023 0107 	bic.w	r1, r3, #7
 800534e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005354:	4a92      	ldr	r2, [pc, #584]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005356:	430b      	orrs	r3, r1
 8005358:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800535c:	e003      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005362:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005366:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	2100      	movs	r1, #0
 8005370:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005378:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800537c:	460b      	mov	r3, r1
 800537e:	4313      	orrs	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800538c:	2b08      	cmp	r3, #8
 800538e:	d005      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005396:	e002      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005398:	bf00      	nop
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10c      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80053a6:	4b7e      	ldr	r3, [pc, #504]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053ac:	f023 0108 	bic.w	r1, r3, #8
 80053b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b6:	4a7a      	ldr	r2, [pc, #488]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80053b8:	430b      	orrs	r3, r1
 80053ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80053c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f000 80b0 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80053e6:	4b6f      	ldr	r3, [pc, #444]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	4a6e      	ldr	r2, [pc, #440]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f2:	f7fd fb0d 	bl	8002a10 <HAL_GetTick>
 80053f6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80053fa:	e00b      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fd fb08 	bl	8002a10 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d903      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005412:	e005      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005414:	4b63      	ldr	r3, [pc, #396]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ed      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005420:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 808a 	bne.w	800553e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800542a:	4b5d      	ldr	r3, [pc, #372]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800542c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005434:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005438:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d022      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005440:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005446:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800544a:	429a      	cmp	r2, r3
 800544c:	d01b      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800544e:	4b54      	ldr	r3, [pc, #336]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005450:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005458:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800545c:	4b50      	ldr	r3, [pc, #320]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800545e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005462:	4a4f      	ldr	r2, [pc, #316]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005468:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800546c:	4b4c      	ldr	r3, [pc, #304]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800546e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005472:	4a4b      	ldr	r2, [pc, #300]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800547c:	4a48      	ldr	r2, [pc, #288]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800547e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d019      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fd fabd 	bl	8002a10 <HAL_GetTick>
 8005496:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549a:	e00d      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549c:	f7fd fab8 	bl	8002a10 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d903      	bls.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80054b6:	e006      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b8:	4b39      	ldr	r3, [pc, #228]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80054ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0ea      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80054c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d132      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80054ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054dc:	d10f      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80054de:	4b30      	ldr	r3, [pc, #192]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80054f6:	4a2a      	ldr	r2, [pc, #168]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80054f8:	430b      	orrs	r3, r1
 80054fa:	61d3      	str	r3, [r2, #28]
 80054fc:	e005      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x886>
 80054fe:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4a27      	ldr	r2, [pc, #156]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005504:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005508:	61d3      	str	r3, [r2, #28]
 800550a:	4b25      	ldr	r3, [pc, #148]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800550c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005510:	4a23      	ldr	r2, [pc, #140]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005516:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800551a:	4b21      	ldr	r3, [pc, #132]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800551c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005520:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800552a:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800552c:	430b      	orrs	r3, r1
 800552e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005532:	e008      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005534:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005538:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005542:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005546:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005558:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800555c:	460b      	mov	r3, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	d038      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005562:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005568:	2b30      	cmp	r3, #48	@ 0x30
 800556a:	d014      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800556c:	2b30      	cmp	r3, #48	@ 0x30
 800556e:	d80e      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005570:	2b20      	cmp	r3, #32
 8005572:	d012      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005574:	2b20      	cmp	r3, #32
 8005576:	d80a      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800557c:	2b10      	cmp	r3, #16
 800557e:	d106      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005580:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	4a06      	ldr	r2, [pc, #24]	@ (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800558a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800558c:	e00d      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005594:	e009      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005596:	bf00      	nop
 8005598:	e007      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800559a:	bf00      	nop
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x926>
 800559e:	bf00      	nop
 80055a0:	44020c00 	.word	0x44020c00
 80055a4:	44020800 	.word	0x44020800
        break;
 80055a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055aa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10c      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80055b2:	4bb5      	ldr	r3, [pc, #724]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c2:	49b1      	ldr	r1, [pc, #708]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80055ca:	e003      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80055d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d03c      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80055f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80055f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d81d      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005615 	.word	0x08005615
 8005604:	08005623 	.word	0x08005623
 8005608:	08005637 	.word	0x08005637
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800563f 	.word	0x0800563f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005614:	4b9c      	ldr	r3, [pc, #624]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005618:	4a9b      	ldr	r2, [pc, #620]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800561a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800561e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005620:	e00e      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005626:	3308      	adds	r3, #8
 8005628:	4618      	mov	r0, r3
 800562a:	f001 fb65 	bl	8006cf8 <RCCEx_PLL2_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005634:	e004      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005648:	4b8f      	ldr	r3, [pc, #572]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800564e:	f023 0207 	bic.w	r2, r3, #7
 8005652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005658:	498b      	ldr	r1, [pc, #556]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005660:	e003      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005666:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800566a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d03c      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005686:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	2b20      	cmp	r3, #32
 800568e:	d01f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d819      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8005694:	2b18      	cmp	r3, #24
 8005696:	d01d      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005698:	2b18      	cmp	r3, #24
 800569a:	d815      	bhi.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d007      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80056a4:	e010      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a6:	4b78      	ldr	r3, [pc, #480]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	4a77      	ldr	r2, [pc, #476]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80056b2:	e010      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056b8:	3308      	adds	r3, #8
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 fb1c 	bl	8006cf8 <RCCEx_PLL2_Config>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80056c6:	e006      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80056de:	4b6a      	ldr	r3, [pc, #424]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80056e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ee:	4966      	ldr	r1, [pc, #408]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80056fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005716:	460b      	mov	r3, r1
 8005718:	4313      	orrs	r3, r2
 800571a:	d03e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800571c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005726:	d020      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8005728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572c:	d819      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800572e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005730:	d01d      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005732:	2bc0      	cmp	r3, #192	@ 0xc0
 8005734:	d815      	bhi.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d007      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800573e:	e010      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005740:	4b51      	ldr	r3, [pc, #324]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	4a50      	ldr	r2, [pc, #320]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800574a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800574c:	e010      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800574e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005752:	3308      	adds	r3, #8
 8005754:	4618      	mov	r0, r3
 8005756:	f001 facf 	bl	8006cf8 <RCCEx_PLL2_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005760:	e006      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005768:	e002      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800576e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005770:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005778:	4b43      	ldr	r3, [pc, #268]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800577a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800577e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005782:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005788:	493f      	ldr	r1, [pc, #252]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005796:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800579a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	2100      	movs	r1, #0
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d038      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80057b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c0:	d00e      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80057c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c6:	d815      	bhi.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d110      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80057d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80057de:	e00e      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057e4:	3308      	adds	r3, #8
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 fa86 	bl	8006cf8 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80057f2:	e004      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80057fa:	e000      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80057fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005806:	4b20      	ldr	r3, [pc, #128]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800580c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005810:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005816:	491c      	ldr	r1, [pc, #112]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800581e:	e003      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005824:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005828:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	2100      	movs	r1, #0
 8005832:	6039      	str	r1, [r7, #0]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800583e:	460b      	mov	r3, r1
 8005840:	4313      	orrs	r3, r2
 8005842:	d039      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005844:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800584a:	2b30      	cmp	r3, #48	@ 0x30
 800584c:	d01e      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800584e:	2b30      	cmp	r3, #48	@ 0x30
 8005850:	d815      	bhi.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8005852:	2b10      	cmp	r3, #16
 8005854:	d002      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8005856:	2b20      	cmp	r3, #32
 8005858:	d007      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800585a:	e010      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585c:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	4a09      	ldr	r2, [pc, #36]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005868:	e011      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800586a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800586e:	3308      	adds	r3, #8
 8005870:	4618      	mov	r0, r3
 8005872:	f001 fa41 	bl	8006cf8 <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800587c:	e007      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005884:	e003      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8005886:	bf00      	nop
 8005888:	44020c00 	.word	0x44020c00
        break;
 800588c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800588e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10c      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005896:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800589c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058a6:	4908      	ldr	r1, [pc, #32]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058ae:	e003      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80058b8:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80058bc:	4618      	mov	r0, r3
 80058be:	37a8      	adds	r7, #168	@ 0xa8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c6:	bf00      	nop
 80058c8:	44020c00 	.word	0x44020c00

080058cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b08b      	sub	sp, #44	@ 0x2c
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80058d4:	4bae      	ldr	r3, [pc, #696]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058dc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80058de:	4bac      	ldr	r3, [pc, #688]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80058e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	0a1b      	lsrs	r3, r3, #8
 80058ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80058f4:	4ba6      	ldr	r3, [pc, #664]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005900:	4ba3      	ldr	r3, [pc, #652]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	08db      	lsrs	r3, r3, #3
 8005906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	ee07 3a90 	vmov	s15, r3
 8005914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005918:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8126 	beq.w	8005b70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d053      	beq.n	80059d2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b03      	cmp	r3, #3
 800592e:	d86f      	bhi.n	8005a10 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d003      	beq.n	800593e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d02b      	beq.n	8005994 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800593c:	e068      	b.n	8005a10 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800593e:	4b94      	ldr	r3, [pc, #592]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	08db      	lsrs	r3, r3, #3
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	4a92      	ldr	r2, [pc, #584]	@ (8005b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	ee07 3a90 	vmov	s15, r3
 8005960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005972:	ed97 6a04 	vldr	s12, [r7, #16]
 8005976:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800597a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005992:	e068      	b.n	8005a66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80059b4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80059b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059cc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80059d0:	e049      	b.n	8005a66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059dc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80059e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80059f2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005a0e:	e02a      	b.n	8005a66 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a10:	4b5f      	ldr	r3, [pc, #380]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	08db      	lsrs	r3, r3, #3
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	4a5e      	ldr	r2, [pc, #376]	@ (8005b94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8005a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a20:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	ee07 3a90 	vmov	s15, r3
 8005a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a44:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a48:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005a64:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a66:	4b4a      	ldr	r3, [pc, #296]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a72:	d121      	bne.n	8005ab8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005a74:	4b46      	ldr	r3, [pc, #280]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a80:	4b43      	ldr	r3, [pc, #268]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a96:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005a9a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e006      	b.n	8005abe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005abe:	4b34      	ldr	r3, [pc, #208]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005aca:	d121      	bne.n	8005b10 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005acc:	4b30      	ldr	r3, [pc, #192]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d017      	beq.n	8005b08 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005aee:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005af2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afe:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	e006      	b.n	8005b16 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	e002      	b.n	8005b16 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b16:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b22:	d121      	bne.n	8005b68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005b24:	4b1a      	ldr	r3, [pc, #104]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b30:	4b17      	ldr	r3, [pc, #92]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b34:	0e1b      	lsrs	r3, r3, #24
 8005b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b46:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005b4a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b56:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b5e:	e010      	b.n	8005b82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	609a      	str	r2, [r3, #8]
}
 8005b66:	e00c      	b.n	8005b82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	609a      	str	r2, [r3, #8]
}
 8005b6e:	e008      	b.n	8005b82 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
}
 8005b82:	bf00      	nop
 8005b84:	372c      	adds	r7, #44	@ 0x2c
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	44020c00 	.word	0x44020c00
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4a742400 	.word	0x4a742400
 8005ba0:	4bb71b00 	.word	0x4bb71b00

08005ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b08b      	sub	sp, #44	@ 0x2c
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005bac:	4bae      	ldr	r3, [pc, #696]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005bb6:	4bac      	ldr	r3, [pc, #688]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005bc0:	4ba9      	ldr	r3, [pc, #676]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bca:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005bcc:	4ba6      	ldr	r3, [pc, #664]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005bd8:	4ba3      	ldr	r3, [pc, #652]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	08db      	lsrs	r3, r3, #3
 8005bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	fb02 f303 	mul.w	r3, r2, r3
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8126 	beq.w	8005e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d053      	beq.n	8005caa <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d86f      	bhi.n	8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d02b      	beq.n	8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005c14:	e068      	b.n	8005ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c16:	4b94      	ldr	r3, [pc, #592]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	4a92      	ldr	r2, [pc, #584]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c4e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005c6a:	e068      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c88:	ed97 6a04 	vldr	s12, [r7, #16]
 8005c8c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005ca8:	e049      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8005cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005cca:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005ce6:	e02a      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ce8:	4b5f      	ldr	r3, [pc, #380]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d20:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005d3c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d4a:	d121      	bne.n	8005d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d4c:	4b46      	ldr	r3, [pc, #280]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d017      	beq.n	8005d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d58:	4b43      	ldr	r3, [pc, #268]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5c:	0a5b      	lsrs	r3, r3, #9
 8005d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005d72:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d7e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e006      	b.n	8005d96 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d96:	4b34      	ldr	r3, [pc, #208]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005da2:	d121      	bne.n	8005de8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005da4:	4b30      	ldr	r3, [pc, #192]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d017      	beq.n	8005de0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005db0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005dca:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	e006      	b.n	8005dee <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	e002      	b.n	8005dee <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dee:	4b1e      	ldr	r3, [pc, #120]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dfa:	d121      	bne.n	8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d017      	beq.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e08:	4b17      	ldr	r3, [pc, #92]	@ (8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e0c:	0e1b      	lsrs	r3, r3, #24
 8005e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005e22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e36:	e010      	b.n	8005e5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	609a      	str	r2, [r3, #8]
}
 8005e3e:	e00c      	b.n	8005e5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
}
 8005e46:	e008      	b.n	8005e5a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	609a      	str	r2, [r3, #8]
}
 8005e5a:	bf00      	nop
 8005e5c:	372c      	adds	r7, #44	@ 0x2c
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	44020c00 	.word	0x44020c00
 8005e6c:	03d09000 	.word	0x03d09000
 8005e70:	46000000 	.word	0x46000000
 8005e74:	4a742400 	.word	0x4a742400
 8005e78:	4bb71b00 	.word	0x4bb71b00

08005e7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08c      	sub	sp, #48	@ 0x30
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	d14b      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005e92:	4bc4      	ldr	r3, [pc, #784]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e9c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005e9e:	4bc1      	ldr	r3, [pc, #772]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d108      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb2:	d104      	bne.n	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005eb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eba:	f000 bf14 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005ebe:	4bb9      	ldr	r3, [pc, #740]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ecc:	d108      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ed4:	d104      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005ed6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005edc:	f000 bf03 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005ee0:	4bb0      	ldr	r3, [pc, #704]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eec:	d119      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ef4:	d115      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005ef6:	4bab      	ldr	r3, [pc, #684]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005efe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f02:	d30a      	bcc.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005f04:	4ba7      	ldr	r3, [pc, #668]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	0a1b      	lsrs	r3, r3, #8
 8005f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f0e:	4aa6      	ldr	r2, [pc, #664]	@ (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8005f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005f16:	f000 bee6 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005f1e:	f000 bee2 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f26:	f000 bede 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f2e:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8005f32:	ea52 0301 	orrs.w	r3, r2, r1
 8005f36:	f000 838e 	beq.w	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8005f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3e:	2a01      	cmp	r2, #1
 8005f40:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8005f44:	f080 86cc 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8005f50:	ea52 0301 	orrs.w	r3, r2, r1
 8005f54:	f000 82aa 	beq.w	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f5c:	2a01      	cmp	r2, #1
 8005f5e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8005f62:	f080 86bd 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6a:	f1a3 0110 	sub.w	r1, r3, #16
 8005f6e:	ea52 0301 	orrs.w	r3, r2, r1
 8005f72:	f000 8681 	beq.w	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	2a01      	cmp	r2, #1
 8005f7c:	f173 0310 	sbcs.w	r3, r3, #16
 8005f80:	f080 86ae 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f88:	1f19      	subs	r1, r3, #4
 8005f8a:	ea52 0301 	orrs.w	r3, r2, r1
 8005f8e:	f000 84b1 	beq.w	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f96:	2a01      	cmp	r2, #1
 8005f98:	f173 0304 	sbcs.w	r3, r3, #4
 8005f9c:	f080 86a0 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa4:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	f000 85aa 	beq.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8005fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fb2:	497e      	ldr	r1, [pc, #504]	@ (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005fb4:	428a      	cmp	r2, r1
 8005fb6:	f173 0300 	sbcs.w	r3, r3, #0
 8005fba:	f080 8691 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	f000 8532 	beq.w	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8005fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd0:	4977      	ldr	r1, [pc, #476]	@ (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8005fd2:	428a      	cmp	r2, r1
 8005fd4:	f173 0300 	sbcs.w	r3, r3, #0
 8005fd8:	f080 8682 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	f000 84bc 	beq.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8005fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fee:	4971      	ldr	r1, [pc, #452]	@ (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8005ff0:	428a      	cmp	r2, r1
 8005ff2:	f173 0300 	sbcs.w	r3, r3, #0
 8005ff6:	f080 8673 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ffe:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006002:	430b      	orrs	r3, r1
 8006004:	f000 85f2 	beq.w	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	496a      	ldr	r1, [pc, #424]	@ (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 800600e:	428a      	cmp	r2, r1
 8006010:	f173 0300 	sbcs.w	r3, r3, #0
 8006014:	f080 8664 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800601c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006020:	430b      	orrs	r3, r1
 8006022:	f000 81e5 	beq.w	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	4964      	ldr	r1, [pc, #400]	@ (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 800602c:	428a      	cmp	r2, r1
 800602e:	f173 0300 	sbcs.w	r3, r3, #0
 8006032:	f080 8655 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800603a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800603e:	430b      	orrs	r3, r1
 8006040:	f000 83cc 	beq.w	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006048:	495d      	ldr	r1, [pc, #372]	@ (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800604a:	428a      	cmp	r2, r1
 800604c:	f173 0300 	sbcs.w	r3, r3, #0
 8006050:	f080 8646 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006058:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800605c:	430b      	orrs	r3, r1
 800605e:	f000 8331 	beq.w	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8006062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006066:	4957      	ldr	r1, [pc, #348]	@ (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006068:	428a      	cmp	r2, r1
 800606a:	f173 0300 	sbcs.w	r3, r3, #0
 800606e:	f080 8637 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006076:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800607a:	430b      	orrs	r3, r1
 800607c:	f000 82bb 	beq.w	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8006080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006084:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006088:	f173 0300 	sbcs.w	r3, r3, #0
 800608c:	f080 8628 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006098:	430b      	orrs	r3, r1
 800609a:	f000 826d 	beq.w	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800609e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80060a6:	428a      	cmp	r2, r1
 80060a8:	f173 0300 	sbcs.w	r3, r3, #0
 80060ac:	f080 8618 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80060b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80060b8:	430b      	orrs	r3, r1
 80060ba:	f000 821e 	beq.w	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80060be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c2:	f242 0101 	movw	r1, #8193	@ 0x2001
 80060c6:	428a      	cmp	r2, r1
 80060c8:	f173 0300 	sbcs.w	r3, r3, #0
 80060cc:	f080 8608 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80060d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80060d8:	430b      	orrs	r3, r1
 80060da:	f000 8137 	beq.w	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80060de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80060e6:	428a      	cmp	r2, r1
 80060e8:	f173 0300 	sbcs.w	r3, r3, #0
 80060ec:	f080 85f8 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80060f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f4:	1f11      	subs	r1, r2, #4
 80060f6:	430b      	orrs	r3, r1
 80060f8:	f000 80d2 	beq.w	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	2a05      	cmp	r2, #5
 8006102:	f173 0300 	sbcs.w	r3, r3, #0
 8006106:	f080 85eb 	bcs.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800610a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610e:	1e51      	subs	r1, r2, #1
 8006110:	430b      	orrs	r3, r1
 8006112:	d006      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006118:	1e91      	subs	r1, r2, #2
 800611a:	430b      	orrs	r3, r1
 800611c:	d06c      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800611e:	f000 bddf 	b.w	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006122:	4b20      	ldr	r3, [pc, #128]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800612e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006134:	f7fe fd7a 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 8006138:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800613a:	f000 bdd4 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800613e:	4b19      	ldr	r3, [pc, #100]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006146:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800614a:	d10a      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006152:	f107 030c 	add.w	r3, r7, #12
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fd24 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006160:	e048      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006162:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b02      	cmp	r3, #2
 800616c:	d10c      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	2b03      	cmp	r3, #3
 8006172:	d109      	bne.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006174:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	4a12      	ldr	r2, [pc, #72]	@ (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006186:	e035      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006194:	d11c      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006198:	2b04      	cmp	r3, #4
 800619a:	d119      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800619c:	4b0b      	ldr	r3, [pc, #44]	@ (80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800619e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a0:	e028      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80061a2:	bf00      	nop
 80061a4:	44020c00 	.word	0x44020c00
 80061a8:	016e3600 	.word	0x016e3600
 80061ac:	20000001 	.word	0x20000001
 80061b0:	10000001 	.word	0x10000001
 80061b4:	08000001 	.word	0x08000001
 80061b8:	04000001 	.word	0x04000001
 80061bc:	00200001 	.word	0x00200001
 80061c0:	00040001 	.word	0x00040001
 80061c4:	00020001 	.word	0x00020001
 80061c8:	03d09000 	.word	0x03d09000
 80061cc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061d0:	4b9f      	ldr	r3, [pc, #636]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80061d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d106      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	d103      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80061e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ea:	e003      	b.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80061f0:	f000 bd79 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80061f4:	f000 bd77 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061f8:	4b95      	ldr	r3, [pc, #596]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80061fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006202:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800620a:	f7fe fcf9 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 800620e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006210:	f000 bd69 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006214:	4b8e      	ldr	r3, [pc, #568]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800621c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006220:	d10a      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	2b08      	cmp	r3, #8
 8006226:	d107      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fcb9 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006236:	e031      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006238:	4b85      	ldr	r3, [pc, #532]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d10c      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	2b18      	cmp	r3, #24
 8006248:	d109      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800624a:	4b81      	ldr	r3, [pc, #516]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a7f      	ldr	r2, [pc, #508]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800625c:	e01e      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800625e:	4b7c      	ldr	r3, [pc, #496]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626a:	d105      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	2b20      	cmp	r3, #32
 8006270:	d102      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8006272:	4b79      	ldr	r3, [pc, #484]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006276:	e011      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006278:	4b75      	ldr	r3, [pc, #468]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800627a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b02      	cmp	r3, #2
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	2b28      	cmp	r3, #40	@ 0x28
 800628a:	d103      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800628c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006292:	e003      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006298:	f000 bd25 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800629c:	f000 bd23 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80062a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80062aa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062b2:	f7fe fca5 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 80062b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80062b8:	f000 bd15 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80062bc:	4b64      	ldr	r3, [pc, #400]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062c8:	d10a      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	2b40      	cmp	r3, #64	@ 0x40
 80062ce:	d107      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d0:	f107 030c 	add.w	r3, r7, #12
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fc65 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062de:	e033      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d10c      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80062f0:	d109      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062f2:	4b57      	ldr	r3, [pc, #348]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	4a55      	ldr	r2, [pc, #340]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006304:	e020      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006306:	4b52      	ldr	r3, [pc, #328]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800630e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006312:	d106      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631a:	d102      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 800631c:	4b4e      	ldr	r3, [pc, #312]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006320:	e012      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006322:	4b4b      	ldr	r3, [pc, #300]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006332:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006336:	d103      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8006338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800633c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006344:	f000 bccf 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006348:	f000 bccd 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800634c:	4b40      	ldr	r3, [pc, #256]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800634e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006352:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006356:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800635e:	f7fe fc7b 	bl	8004c58 <HAL_RCC_GetPCLK3Freq>
 8006362:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006364:	f000 bcbf 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800636e:	d108      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006370:	f107 030c 	add.w	r3, r7, #12
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fc15 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800637e:	f000 bcb2 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006382:	4b33      	ldr	r3, [pc, #204]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d10d      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006394:	d109      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006396:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a8:	e020      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80063aa:	4b29      	ldr	r3, [pc, #164]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b6:	d106      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063be:	d102      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80063c0:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80063c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063c4:	e012      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80063c6:	4b22      	ldr	r3, [pc, #136]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80063c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d107      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80063da:	d103      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80063dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e2:	e003      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80063e8:	f000 bc7d 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80063ec:	f000 bc7b 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80063f0:	4b17      	ldr	r3, [pc, #92]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80063f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d104      	bne.n	800640c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006402:	f7fe fbe1 	bl	8004bc8 <HAL_RCC_GetHCLKFreq>
 8006406:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006408:	f000 bc6d 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800640c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640e:	2b01      	cmp	r3, #1
 8006410:	d104      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006412:	f7fe faad 	bl	8004970 <HAL_RCC_GetSysClockFreq>
 8006416:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8006418:	f000 bc65 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	2b02      	cmp	r3, #2
 8006420:	d108      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006422:	f107 030c 	add.w	r3, r7, #12
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fbbc 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006430:	f000 bc59 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006434:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800643c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006440:	d10e      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	2b03      	cmp	r3, #3
 8006446:	d10b      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8006448:	4b04      	ldr	r3, [pc, #16]	@ (800645c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800644a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800644c:	e02c      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800644e:	bf00      	nop
 8006450:	44020c00 	.word	0x44020c00
 8006454:	03d09000 	.word	0x03d09000
 8006458:	003d0900 	.word	0x003d0900
 800645c:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006460:	4b95      	ldr	r3, [pc, #596]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d10c      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	2b04      	cmp	r3, #4
 8006470:	d109      	bne.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006472:	4b91      	ldr	r3, [pc, #580]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	f003 0303 	and.w	r3, r3, #3
 800647c:	4a8f      	ldr	r2, [pc, #572]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800647e:	fa22 f303 	lsr.w	r3, r2, r3
 8006482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006484:	e010      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006486:	4b8c      	ldr	r3, [pc, #560]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800648e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	2b05      	cmp	r3, #5
 8006498:	d102      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800649a:	4b89      	ldr	r3, [pc, #548]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800649c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800649e:	e003      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80064a4:	f000 bc1f 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80064a8:	f000 bc1d 	b.w	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80064ac:	4b82      	ldr	r3, [pc, #520]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80064b8:	4b7f      	ldr	r3, [pc, #508]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d106      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80064cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064d2:	e011      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80064d4:	4b78      	ldr	r3, [pc, #480]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064e2:	d106      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d103      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80064ea:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80064ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80064f6:	e3f6      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80064f8:	e3f5      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80064fa:	4b6f      	ldr	r3, [pc, #444]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006504:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fe fb78 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 8006510:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006512:	e3e8      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800651a:	d107      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651c:	f107 030c 	add.w	r3, r7, #12
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fb3f 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800652a:	e3dc      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800652c:	4b62      	ldr	r3, [pc, #392]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b02      	cmp	r3, #2
 8006536:	d10d      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800653e:	d109      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006540:	4b5d      	ldr	r3, [pc, #372]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	08db      	lsrs	r3, r3, #3
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	4a5c      	ldr	r2, [pc, #368]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006552:	e010      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006554:	4b58      	ldr	r3, [pc, #352]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800655c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006560:	d106      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006568:	d102      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800656a:	4b55      	ldr	r3, [pc, #340]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800656e:	e002      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006574:	e3b7      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006576:	e3b6      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006578:	4b4f      	ldr	r3, [pc, #316]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800657a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800657e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006582:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800658a:	f7fe fb39 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 800658e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006590:	e3a9      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800659a:	f107 030c 	add.w	r3, r7, #12
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fb00 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065a8:	e39d      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80065aa:	4b43      	ldr	r3, [pc, #268]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d10d      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80065bc:	d109      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065be:	4b3e      	ldr	r3, [pc, #248]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	08db      	lsrs	r3, r3, #3
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	4a3c      	ldr	r2, [pc, #240]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d0:	e010      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80065d2:	4b39      	ldr	r3, [pc, #228]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065de:	d106      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80065e6:	d102      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80065e8:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80065ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80065f2:	e378      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80065f4:	e377      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80065f6:	4b30      	ldr	r3, [pc, #192]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80065f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065fc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006608:	f7fe fafa 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 800660c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800660e:	e36a      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006616:	d107      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fac1 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006626:	e35e      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006628:	4b23      	ldr	r3, [pc, #140]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d10d      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800663a:	d109      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800663c:	4b1e      	ldr	r3, [pc, #120]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	08db      	lsrs	r3, r3, #3
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	4a1d      	ldr	r2, [pc, #116]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800664e:	e34a      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006654:	e347      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8006656:	4b18      	ldr	r3, [pc, #96]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006658:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800665c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d103      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006668:	f7fe faf6 	bl	8004c58 <HAL_RCC_GetPCLK3Freq>
 800666c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800666e:	e33a      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006676:	d107      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fa91 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006686:	e32e      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d10d      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800669a:	d109      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800669c:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	4a05      	ldr	r2, [pc, #20]	@ (80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
 80066ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80066ae:	e31a      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80066b4:	e317      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80066b6:	bf00      	nop
 80066b8:	44020c00 	.word	0x44020c00
 80066bc:	03d09000 	.word	0x03d09000
 80066c0:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80066c4:	4b9b      	ldr	r3, [pc, #620]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80066c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066ca:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80066d6:	d044      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80066d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066da:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80066de:	d879      	bhi.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80066e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e6:	d02d      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ee:	d871      	bhi.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066f6:	d017      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066fe:	d869      	bhi.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800670c:	d004      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800670e:	e061      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006710:	f7fe faa2 	bl	8004c58 <HAL_RCC_GetPCLK3Freq>
 8006714:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8006716:	e060      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006718:	f107 030c 	add.w	r3, r7, #12
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fa41 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006726:	e058      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006728:	4b82      	ldr	r3, [pc, #520]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800672a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b02      	cmp	r3, #2
 8006734:	d103      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8006736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800673a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800673c:	e04d      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006742:	e04a      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006744:	4b7b      	ldr	r3, [pc, #492]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800674a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006752:	d103      	bne.n	800675c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8006754:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800675a:	e03e      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006760:	e03b      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006762:	4b74      	ldr	r3, [pc, #464]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006768:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800676e:	4b71      	ldr	r3, [pc, #452]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	2b02      	cmp	r3, #2
 8006778:	d10c      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006780:	4b6c      	ldr	r3, [pc, #432]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	4a6b      	ldr	r2, [pc, #428]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006792:	e01e      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006794:	4b67      	ldr	r3, [pc, #412]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a0:	d106      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a8:	d102      	bne.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80067aa:	4b64      	ldr	r3, [pc, #400]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ae:	e010      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067b0:	4b60      	ldr	r3, [pc, #384]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067bc:	d106      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c4:	d102      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80067c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ca:	e002      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80067d0:	e003      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80067d2:	e002      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80067d8:	bf00      	nop
          }
        }
        break;
 80067da:	e284      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80067dc:	4b55      	ldr	r3, [pc, #340]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80067de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067e2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067ee:	d044      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067f6:	d879      	bhi.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80067f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067fe:	d02d      	beq.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006806:	d871      	bhi.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800680e:	d017      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006816:	d869      	bhi.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006824:	d004      	beq.n	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8006826:	e061      	b.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006828:	f7fe f9ea 	bl	8004c00 <HAL_RCC_GetPCLK1Freq>
 800682c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800682e:	e060      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff f9b5 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800683e:	e058      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006840:	4b3c      	ldr	r3, [pc, #240]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b02      	cmp	r3, #2
 800684c:	d103      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006854:	e04d      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800685a:	e04a      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800685c:	4b35      	ldr	r3, [pc, #212]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800685e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686a:	d103      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 800686c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8006872:	e03e      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006878:	e03b      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800687a:	4b2e      	ldr	r3, [pc, #184]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800687c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006880:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006886:	4b2b      	ldr	r3, [pc, #172]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d10c      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006898:	4b26      	ldr	r3, [pc, #152]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	08db      	lsrs	r3, r3, #3
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	4a25      	ldr	r2, [pc, #148]	@ (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80068a4:	fa22 f303 	lsr.w	r3, r2, r3
 80068a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068aa:	e01e      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ac:	4b21      	ldr	r3, [pc, #132]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b8:	d106      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068c0:	d102      	bne.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068c2:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c6:	e010      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d4:	d106      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068dc:	d102      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80068de:	4b18      	ldr	r3, [pc, #96]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e2:	e002      	b.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80068e4:	2300      	movs	r3, #0
 80068e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80068e8:	e003      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80068ea:	e002      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80068f0:	bf00      	nop
          }
        }
        break;
 80068f2:	e1f8      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80068f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80068f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006900:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800690c:	d105      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8006914:	4b0a      	ldr	r3, [pc, #40]	@ (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8006916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006918:	e1e5      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800691a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006920:	d110      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006922:	f107 0318 	add.w	r3, r7, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe ffd0 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006930:	e1d9      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006932:	bf00      	nop
 8006934:	44020c00 	.word	0x44020c00
 8006938:	03d09000 	.word	0x03d09000
 800693c:	003d0900 	.word	0x003d0900
 8006940:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800694a:	d107      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff f927 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800695a:	e1c4      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006960:	e1c1      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006962:	4b9d      	ldr	r3, [pc, #628]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	2b04      	cmp	r3, #4
 8006972:	d859      	bhi.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006974:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006991 	.word	0x08006991
 8006980:	080069a1 	.word	0x080069a1
 8006984:	08006a29 	.word	0x08006a29
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b7 	.word	0x080069b7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006990:	f107 0318 	add.w	r3, r7, #24
 8006994:	4618      	mov	r0, r3
 8006996:	f7fe ff99 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800699e:	e046      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7ff f8fd 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80069ae:	e03e      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80069b0:	4b8a      	ldr	r3, [pc, #552]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80069b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80069b4:	e03b      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069b6:	4b88      	ldr	r3, [pc, #544]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80069b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069c2:	4b85      	ldr	r3, [pc, #532]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d10c      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069d4:	4b80      	ldr	r3, [pc, #512]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	08db      	lsrs	r3, r3, #3
 80069da:	f003 0303 	and.w	r3, r3, #3
 80069de:	4a80      	ldr	r2, [pc, #512]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069e6:	e01e      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069e8:	4b7b      	ldr	r3, [pc, #492]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069f4:	d106      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d102      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069fe:	4b79      	ldr	r3, [pc, #484]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a02:	e010      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a04:	4b74      	ldr	r3, [pc, #464]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a10:	d106      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8006a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a18:	d102      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006a1a:	4b73      	ldr	r3, [pc, #460]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a1e:	e002      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006a24:	e003      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8006a26:	e002      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a2c:	bf00      	nop
          }
        }
        break;
 8006a2e:	e15a      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006a30:	4b69      	ldr	r3, [pc, #420]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d022      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8006a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d858      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	2b18      	cmp	r3, #24
 8006a4c:	d019      	beq.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	2b18      	cmp	r3, #24
 8006a52:	d852      	bhi.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d008      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8006a60:	e04b      	b.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a62:	f107 0318 	add.w	r3, r7, #24
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fe ff30 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a70:	e046      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff f894 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a80:	e03e      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006a82:	4b56      	ldr	r3, [pc, #344]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006a86:	e03b      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a88:	4b53      	ldr	r3, [pc, #332]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a8e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a94:	4b50      	ldr	r3, [pc, #320]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d10c      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f003 0303 	and.w	r3, r3, #3
 8006ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ab8:	e01e      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aba:	4b47      	ldr	r3, [pc, #284]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ad0:	4b44      	ldr	r3, [pc, #272]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ad4:	e010      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ad6:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ae2:	d106      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aea:	d102      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006aec:	4b3e      	ldr	r3, [pc, #248]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006af0:	e002      	b.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8006af8:	e002      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006afe:	bf00      	nop
          }
        }
        break;
 8006b00:	e0f1      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006b02:	4b35      	ldr	r3, [pc, #212]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b08:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b14:	d023      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b1c:	d858      	bhi.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b22:	d019      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b28:	d852      	bhi.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	2b40      	cmp	r3, #64	@ 0x40
 8006b34:	d008      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8006b36:	e04b      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b38:	f107 0318 	add.w	r3, r7, #24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fec5 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b46:	e046      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b48:	f107 030c 	add.w	r3, r7, #12
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f829 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b56:	e03e      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006b58:	4b20      	ldr	r3, [pc, #128]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006b5c:	e03b      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b64:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b7c:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	08db      	lsrs	r3, r3, #3
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	4a16      	ldr	r2, [pc, #88]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b8e:	e01e      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b90:	4b11      	ldr	r3, [pc, #68]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b9c:	d106      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba4:	d102      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8006ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006baa:	e010      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bac:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bc0:	d102      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bc2:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc6:	e002      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006bce:	e002      	b.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8006bd4:	bf00      	nop
          }
        }
        break;
 8006bd6:	e086      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006bd8:	44020c00 	.word	0x44020c00
 8006bdc:	00bb8000 	.word	0x00bb8000
 8006be0:	03d09000 	.word	0x03d09000
 8006be4:	003d0900 	.word	0x003d0900
 8006be8:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006bec:	4b40      	ldr	r3, [pc, #256]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c04:	d105      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8006c0c:	4b39      	ldr	r3, [pc, #228]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c10:	e031      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006c12:	4b37      	ldr	r3, [pc, #220]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1e:	d10a      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	2b10      	cmp	r3, #16
 8006c24:	d107      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fe4e 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c34:	e01f      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006c36:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d106      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d103      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c50:	e011      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006c52:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c60:	d106      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	2b30      	cmp	r3, #48	@ 0x30
 8006c66:	d103      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8006c68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006c74:	e037      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006c76:	e036      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006c78:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006c7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c7e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c82:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c86:	2b10      	cmp	r3, #16
 8006c88:	d107      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8a:	f107 0318 	add.w	r3, r7, #24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fe1c 	bl	80058cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8006c98:	e025      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ca6:	d10a      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8006ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe ff76 	bl	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cbc:	e00f      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cca:	d105      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	2b30      	cmp	r3, #48	@ 0x30
 8006cd0:	d102      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8006cd2:	4b08      	ldr	r3, [pc, #32]	@ (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8006cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cd6:	e002      	b.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8006cdc:	e003      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006cde:	e002      	b.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006ce4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3730      	adds	r7, #48	@ 0x30
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	44020c00 	.word	0x44020c00
 8006cf4:	02dc6c00 	.word	0x02dc6c00

08006cf8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006d00:	4b48      	ldr	r3, [pc, #288]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a47      	ldr	r2, [pc, #284]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d0c:	f7fb fe80 	bl	8002a10 <HAL_GetTick>
 8006d10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d12:	e008      	b.n	8006d26 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d14:	f7fb fe7c 	bl	8002a10 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e07a      	b.n	8006e1c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d26:	4b3f      	ldr	r3, [pc, #252]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006d32:	4b3c      	ldr	r3, [pc, #240]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6811      	ldr	r1, [r2, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6852      	ldr	r2, [r2, #4]
 8006d46:	0212      	lsls	r2, r2, #8
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	4936      	ldr	r1, [pc, #216]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	025b      	lsls	r3, r3, #9
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	061b      	lsls	r3, r3, #24
 8006d7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d80:	4928      	ldr	r1, [pc, #160]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006d86:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8a:	f023 020c 	bic.w	r2, r3, #12
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	4924      	ldr	r1, [pc, #144]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006d98:	4b22      	ldr	r3, [pc, #136]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9c:	f023 0220 	bic.w	r2, r3, #32
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	491f      	ldr	r1, [pc, #124]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006daa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	491c      	ldr	r1, [pc, #112]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006db8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	4a19      	ldr	r2, [pc, #100]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dbe:	f023 0310 	bic.w	r3, r3, #16
 8006dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006dc4:	4b17      	ldr	r3, [pc, #92]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dcc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6a12      	ldr	r2, [r2, #32]
 8006dd4:	00d2      	lsls	r2, r2, #3
 8006dd6:	4913      	ldr	r1, [pc, #76]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006ddc:	4b11      	ldr	r3, [pc, #68]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	4a10      	ldr	r2, [pc, #64]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006de2:	f043 0310 	orr.w	r3, r3, #16
 8006de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006de8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a0d      	ldr	r2, [pc, #52]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006dee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006df2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006df4:	f7fb fe0c 	bl	8002a10 <HAL_GetTick>
 8006df8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dfa:	e008      	b.n	8006e0e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dfc:	f7fb fe08 	bl	8002a10 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e006      	b.n	8006e1c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <RCCEx_PLL2_Config+0x12c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0

}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	44020c00 	.word	0x44020c00

08006e28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0e9      	b.n	800700e <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a74      	ldr	r2, [pc, #464]	@ (8007018 <HAL_SPI_Init+0x1f0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d105      	bne.n	8006e56 <HAL_SPI_Init+0x2e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b0f      	cmp	r3, #15
 8006e50:	d901      	bls.n	8006e56 <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e0db      	b.n	800700e <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fba6 	bl	80075a8 <SPI_GetPacketSize>
 8006e5c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	@ (8007018 <HAL_SPI_Init+0x1f0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d102      	bne.n	8006e6e <HAL_SPI_Init+0x46>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d811      	bhi.n	8006e92 <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006e72:	4a6a      	ldr	r2, [pc, #424]	@ (800701c <HAL_SPI_Init+0x1f4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d009      	beq.n	8006e8c <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a68      	ldr	r2, [pc, #416]	@ (8007020 <HAL_SPI_Init+0x1f8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_SPI_Init+0x64>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a67      	ldr	r2, [pc, #412]	@ (8007024 <HAL_SPI_Init+0x1fc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d104      	bne.n	8006e96 <HAL_SPI_Init+0x6e>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d901      	bls.n	8006e96 <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e0bb      	b.n	800700e <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7fa ffc6 	bl	8001e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006ed2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006edc:	d119      	bne.n	8006f12 <HAL_SPI_Init+0xea>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee6:	d103      	bne.n	8006ef0 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10c      	bne.n	8006f12 <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006efc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f00:	d107      	bne.n	8006f12 <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00f      	beq.n	8006f3e <HAL_SPI_Init+0x116>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d90b      	bls.n	8006f3e <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e007      	b.n	8006f4e <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69da      	ldr	r2, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	431a      	orrs	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f60:	ea42 0103 	orr.w	r1, r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fba:	ea42 0103 	orr.w	r1, r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	deaddead 	.word	0xdeaddead
 800701c:	40013000 	.word	0x40013000
 8007020:	40003800 	.word	0x40003800
 8007024:	40003c00 	.word	0x40003c00

08007028 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	@ 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007040:	6a3a      	ldr	r2, [r7, #32]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4013      	ands	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007050:	2300      	movs	r3, #0
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800705a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3330      	adds	r3, #48	@ 0x30
 8007062:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800706a:	2b00      	cmp	r3, #0
 800706c:	d010      	beq.n	8007090 <HAL_SPI_IRQHandler+0x68>
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699a      	ldr	r2, [r3, #24]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007086:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f9c9 	bl	8007420 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800708e:	e19a      	b.n	80073c6 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d113      	bne.n	80070c2 <HAL_SPI_IRQHandler+0x9a>
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10e      	bne.n	80070c2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d009      	beq.n	80070c2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
    handled = 1UL;
 80070be:	2301      	movs	r3, #1
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d10f      	bne.n	80070ec <HAL_SPI_IRQHandler+0xc4>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d105      	bne.n	80070ec <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
    handled = 1UL;
 80070e8:	2301      	movs	r3, #1
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10f      	bne.n	8007116 <HAL_SPI_IRQHandler+0xee>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
    handled = 1UL;
 8007112:	2301      	movs	r3, #1
 8007114:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8007116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	f040 814f 	bne.w	80073bc <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 808b 	beq.w	8007240 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0208 	orr.w	r2, r2, #8
 8007138:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0210 	orr.w	r2, r2, #16
 8007148:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007158:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0208 	bic.w	r2, r2, #8
 8007168:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d13d      	bne.n	80071f4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007178:	e036      	b.n	80071e8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	2b0f      	cmp	r3, #15
 8007180:	d90b      	bls.n	800719a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800718a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800718c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007192:	1d1a      	adds	r2, r3, #4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007198:	e01d      	b.n	80071d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b07      	cmp	r3, #7
 80071a0:	d90b      	bls.n	80071ba <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	8812      	ldrh	r2, [r2, #0]
 80071aa:	b292      	uxth	r2, r2
 80071ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b2:	1c9a      	adds	r2, r3, #2
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80071b8:	e00d      	b.n	80071d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c6:	7812      	ldrb	r2, [r2, #0]
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1c2      	bne.n	800717a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f937 	bl	8007468 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8fd 	bl	800740c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007212:	e0d8      	b.n	80073c6 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007214:	7cfb      	ldrb	r3, [r7, #19]
 8007216:	2b05      	cmp	r3, #5
 8007218:	d103      	bne.n	8007222 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8ec 	bl	80073f8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007220:	e0ce      	b.n	80073c0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007222:	7cfb      	ldrb	r3, [r7, #19]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d103      	bne.n	8007230 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8db 	bl	80073e4 <HAL_SPI_RxCpltCallback>
    return;
 800722e:	e0c7      	b.n	80073c0 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007230:	7cfb      	ldrb	r3, [r7, #19]
 8007232:	2b03      	cmp	r3, #3
 8007234:	f040 80c4 	bne.w	80073c0 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f8c9 	bl	80073d0 <HAL_SPI_TxCpltCallback>
    return;
 800723e:	e0bf      	b.n	80073c0 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80bd 	beq.w	80073c6 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00f      	beq.n	8007276 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800725c:	f043 0204 	orr.w	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007274:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00f      	beq.n	80072a0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800729e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00f      	beq.n	80072ca <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072b0:	f043 0208 	orr.w	r2, r3, #8
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	699a      	ldr	r2, [r3, #24]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00f      	beq.n	80072f4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0220 	orr.w	r2, r2, #32
 80072f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d062      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800731c:	f023 0303 	bic.w	r3, r3, #3
 8007320:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007328:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800732c:	d13e      	bne.n	80073ac <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800733c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007344:	2b00      	cmp	r3, #0
 8007346:	d015      	beq.n	8007374 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734e:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <HAL_SPI_IRQHandler+0x3a4>)
 8007350:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007358:	4618      	mov	r0, r3
 800735a:	f7fb fd71 	bl	8002e40 <HAL_DMA_Abort_IT>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800736a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d022      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007384:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <HAL_SPI_IRQHandler+0x3a4>)
 8007386:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738e:	4618      	mov	r0, r3
 8007390:	f7fb fd56 	bl	8002e40 <HAL_DMA_Abort_IT>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
#if defined(HAL_DMA_MODULE_ENABLED)
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }
    return;
 80073aa:	e00b      	b.n	80073c4 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f829 	bl	800740c <HAL_SPI_ErrorCallback>
    return;
 80073ba:	e003      	b.n	80073c4 <HAL_SPI_IRQHandler+0x39c>
    return;
 80073bc:	bf00      	nop
 80073be:	e002      	b.n	80073c6 <HAL_SPI_IRQHandler+0x39e>
    return;
 80073c0:	bf00      	nop
 80073c2:	e000      	b.n	80073c6 <HAL_SPI_IRQHandler+0x39e>
    return;
 80073c4:	bf00      	nop
  }
}
 80073c6:	3728      	adds	r7, #40	@ 0x28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	08007435 	.word	0x08007435

080073d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007440:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff ffd6 	bl	800740c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0208 	orr.w	r2, r2, #8
 8007486:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0210 	orr.w	r2, r2, #16
 8007496:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0201 	bic.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80074ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d014      	beq.n	8007502 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00f      	beq.n	8007502 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0220 	orr.w	r2, r2, #32
 8007500:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b03      	cmp	r3, #3
 800750c:	d014      	beq.n	8007538 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00f      	beq.n	8007538 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800751e:	f043 0204 	orr.w	r2, r3, #4
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699a      	ldr	r2, [r3, #24]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007536:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00f      	beq.n	8007562 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007548:	f043 0201 	orr.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007560:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800758a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	3307      	adds	r3, #7
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e049      	b.n	8007684 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fa fe3d 	bl	8002284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f000 fa01 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	d001      	beq.n	80076a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e03b      	b.n	800771c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0201 	orr.w	r2, r2, #1
 80076ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a19      	ldr	r2, [pc, #100]	@ (8007728 <HAL_TIM_Base_Start_IT+0x9c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x4e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d004      	beq.n	80076da <HAL_TIM_Base_Start_IT+0x4e>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a15      	ldr	r2, [pc, #84]	@ (800772c <HAL_TIM_Base_Start_IT+0xa0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d115      	bne.n	8007706 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <HAL_TIM_Base_Start_IT+0xa4>)
 80076e2:	4013      	ands	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d015      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x8c>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f2:	d011      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0201 	orr.w	r2, r2, #1
 8007702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	e008      	b.n	8007718 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0201 	orr.w	r2, r2, #1
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e000      	b.n	800771a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007718:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012c00 	.word	0x40012c00
 800772c:	40000400 	.word	0x40000400
 8007730:	00010007 	.word	0x00010007

08007734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d020      	beq.n	8007798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01b      	beq.n	8007798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f06f 0202 	mvn.w	r2, #2
 8007768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f931 	bl	80079e6 <HAL_TIM_IC_CaptureCallback>
 8007784:	e005      	b.n	8007792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f923 	bl	80079d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f934 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 0304 	and.w	r3, r3, #4
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d020      	beq.n	80077e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01b      	beq.n	80077e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0204 	mvn.w	r2, #4
 80077b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f90b 	bl	80079e6 <HAL_TIM_IC_CaptureCallback>
 80077d0:	e005      	b.n	80077de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8fd 	bl	80079d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f90e 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0208 	mvn.w	r2, #8
 8007800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2204      	movs	r2, #4
 8007806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f8e5 	bl	80079e6 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8d7 	bl	80079d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8e8 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b00      	cmp	r3, #0
 8007838:	d020      	beq.n	800787c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0210 	mvn.w	r2, #16
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2208      	movs	r2, #8
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f8bf 	bl	80079e6 <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f8b1 	bl	80079d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8c2 	bl	80079fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00c      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0201 	mvn.w	r2, #1
 8007898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fa fd3a 	bl	8002314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00c      	beq.n	80078ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f983 	bl	8007bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00c      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f97b 	bl	8007be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00c      	beq.n	8007916 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d007      	beq.n	8007916 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800790e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f87c 	bl	8007a0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00c      	beq.n	800793a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	d007      	beq.n	800793a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f06f 0220 	mvn.w	r2, #32
 8007932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f943 	bl	8007bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00c      	beq.n	800795e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f94f 	bl	8007bfc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00c      	beq.n	8007982 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f947 	bl	8007c10 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00c      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800799e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f93f 	bl	8007c24 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f937 	bl	8007c38 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b083      	sub	sp, #12
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a16:	bf00      	nop
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
	...

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae8 <TIM_Base_SetConfig+0xc4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d007      	beq.n	8007a4c <TIM_Base_SetConfig+0x28>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a42:	d003      	beq.n	8007a4c <TIM_Base_SetConfig+0x28>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a29      	ldr	r2, [pc, #164]	@ (8007aec <TIM_Base_SetConfig+0xc8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d108      	bne.n	8007a5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a21      	ldr	r2, [pc, #132]	@ (8007ae8 <TIM_Base_SetConfig+0xc4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d007      	beq.n	8007a76 <TIM_Base_SetConfig+0x52>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a6c:	d003      	beq.n	8007a76 <TIM_Base_SetConfig+0x52>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <TIM_Base_SetConfig+0xc8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae8 <TIM_Base_SetConfig+0xc4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d103      	bne.n	8007abc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f023 0201 	bic.w	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	611a      	str	r2, [r3, #16]
  }
}
 8007ada:	bf00      	nop
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40000400 	.word	0x40000400

08007af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e051      	b.n	8007bac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a22      	ldr	r2, [pc, #136]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d108      	bne.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a14      	ldr	r2, [pc, #80]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b74:	d004      	beq.n	8007b80 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a10      	ldr	r2, [pc, #64]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d10c      	bne.n	8007b9a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	689b      	ldr	r3, [r3, #8]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40012c00 	.word	0x40012c00
 8007bbc:	40000400 	.word	0x40000400

08007bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b094      	sub	sp, #80	@ 0x50
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e0cb      	b.n	8007df6 <HAL_UART_Init+0x1aa>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7fa fc29 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2224      	movs	r2, #36	@ 0x24
 8007c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0201 	bic.w	r2, r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fe80 	bl	800899c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fcff 	bl	80086a0 <UART_SetConfig>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d101      	bne.n	8007cac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e0a4      	b.n	8007df6 <HAL_UART_Init+0x1aa>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cca:	609a      	str	r2, [r3, #8]

  /* Enable the UART Transmit Complete Interrupt */
            ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <HAL_UART_Init+0x80>

            /* Computation of UART mask to apply to RDR register */
            UART_MASK_COMPUTATION(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d06:	d10e      	bne.n	8007d26 <HAL_UART_Init+0xda>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <HAL_UART_Init+0xd0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d1a:	e02d      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d24:	e028      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10d      	bne.n	8007d4a <HAL_UART_Init+0xfe>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <HAL_UART_Init+0xf4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	22ff      	movs	r2, #255	@ 0xff
 8007d3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d3e:	e01b      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	227f      	movs	r2, #127	@ 0x7f
 8007d44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d48:	e016      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d52:	d10d      	bne.n	8007d70 <HAL_UART_Init+0x124>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <HAL_UART_Init+0x11a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	227f      	movs	r2, #127	@ 0x7f
 8007d60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d64:	e008      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	223f      	movs	r2, #63	@ 0x3f
 8007d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007d6e:	e003      	b.n	8007d78 <HAL_UART_Init+0x12c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
            ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	f043 0320 	orr.w	r3, r3, #32
 8007d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e6      	bne.n	8007d78 <HAL_UART_Init+0x12c>
            /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
            ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3308      	adds	r3, #8
 8007dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dca:	61ba      	str	r2, [r7, #24]
 8007dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dce:	6979      	ldr	r1, [r7, #20]
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	e841 2300 	strex	r3, r2, [r1]
 8007dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e5      	bne.n	8007daa <HAL_UART_Init+0x15e>

  __HAL_UART_ENABLE(huart);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f042 0201 	orr.w	r2, r2, #1
 8007dec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 fe76 	bl	8008ae0 <UART_CheckIdleState>
 8007df4:	4603      	mov	r3, r0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3750      	adds	r7, #80	@ 0x50
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b08a      	sub	sp, #40	@ 0x28
 8007e02:	af02      	add	r7, sp, #8
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	603b      	str	r3, [r7, #0]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	f040 808b 	bne.w	8007f30 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_UART_Transmit+0x28>
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e083      	b.n	8007f32 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e34:	2b80      	cmp	r3, #128	@ 0x80
 8007e36:	d107      	bne.n	8007e48 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e46:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2221      	movs	r2, #33	@ 0x21
 8007e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e58:	f7fa fdda 	bl	8002a10 <HAL_GetTick>
 8007e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	88fa      	ldrh	r2, [r7, #6]
 8007e6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e76:	d108      	bne.n	8007e8a <HAL_UART_Transmit+0x8c>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	61bb      	str	r3, [r7, #24]
 8007e88:	e003      	b.n	8007e92 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e92:	e030      	b.n	8007ef6 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 fec8 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e03d      	b.n	8007f32 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10b      	bne.n	8007ed4 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	3302      	adds	r3, #2
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e007      	b.n	8007ee4 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	781a      	ldrb	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1c8      	bne.n	8007e94 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2140      	movs	r1, #64	@ 0x40
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fe91 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e006      	b.n	8007f32 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3720      	adds	r7, #32
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b091      	sub	sp, #68	@ 0x44
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	f040 8088 	bne.w	8008066 <HAL_UART_Transmit_IT+0x12a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <HAL_UART_Transmit_IT+0x26>
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e080      	b.n	8008068 <HAL_UART_Transmit_IT+0x12c>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d107      	bne.n	8007f84 <HAL_UART_Transmit_IT+0x48>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f82:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->pTxBuffPtr  = pData;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	88fa      	ldrh	r2, [r7, #6]
 8007f8e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2221      	movs	r2, #33	@ 0x21
 8007fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb8:	d12a      	bne.n	8008010 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc2:	d107      	bne.n	8007fd4 <HAL_UART_Transmit_IT+0x98>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <HAL_UART_Transmit_IT+0x98>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4a29      	ldr	r2, [pc, #164]	@ (8008074 <HAL_UART_Transmit_IT+0x138>)
 8007fd0:	679a      	str	r2, [r3, #120]	@ 0x78
 8007fd2:	e002      	b.n	8007fda <HAL_UART_Transmit_IT+0x9e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4a28      	ldr	r2, [pc, #160]	@ (8008078 <HAL_UART_Transmit_IT+0x13c>)
 8007fd8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ffa:	637a      	str	r2, [r7, #52]	@ 0x34
 8007ffc:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e5      	bne.n	8007fda <HAL_UART_Transmit_IT+0x9e>
 800800e:	e028      	b.n	8008062 <HAL_UART_Transmit_IT+0x126>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008018:	d107      	bne.n	800802a <HAL_UART_Transmit_IT+0xee>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d103      	bne.n	800802a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a15      	ldr	r2, [pc, #84]	@ (800807c <HAL_UART_Transmit_IT+0x140>)
 8008026:	679a      	str	r2, [r3, #120]	@ 0x78
 8008028:	e002      	b.n	8008030 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4a14      	ldr	r2, [pc, #80]	@ (8008080 <HAL_UART_Transmit_IT+0x144>)
 800802e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	613b      	str	r3, [r7, #16]
   return(result);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	69f9      	ldr	r1, [r7, #28]
 8008054:	6a3a      	ldr	r2, [r7, #32]
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	61bb      	str	r3, [r7, #24]
   return(result);
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e6      	bne.n	8008030 <HAL_UART_Transmit_IT+0xf4>
    }

    return HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	e000      	b.n	8008068 <HAL_UART_Transmit_IT+0x12c>
  }
  else
  {
    return HAL_BUSY;
 8008066:	2302      	movs	r3, #2
  }
}
 8008068:	4618      	mov	r0, r3
 800806a:	3744      	adds	r7, #68	@ 0x44
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	08009059 	.word	0x08009059
 8008078:	08008f79 	.word	0x08008f79
 800807c:	08008eb7 	.word	0x08008eb7
 8008080:	08008dff 	.word	0x08008dff

08008084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ae      	sub	sp, #184	@ 0xb8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80080b2:	4013      	ands	r3, r2
 80080b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 80080b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11b      	bne.n	80080f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080c4:	f003 0320 	and.w	r3, r3, #32
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d015      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d009      	beq.n	80080f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 82ac 	beq.w	8008646 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
      }
      return;
 80080f6:	e2a6      	b.n	8008646 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80fd 	beq.w	80082fc <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008102:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008106:	4b7a      	ldr	r3, [pc, #488]	@ (80082f0 <HAL_UART_IRQHandler+0x26c>)
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800810e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008112:	4b78      	ldr	r3, [pc, #480]	@ (80082f4 <HAL_UART_IRQHandler+0x270>)
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80f0 	beq.w	80082fc <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800811c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d011      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
 8008128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800812c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d011      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
 8008158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2202      	movs	r2, #2
 800816a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800817c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d011      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
 8008188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2204      	movs	r2, #4
 800819a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a2:	f043 0202 	orr.w	r2, r3, #2
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d017      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d105      	bne.n	80081d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081c8:	4b49      	ldr	r3, [pc, #292]	@ (80082f0 <HAL_UART_IRQHandler+0x26c>)
 80081ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2208      	movs	r2, #8
 80081d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081de:	f043 0208 	orr.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d012      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
 80081f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80081f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f043 0220 	orr.w	r2, r3, #32
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8212 	beq.w	800864a <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d105      	bne.n	800824a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800823e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008260:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800826e:	2b40      	cmp	r3, #64	@ 0x40
 8008270:	d005      	beq.n	800827e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008272:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800827a:	2b00      	cmp	r3, #0
 800827c:	d02e      	beq.n	80082dc <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fd45 	bl	8008d0e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828e:	2b40      	cmp	r3, #64	@ 0x40
 8008290:	d120      	bne.n	80082d4 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008298:	2b00      	cmp	r3, #0
 800829a:	d017      	beq.n	80082cc <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082a2:	4a15      	ldr	r2, [pc, #84]	@ (80082f8 <HAL_UART_IRQHandler+0x274>)
 80082a4:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fa fdc7 	bl	8002e40 <HAL_DMA_Abort_IT>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d019      	beq.n	80082ec <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80082c6:	4610      	mov	r0, r2
 80082c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ca:	e00f      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f9d1 	bl	8008674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d2:	e00b      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f9cd 	bl	8008674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082da:	e007      	b.n	80082ec <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f9c9 	bl	8008674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80082ea:	e1ae      	b.n	800864a <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	bf00      	nop
    return;
 80082ee:	e1ac      	b.n	800864a <HAL_UART_IRQHandler+0x5c6>
 80082f0:	10000001 	.word	0x10000001
 80082f4:	04000120 	.word	0x04000120
 80082f8:	08008ddb 	.word	0x08008ddb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008300:	2b01      	cmp	r3, #1
 8008302:	f040 8142 	bne.w	800858a <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800830a:	f003 0310 	and.w	r3, r3, #16
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 813b 	beq.w	800858a <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008314:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 8134 	beq.w	800858a <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2210      	movs	r2, #16
 8008328:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008334:	2b40      	cmp	r3, #64	@ 0x40
 8008336:	f040 80aa 	bne.w	800848e <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008344:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8008348:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8084 	beq.w	800845a <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008358:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800835c:	429a      	cmp	r2, r3
 800835e:	d27c      	bcs.n	800845a <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008366:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008372:	2b81      	cmp	r3, #129	@ 0x81
 8008374:	d060      	beq.n	8008438 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800837e:	e853 3f00 	ldrex	r3, [r3]
 8008382:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008386:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800838a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008398:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800839c:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80083a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80083aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e2      	bne.n	8008376 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80083c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80083d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80083d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e3      	bne.n	80083b0 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008406:	f023 0310 	bic.w	r3, r3, #16
 800840a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800841a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800841e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e4      	bne.n	80083f6 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008432:	4618      	mov	r0, r3
 8008434:	f7fa fc88 	bl	8002d48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800844a:	b29b      	uxth	r3, r3
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	b29b      	uxth	r3, r3
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f918 	bl	8008688 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008458:	e0f9      	b.n	800864e <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008460:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8008464:	429a      	cmp	r2, r3
 8008466:	f040 80f2 	bne.w	800864e <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008472:	2b81      	cmp	r3, #129	@ 0x81
 8008474:	f040 80eb 	bne.w	800864e <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f8fe 	bl	8008688 <HAL_UARTEx_RxEventCallback>
      return;
 800848c:	e0df      	b.n	800864e <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800849a:	b29b      	uxth	r3, r3
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80d1 	beq.w	8008652 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 80084b0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80cc 	beq.w	8008652 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80084de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e4      	bne.n	80084ba <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	623b      	str	r3, [r7, #32]
   return(result);
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3308      	adds	r3, #8
 8008514:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008518:	633a      	str	r2, [r7, #48]	@ 0x30
 800851a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800851e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e1      	bne.n	80084f0 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	60fb      	str	r3, [r7, #12]
   return(result);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 0310 	bic.w	r3, r3, #16
 8008554:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	617b      	str	r3, [r7, #20]
   return(result);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e4      	bne.n	8008540 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2202      	movs	r2, #2
 800857a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800857c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f880 	bl	8008688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008588:	e063      	b.n	8008652 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800858a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800858e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <HAL_UART_IRQHandler+0x530>
 8008596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800859a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fdf3 	bl	8009198 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085b2:	e051      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d014      	beq.n	80085ea <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d105      	bne.n	80085d8 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d008      	beq.n	80085ea <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d03a      	beq.n	8008656 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	4798      	blx	r3
    }
    return;
 80085e8:	e035      	b.n	8008656 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80085ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_UART_IRQHandler+0x586>
 80085f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80085fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fd9d 	bl	8009142 <UART_EndTransmit_IT>
    return;
 8008608:	e026      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800860a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800860e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_UART_IRQHandler+0x5a6>
 8008616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800861a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fdcc 	bl	80091c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008628:	e016      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800862a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800862e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d010      	beq.n	8008658 <HAL_UART_IRQHandler+0x5d4>
 8008636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800863a:	2b00      	cmp	r3, #0
 800863c:	da0c      	bge.n	8008658 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fdb4 	bl	80091ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008644:	e008      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008646:	bf00      	nop
 8008648:	e006      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
    return;
 800864a:	bf00      	nop
 800864c:	e004      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
      return;
 800864e:	bf00      	nop
 8008650:	e002      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
      return;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_UART_IRQHandler+0x5d4>
    return;
 8008656:	bf00      	nop
  }
}
 8008658:	37b8      	adds	r7, #184	@ 0xb8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086a4:	b094      	sub	sp, #80	@ 0x50
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	431a      	orrs	r2, r3
 80086c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	498a      	ldr	r1, [pc, #552]	@ (80088f8 <UART_SetConfig+0x258>)
 80086d0:	4019      	ands	r1, r3
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086d8:	430b      	orrs	r3, r1
 80086da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e8:	68d9      	ldr	r1, [r3, #12]
 80086ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	ea40 0301 	orr.w	r3, r0, r1
 80086f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	4b7f      	ldr	r3, [pc, #508]	@ (80088fc <UART_SetConfig+0x25c>)
 8008700:	429a      	cmp	r2, r3
 8008702:	d004      	beq.n	800870e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800870a:	4313      	orrs	r3, r2
 800870c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800870e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008718:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800871c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008722:	430b      	orrs	r3, r1
 8008724:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872c:	f023 000f 	bic.w	r0, r3, #15
 8008730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008732:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	ea40 0301 	orr.w	r3, r0, r1
 800873c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b6f      	ldr	r3, [pc, #444]	@ (8008900 <UART_SetConfig+0x260>)
 8008744:	429a      	cmp	r2, r3
 8008746:	d102      	bne.n	800874e <UART_SetConfig+0xae>
 8008748:	2301      	movs	r3, #1
 800874a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800874c:	e01a      	b.n	8008784 <UART_SetConfig+0xe4>
 800874e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b6c      	ldr	r3, [pc, #432]	@ (8008904 <UART_SetConfig+0x264>)
 8008754:	429a      	cmp	r2, r3
 8008756:	d102      	bne.n	800875e <UART_SetConfig+0xbe>
 8008758:	2302      	movs	r3, #2
 800875a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800875c:	e012      	b.n	8008784 <UART_SetConfig+0xe4>
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b69      	ldr	r3, [pc, #420]	@ (8008908 <UART_SetConfig+0x268>)
 8008764:	429a      	cmp	r2, r3
 8008766:	d102      	bne.n	800876e <UART_SetConfig+0xce>
 8008768:	2304      	movs	r3, #4
 800876a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876c:	e00a      	b.n	8008784 <UART_SetConfig+0xe4>
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b62      	ldr	r3, [pc, #392]	@ (80088fc <UART_SetConfig+0x25c>)
 8008774:	429a      	cmp	r2, r3
 8008776:	d103      	bne.n	8008780 <UART_SetConfig+0xe0>
 8008778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800877c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800877e:	e001      	b.n	8008784 <UART_SetConfig+0xe4>
 8008780:	2300      	movs	r3, #0
 8008782:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	4b5c      	ldr	r3, [pc, #368]	@ (80088fc <UART_SetConfig+0x25c>)
 800878a:	429a      	cmp	r2, r3
 800878c:	d171      	bne.n	8008872 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800878e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008790:	2200      	movs	r2, #0
 8008792:	623b      	str	r3, [r7, #32]
 8008794:	627a      	str	r2, [r7, #36]	@ 0x24
 8008796:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800879a:	f7fd fb6f 	bl	8005e7c <HAL_RCCEx_GetPeriphCLKFreq>
 800879e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80087a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80e2 	beq.w	800896c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ac:	4a57      	ldr	r2, [pc, #348]	@ (800890c <UART_SetConfig+0x26c>)
 80087ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ba:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	4413      	add	r3, r2
 80087c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d305      	bcc.n	80087d8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d903      	bls.n	80087e0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80087de:	e0c5      	b.n	800896c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e2:	2200      	movs	r2, #0
 80087e4:	61bb      	str	r3, [r7, #24]
 80087e6:	61fa      	str	r2, [r7, #28]
 80087e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	4a47      	ldr	r2, [pc, #284]	@ (800890c <UART_SetConfig+0x26c>)
 80087ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2200      	movs	r2, #0
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	617a      	str	r2, [r7, #20]
 80087fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008802:	f7f7 fd51 	bl	80002a8 <__aeabi_uldivmod>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	020b      	lsls	r3, r1, #8
 8008818:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800881c:	0202      	lsls	r2, r0, #8
 800881e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008820:	6849      	ldr	r1, [r1, #4]
 8008822:	0849      	lsrs	r1, r1, #1
 8008824:	2000      	movs	r0, #0
 8008826:	460c      	mov	r4, r1
 8008828:	4605      	mov	r5, r0
 800882a:	eb12 0804 	adds.w	r8, r2, r4
 800882e:	eb43 0905 	adc.w	r9, r3, r5
 8008832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	60bb      	str	r3, [r7, #8]
 800883a:	60fa      	str	r2, [r7, #12]
 800883c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	f7f7 fd30 	bl	80002a8 <__aeabi_uldivmod>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4613      	mov	r3, r2
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008856:	d308      	bcc.n	800886a <UART_SetConfig+0x1ca>
 8008858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800885e:	d204      	bcs.n	800886a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8008860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008866:	60da      	str	r2, [r3, #12]
 8008868:	e080      	b.n	800896c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008870:	e07c      	b.n	800896c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800887a:	d149      	bne.n	8008910 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800887c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800887e:	2200      	movs	r2, #0
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008888:	f7fd faf8 	bl	8005e7c <HAL_RCCEx_GetPeriphCLKFreq>
 800888c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800888e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d06b      	beq.n	800896c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008898:	4a1c      	ldr	r2, [pc, #112]	@ (800890c <UART_SetConfig+0x26c>)
 800889a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889e:	461a      	mov	r2, r3
 80088a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80088a6:	005a      	lsls	r2, r3, #1
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	441a      	add	r2, r3
 80088b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088bc:	2b0f      	cmp	r3, #15
 80088be:	d916      	bls.n	80088ee <UART_SetConfig+0x24e>
 80088c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c6:	d212      	bcs.n	80088ee <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f023 030f 	bic.w	r3, r3, #15
 80088d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	085b      	lsrs	r3, r3, #1
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	b29a      	uxth	r2, r3
 80088de:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80088e0:	4313      	orrs	r3, r2
 80088e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80088e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80088ea:	60da      	str	r2, [r3, #12]
 80088ec:	e03e      	b.n	800896c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088f4:	e03a      	b.n	800896c <UART_SetConfig+0x2cc>
 80088f6:	bf00      	nop
 80088f8:	cfff69f3 	.word	0xcfff69f3
 80088fc:	44002400 	.word	0x44002400
 8008900:	40013800 	.word	0x40013800
 8008904:	40004400 	.word	0x40004400
 8008908:	40004800 	.word	0x40004800
 800890c:	0800a044 	.word	0x0800a044
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008912:	2200      	movs	r2, #0
 8008914:	469a      	mov	sl, r3
 8008916:	4693      	mov	fp, r2
 8008918:	4650      	mov	r0, sl
 800891a:	4659      	mov	r1, fp
 800891c:	f7fd faae 	bl	8005e7c <HAL_RCCEx_GetPeriphCLKFreq>
 8008920:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d021      	beq.n	800896c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	4a1a      	ldr	r2, [pc, #104]	@ (8008998 <UART_SetConfig+0x2f8>)
 800892e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008932:	461a      	mov	r2, r3
 8008934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008936:	fbb3 f2f2 	udiv	r2, r3, r2
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	085b      	lsrs	r3, r3, #1
 8008940:	441a      	add	r2, r3
 8008942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	fbb2 f3f3 	udiv	r3, r2, r3
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800894c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800894e:	2b0f      	cmp	r3, #15
 8008950:	d909      	bls.n	8008966 <UART_SetConfig+0x2c6>
 8008952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008958:	d205      	bcs.n	8008966 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800895a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895c:	b29a      	uxth	r2, r3
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60da      	str	r2, [r3, #12]
 8008964:	e002      	b.n	800896c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	2201      	movs	r2, #1
 8008970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	2201      	movs	r2, #1
 8008978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800897c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897e:	2200      	movs	r2, #0
 8008980:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008984:	2200      	movs	r2, #0
 8008986:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008988:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800898c:	4618      	mov	r0, r3
 800898e:	3750      	adds	r7, #80	@ 0x50
 8008990:	46bd      	mov	sp, r7
 8008992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008996:	bf00      	nop
 8008998:	0800a044 	.word	0x0800a044

0800899c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00a      	beq.n	8008a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0e:	f003 0304 	and.w	r3, r3, #4
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a30:	f003 0310 	and.w	r3, r3, #16
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00a      	beq.n	8008a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	430a      	orrs	r2, r1
 8008a6e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d01a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a9a:	d10a      	bne.n	8008ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b098      	sub	sp, #96	@ 0x60
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008af0:	f7f9 ff8e 	bl	8002a10 <HAL_GetTick>
 8008af4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d12f      	bne.n	8008b64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f88e 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d022      	beq.n	8008b64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b32:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2220      	movs	r2, #32
 8008b54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e063      	b.n	8008c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0304 	and.w	r3, r3, #4
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d149      	bne.n	8008c06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f857 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d03c      	beq.n	8008c06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	623b      	str	r3, [r7, #32]
   return(result);
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008baa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb2:	e841 2300 	strex	r3, r2, [r1]
 8008bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1e6      	bne.n	8008b8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3308      	adds	r3, #8
 8008bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bde:	61fa      	str	r2, [r7, #28]
 8008be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	617b      	str	r3, [r7, #20]
   return(result);
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e5      	bne.n	8008bbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e012      	b.n	8008c2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3758      	adds	r7, #88	@ 0x58
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c44:	e04f      	b.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d04b      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7f9 fedf 	bl	8002a10 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e04e      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d037      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d034      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b40      	cmp	r3, #64	@ 0x40
 8008c80:	d031      	beq.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d110      	bne.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2208      	movs	r2, #8
 8008c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f838 	bl	8008d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e029      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69db      	ldr	r3, [r3, #28]
 8008cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cc0:	d111      	bne.n	8008ce6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f81e 	bl	8008d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e00f      	b.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d0a0      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b095      	sub	sp, #84	@ 0x54
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	e853 3f00 	ldrex	r3, [r3]
 8008d22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	461a      	mov	r2, r3
 8008d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d3c:	e841 2300 	strex	r3, r2, [r1]
 8008d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1e6      	bne.n	8008d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3308      	adds	r3, #8
 8008d6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e3      	bne.n	8008d48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d118      	bne.n	8008dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f023 0310 	bic.w	r3, r3, #16
 8008d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da6:	61bb      	str	r3, [r7, #24]
 8008da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6979      	ldr	r1, [r7, #20]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	613b      	str	r3, [r7, #16]
   return(result);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e6      	bne.n	8008d88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008dce:	bf00      	nop
 8008dd0:	3754      	adds	r7, #84	@ 0x54
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008de6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fc3f 	bl	8008674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b08f      	sub	sp, #60	@ 0x3c
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e0c:	2b21      	cmp	r3, #33	@ 0x21
 8008e0e:	d14c      	bne.n	8008eaa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d132      	bne.n	8008e82 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e3c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e6      	bne.n	8008e1c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	e853 3f00 	ldrex	r3, [r3]
 8008e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6979      	ldr	r1, [r7, #20]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e6      	bne.n	8008e4e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008e80:	e013      	b.n	8008eaa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008eaa:	bf00      	nop
 8008eac:	373c      	adds	r7, #60	@ 0x3c
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b091      	sub	sp, #68	@ 0x44
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ec4:	2b21      	cmp	r3, #33	@ 0x21
 8008ec6:	d151      	bne.n	8008f6c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d132      	bne.n	8008f3a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	617b      	str	r3, [r7, #20]
   return(result);
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008f38:	e018      	b.n	8008f6c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f4e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f54:	1c9a      	adds	r2, r3, #2
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008f6c:	bf00      	nop
 8008f6e:	3744      	adds	r7, #68	@ 0x44
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b091      	sub	sp, #68	@ 0x44
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f86:	2b21      	cmp	r3, #33	@ 0x21
 8008f88:	d160      	bne.n	800904c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f90:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008f92:	e057      	b.n	8009044 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d133      	bne.n	8009008 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	623b      	str	r3, [r7, #32]
   return(result);
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff6:	69b9      	ldr	r1, [r7, #24]
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	e841 2300 	strex	r3, r2, [r1]
 8008ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e6      	bne.n	8008fd4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009006:	e021      	b.n	800904c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009012:	2b00      	cmp	r3, #0
 8009014:	d013      	beq.n	800903e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800903e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009040:	3b01      	subs	r3, #1
 8009042:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009044:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1a4      	bne.n	8008f94 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800904a:	e7ff      	b.n	800904c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800904c:	bf00      	nop
 800904e:	3744      	adds	r7, #68	@ 0x44
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b091      	sub	sp, #68	@ 0x44
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009066:	2b21      	cmp	r3, #33	@ 0x21
 8009068:	d165      	bne.n	8009136 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009070:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009072:	e05c      	b.n	800912e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d133      	bne.n	80090e8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3308      	adds	r3, #8
 8009086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	e853 3f00 	ldrex	r3, [r3]
 800908e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009096:	637b      	str	r3, [r7, #52]	@ 0x34
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090a8:	e841 2300 	strex	r3, r2, [r1]
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1e5      	bne.n	8009080 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6979      	ldr	r1, [r7, #20]
 80090d8:	69ba      	ldr	r2, [r7, #24]
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	613b      	str	r3, [r7, #16]
   return(result);
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e6      	bne.n	80090b4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80090e6:	e026      	b.n	8009136 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d018      	beq.n	8009128 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80090fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800910a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009110:	1c9a      	adds	r2, r3, #2
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009128:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800912a:	3b01      	subs	r3, #1
 800912c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800912e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009130:	2b00      	cmp	r3, #0
 8009132:	d19f      	bne.n	8009074 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009134:	e7ff      	b.n	8009136 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009136:	bf00      	nop
 8009138:	3744      	adds	r7, #68	@ 0x44
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b088      	sub	sp, #32
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	60bb      	str	r3, [r7, #8]
   return(result);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800915e:	61fb      	str	r3, [r7, #28]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	461a      	mov	r2, r3
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6979      	ldr	r1, [r7, #20]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	613b      	str	r3, [r7, #16]
   return(result);
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e6      	bne.n	800914a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2220      	movs	r2, #32
 8009180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fa68 	bl	8008660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009190:	bf00      	nop
 8009192:	3720      	adds	r7, #32
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d101      	bne.n	80091ea <HAL_UARTEx_DisableFifoMode+0x16>
 80091e6:	2302      	movs	r3, #2
 80091e8:	e027      	b.n	800923a <HAL_UARTEx_DisableFifoMode+0x66>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2224      	movs	r2, #36	@ 0x24
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0201 	bic.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009218:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009256:	2b01      	cmp	r3, #1
 8009258:	d101      	bne.n	800925e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800925a:	2302      	movs	r3, #2
 800925c:	e02d      	b.n	80092ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2224      	movs	r2, #36	@ 0x24
 800926a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0201 	bic.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	430a      	orrs	r2, r1
 8009298:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f850 	bl	8009340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e02d      	b.n	8009336 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	@ 0x24
 80092e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f812 	bl	8009340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800934c:	2b00      	cmp	r3, #0
 800934e:	d108      	bne.n	8009362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009360:	e031      	b.n	80093c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009362:	2308      	movs	r3, #8
 8009364:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009366:	2308      	movs	r3, #8
 8009368:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	0e5b      	lsrs	r3, r3, #25
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	0f5b      	lsrs	r3, r3, #29
 8009382:	b2db      	uxtb	r3, r3
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	7b3a      	ldrb	r2, [r7, #12]
 800938e:	4911      	ldr	r1, [pc, #68]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009390:	5c8a      	ldrb	r2, [r1, r2]
 8009392:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009396:	7b3a      	ldrb	r2, [r7, #12]
 8009398:	490f      	ldr	r1, [pc, #60]	@ (80093d8 <UARTEx_SetNbDataToProcess+0x98>)
 800939a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800939c:	fb93 f3f2 	sdiv	r3, r3, r2
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	7b7a      	ldrb	r2, [r7, #13]
 80093ac:	4909      	ldr	r1, [pc, #36]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x94>)
 80093ae:	5c8a      	ldrb	r2, [r1, r2]
 80093b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093b4:	7b7a      	ldrb	r2, [r7, #13]
 80093b6:	4908      	ldr	r1, [pc, #32]	@ (80093d8 <UARTEx_SetNbDataToProcess+0x98>)
 80093b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80093be:	b29a      	uxth	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80093c6:	bf00      	nop
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	0800a05c 	.word	0x0800a05c
 80093d8:	0800a064 	.word	0x0800a064

080093dc <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e016      	b.n	800941c <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7f9 fa0a 	bl	8002808 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009400:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	ea42 0103 	orr.w	r1, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800943a:	d10e      	bne.n	800945a <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b01      	cmp	r3, #1
 8009448:	d107      	bne.n	800945a <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f06f 0201 	mvn.w	r2, #1
 8009452:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f804 	bl	8009462 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800945a:	bf00      	nop
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <atoi>:
 8009476:	220a      	movs	r2, #10
 8009478:	2100      	movs	r1, #0
 800947a:	f000 b87b 	b.w	8009574 <strtol>
	...

08009480 <_strtol_l.constprop.0>:
 8009480:	2b24      	cmp	r3, #36	@ 0x24
 8009482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009486:	4686      	mov	lr, r0
 8009488:	4690      	mov	r8, r2
 800948a:	d801      	bhi.n	8009490 <_strtol_l.constprop.0+0x10>
 800948c:	2b01      	cmp	r3, #1
 800948e:	d106      	bne.n	800949e <_strtol_l.constprop.0+0x1e>
 8009490:	f000 f8c8 	bl	8009624 <__errno>
 8009494:	2316      	movs	r3, #22
 8009496:	6003      	str	r3, [r0, #0]
 8009498:	2000      	movs	r0, #0
 800949a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949e:	460d      	mov	r5, r1
 80094a0:	4833      	ldr	r0, [pc, #204]	@ (8009570 <_strtol_l.constprop.0+0xf0>)
 80094a2:	462a      	mov	r2, r5
 80094a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094a8:	5d06      	ldrb	r6, [r0, r4]
 80094aa:	f016 0608 	ands.w	r6, r6, #8
 80094ae:	d1f8      	bne.n	80094a2 <_strtol_l.constprop.0+0x22>
 80094b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80094b2:	d12d      	bne.n	8009510 <_strtol_l.constprop.0+0x90>
 80094b4:	782c      	ldrb	r4, [r5, #0]
 80094b6:	2601      	movs	r6, #1
 80094b8:	1c95      	adds	r5, r2, #2
 80094ba:	f033 0210 	bics.w	r2, r3, #16
 80094be:	d109      	bne.n	80094d4 <_strtol_l.constprop.0+0x54>
 80094c0:	2c30      	cmp	r4, #48	@ 0x30
 80094c2:	d12a      	bne.n	800951a <_strtol_l.constprop.0+0x9a>
 80094c4:	782a      	ldrb	r2, [r5, #0]
 80094c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094ca:	2a58      	cmp	r2, #88	@ 0x58
 80094cc:	d125      	bne.n	800951a <_strtol_l.constprop.0+0x9a>
 80094ce:	786c      	ldrb	r4, [r5, #1]
 80094d0:	2310      	movs	r3, #16
 80094d2:	3502      	adds	r5, #2
 80094d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80094d8:	2200      	movs	r2, #0
 80094da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80094de:	4610      	mov	r0, r2
 80094e0:	fbbc f9f3 	udiv	r9, ip, r3
 80094e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80094e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80094ec:	2f09      	cmp	r7, #9
 80094ee:	d81b      	bhi.n	8009528 <_strtol_l.constprop.0+0xa8>
 80094f0:	463c      	mov	r4, r7
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	dd27      	ble.n	8009546 <_strtol_l.constprop.0+0xc6>
 80094f6:	1c57      	adds	r7, r2, #1
 80094f8:	d007      	beq.n	800950a <_strtol_l.constprop.0+0x8a>
 80094fa:	4581      	cmp	r9, r0
 80094fc:	d320      	bcc.n	8009540 <_strtol_l.constprop.0+0xc0>
 80094fe:	d101      	bne.n	8009504 <_strtol_l.constprop.0+0x84>
 8009500:	45a2      	cmp	sl, r4
 8009502:	db1d      	blt.n	8009540 <_strtol_l.constprop.0+0xc0>
 8009504:	fb00 4003 	mla	r0, r0, r3, r4
 8009508:	2201      	movs	r2, #1
 800950a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800950e:	e7eb      	b.n	80094e8 <_strtol_l.constprop.0+0x68>
 8009510:	2c2b      	cmp	r4, #43	@ 0x2b
 8009512:	bf04      	itt	eq
 8009514:	782c      	ldrbeq	r4, [r5, #0]
 8009516:	1c95      	addeq	r5, r2, #2
 8009518:	e7cf      	b.n	80094ba <_strtol_l.constprop.0+0x3a>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1da      	bne.n	80094d4 <_strtol_l.constprop.0+0x54>
 800951e:	2c30      	cmp	r4, #48	@ 0x30
 8009520:	bf0c      	ite	eq
 8009522:	2308      	moveq	r3, #8
 8009524:	230a      	movne	r3, #10
 8009526:	e7d5      	b.n	80094d4 <_strtol_l.constprop.0+0x54>
 8009528:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800952c:	2f19      	cmp	r7, #25
 800952e:	d801      	bhi.n	8009534 <_strtol_l.constprop.0+0xb4>
 8009530:	3c37      	subs	r4, #55	@ 0x37
 8009532:	e7de      	b.n	80094f2 <_strtol_l.constprop.0+0x72>
 8009534:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009538:	2f19      	cmp	r7, #25
 800953a:	d804      	bhi.n	8009546 <_strtol_l.constprop.0+0xc6>
 800953c:	3c57      	subs	r4, #87	@ 0x57
 800953e:	e7d8      	b.n	80094f2 <_strtol_l.constprop.0+0x72>
 8009540:	f04f 32ff 	mov.w	r2, #4294967295
 8009544:	e7e1      	b.n	800950a <_strtol_l.constprop.0+0x8a>
 8009546:	1c53      	adds	r3, r2, #1
 8009548:	d108      	bne.n	800955c <_strtol_l.constprop.0+0xdc>
 800954a:	2322      	movs	r3, #34	@ 0x22
 800954c:	4660      	mov	r0, ip
 800954e:	f8ce 3000 	str.w	r3, [lr]
 8009552:	f1b8 0f00 	cmp.w	r8, #0
 8009556:	d0a0      	beq.n	800949a <_strtol_l.constprop.0+0x1a>
 8009558:	1e69      	subs	r1, r5, #1
 800955a:	e006      	b.n	800956a <_strtol_l.constprop.0+0xea>
 800955c:	b106      	cbz	r6, 8009560 <_strtol_l.constprop.0+0xe0>
 800955e:	4240      	negs	r0, r0
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d099      	beq.n	800949a <_strtol_l.constprop.0+0x1a>
 8009566:	2a00      	cmp	r2, #0
 8009568:	d1f6      	bne.n	8009558 <_strtol_l.constprop.0+0xd8>
 800956a:	f8c8 1000 	str.w	r1, [r8]
 800956e:	e794      	b.n	800949a <_strtol_l.constprop.0+0x1a>
 8009570:	0800a06d 	.word	0x0800a06d

08009574 <strtol>:
 8009574:	4613      	mov	r3, r2
 8009576:	460a      	mov	r2, r1
 8009578:	4601      	mov	r1, r0
 800957a:	4802      	ldr	r0, [pc, #8]	@ (8009584 <strtol+0x10>)
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f7ff bf7f 	b.w	8009480 <_strtol_l.constprop.0>
 8009582:	bf00      	nop
 8009584:	20000090 	.word	0x20000090

08009588 <siprintf>:
 8009588:	b40e      	push	{r1, r2, r3}
 800958a:	b500      	push	{lr}
 800958c:	b09c      	sub	sp, #112	@ 0x70
 800958e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009592:	ab1d      	add	r3, sp, #116	@ 0x74
 8009594:	9002      	str	r0, [sp, #8]
 8009596:	9006      	str	r0, [sp, #24]
 8009598:	9107      	str	r1, [sp, #28]
 800959a:	9104      	str	r1, [sp, #16]
 800959c:	4808      	ldr	r0, [pc, #32]	@ (80095c0 <siprintf+0x38>)
 800959e:	4909      	ldr	r1, [pc, #36]	@ (80095c4 <siprintf+0x3c>)
 80095a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a4:	9105      	str	r1, [sp, #20]
 80095a6:	a902      	add	r1, sp, #8
 80095a8:	6800      	ldr	r0, [r0, #0]
 80095aa:	9301      	str	r3, [sp, #4]
 80095ac:	f000 f9d0 	bl	8009950 <_svfiprintf_r>
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	b01c      	add	sp, #112	@ 0x70
 80095b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80095bc:	b003      	add	sp, #12
 80095be:	4770      	bx	lr
 80095c0:	20000090 	.word	0x20000090
 80095c4:	ffff0208 	.word	0xffff0208

080095c8 <memset>:
 80095c8:	4402      	add	r2, r0
 80095ca:	4603      	mov	r3, r0
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d100      	bne.n	80095d2 <memset+0xa>
 80095d0:	4770      	bx	lr
 80095d2:	f803 1b01 	strb.w	r1, [r3], #1
 80095d6:	e7f9      	b.n	80095cc <memset+0x4>

080095d8 <strncmp>:
 80095d8:	b510      	push	{r4, lr}
 80095da:	b16a      	cbz	r2, 80095f8 <strncmp+0x20>
 80095dc:	3901      	subs	r1, #1
 80095de:	1884      	adds	r4, r0, r2
 80095e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d103      	bne.n	80095f4 <strncmp+0x1c>
 80095ec:	42a0      	cmp	r0, r4
 80095ee:	d001      	beq.n	80095f4 <strncmp+0x1c>
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	d1f5      	bne.n	80095e0 <strncmp+0x8>
 80095f4:	1ad0      	subs	r0, r2, r3
 80095f6:	bd10      	pop	{r4, pc}
 80095f8:	4610      	mov	r0, r2
 80095fa:	e7fc      	b.n	80095f6 <strncmp+0x1e>

080095fc <strncpy>:
 80095fc:	3901      	subs	r1, #1
 80095fe:	4603      	mov	r3, r0
 8009600:	b510      	push	{r4, lr}
 8009602:	b132      	cbz	r2, 8009612 <strncpy+0x16>
 8009604:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009608:	3a01      	subs	r2, #1
 800960a:	f803 4b01 	strb.w	r4, [r3], #1
 800960e:	2c00      	cmp	r4, #0
 8009610:	d1f7      	bne.n	8009602 <strncpy+0x6>
 8009612:	441a      	add	r2, r3
 8009614:	2100      	movs	r1, #0
 8009616:	4293      	cmp	r3, r2
 8009618:	d100      	bne.n	800961c <strncpy+0x20>
 800961a:	bd10      	pop	{r4, pc}
 800961c:	f803 1b01 	strb.w	r1, [r3], #1
 8009620:	e7f9      	b.n	8009616 <strncpy+0x1a>
	...

08009624 <__errno>:
 8009624:	4b01      	ldr	r3, [pc, #4]	@ (800962c <__errno+0x8>)
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20000090 	.word	0x20000090

08009630 <__libc_init_array>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	4d0d      	ldr	r5, [pc, #52]	@ (8009668 <__libc_init_array+0x38>)
 8009634:	2600      	movs	r6, #0
 8009636:	4c0d      	ldr	r4, [pc, #52]	@ (800966c <__libc_init_array+0x3c>)
 8009638:	1b64      	subs	r4, r4, r5
 800963a:	10a4      	asrs	r4, r4, #2
 800963c:	42a6      	cmp	r6, r4
 800963e:	d109      	bne.n	8009654 <__libc_init_array+0x24>
 8009640:	4d0b      	ldr	r5, [pc, #44]	@ (8009670 <__libc_init_array+0x40>)
 8009642:	2600      	movs	r6, #0
 8009644:	4c0b      	ldr	r4, [pc, #44]	@ (8009674 <__libc_init_array+0x44>)
 8009646:	f000 fc7f 	bl	8009f48 <_init>
 800964a:	1b64      	subs	r4, r4, r5
 800964c:	10a4      	asrs	r4, r4, #2
 800964e:	42a6      	cmp	r6, r4
 8009650:	d105      	bne.n	800965e <__libc_init_array+0x2e>
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	f855 3b04 	ldr.w	r3, [r5], #4
 8009658:	3601      	adds	r6, #1
 800965a:	4798      	blx	r3
 800965c:	e7ee      	b.n	800963c <__libc_init_array+0xc>
 800965e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009662:	3601      	adds	r6, #1
 8009664:	4798      	blx	r3
 8009666:	e7f2      	b.n	800964e <__libc_init_array+0x1e>
 8009668:	0800a1a8 	.word	0x0800a1a8
 800966c:	0800a1a8 	.word	0x0800a1a8
 8009670:	0800a1a8 	.word	0x0800a1a8
 8009674:	0800a1ac 	.word	0x0800a1ac

08009678 <__retarget_lock_acquire_recursive>:
 8009678:	4770      	bx	lr

0800967a <__retarget_lock_release_recursive>:
 800967a:	4770      	bx	lr

0800967c <strcpy>:
 800967c:	4603      	mov	r3, r0
 800967e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009682:	f803 2b01 	strb.w	r2, [r3], #1
 8009686:	2a00      	cmp	r2, #0
 8009688:	d1f9      	bne.n	800967e <strcpy+0x2>
 800968a:	4770      	bx	lr

0800968c <memcpy>:
 800968c:	440a      	add	r2, r1
 800968e:	1e43      	subs	r3, r0, #1
 8009690:	4291      	cmp	r1, r2
 8009692:	d100      	bne.n	8009696 <memcpy+0xa>
 8009694:	4770      	bx	lr
 8009696:	b510      	push	{r4, lr}
 8009698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800969c:	4291      	cmp	r1, r2
 800969e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096a2:	d1f9      	bne.n	8009698 <memcpy+0xc>
 80096a4:	bd10      	pop	{r4, pc}
	...

080096a8 <_free_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4605      	mov	r5, r0
 80096ac:	2900      	cmp	r1, #0
 80096ae:	d041      	beq.n	8009734 <_free_r+0x8c>
 80096b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b4:	1f0c      	subs	r4, r1, #4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	bfb8      	it	lt
 80096ba:	18e4      	addlt	r4, r4, r3
 80096bc:	f000 f8e0 	bl	8009880 <__malloc_lock>
 80096c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009738 <_free_r+0x90>)
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	b933      	cbnz	r3, 80096d4 <_free_r+0x2c>
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	6014      	str	r4, [r2, #0]
 80096ca:	4628      	mov	r0, r5
 80096cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d0:	f000 b8dc 	b.w	800988c <__malloc_unlock>
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d908      	bls.n	80096ea <_free_r+0x42>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	1821      	adds	r1, r4, r0
 80096dc:	428b      	cmp	r3, r1
 80096de:	bf01      	itttt	eq
 80096e0:	6819      	ldreq	r1, [r3, #0]
 80096e2:	685b      	ldreq	r3, [r3, #4]
 80096e4:	1809      	addeq	r1, r1, r0
 80096e6:	6021      	streq	r1, [r4, #0]
 80096e8:	e7ed      	b.n	80096c6 <_free_r+0x1e>
 80096ea:	461a      	mov	r2, r3
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b10b      	cbz	r3, 80096f4 <_free_r+0x4c>
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d9fa      	bls.n	80096ea <_free_r+0x42>
 80096f4:	6811      	ldr	r1, [r2, #0]
 80096f6:	1850      	adds	r0, r2, r1
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d10b      	bne.n	8009714 <_free_r+0x6c>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	4401      	add	r1, r0
 8009700:	1850      	adds	r0, r2, r1
 8009702:	6011      	str	r1, [r2, #0]
 8009704:	4283      	cmp	r3, r0
 8009706:	d1e0      	bne.n	80096ca <_free_r+0x22>
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	4408      	add	r0, r1
 800970e:	6053      	str	r3, [r2, #4]
 8009710:	6010      	str	r0, [r2, #0]
 8009712:	e7da      	b.n	80096ca <_free_r+0x22>
 8009714:	d902      	bls.n	800971c <_free_r+0x74>
 8009716:	230c      	movs	r3, #12
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	e7d6      	b.n	80096ca <_free_r+0x22>
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	1821      	adds	r1, r4, r0
 8009720:	428b      	cmp	r3, r1
 8009722:	bf02      	ittt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	1809      	addeq	r1, r1, r0
 800972a:	6063      	str	r3, [r4, #4]
 800972c:	bf08      	it	eq
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	6054      	str	r4, [r2, #4]
 8009732:	e7ca      	b.n	80096ca <_free_r+0x22>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	20001250 	.word	0x20001250

0800973c <sbrk_aligned>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	4e0f      	ldr	r6, [pc, #60]	@ (800977c <sbrk_aligned+0x40>)
 8009740:	460c      	mov	r4, r1
 8009742:	4605      	mov	r5, r0
 8009744:	6831      	ldr	r1, [r6, #0]
 8009746:	b911      	cbnz	r1, 800974e <sbrk_aligned+0x12>
 8009748:	f000 fbaa 	bl	8009ea0 <_sbrk_r>
 800974c:	6030      	str	r0, [r6, #0]
 800974e:	4621      	mov	r1, r4
 8009750:	4628      	mov	r0, r5
 8009752:	f000 fba5 	bl	8009ea0 <_sbrk_r>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d103      	bne.n	8009762 <sbrk_aligned+0x26>
 800975a:	f04f 34ff 	mov.w	r4, #4294967295
 800975e:	4620      	mov	r0, r4
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	1cc4      	adds	r4, r0, #3
 8009764:	f024 0403 	bic.w	r4, r4, #3
 8009768:	42a0      	cmp	r0, r4
 800976a:	d0f8      	beq.n	800975e <sbrk_aligned+0x22>
 800976c:	1a21      	subs	r1, r4, r0
 800976e:	4628      	mov	r0, r5
 8009770:	f000 fb96 	bl	8009ea0 <_sbrk_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d1f2      	bne.n	800975e <sbrk_aligned+0x22>
 8009778:	e7ef      	b.n	800975a <sbrk_aligned+0x1e>
 800977a:	bf00      	nop
 800977c:	2000124c 	.word	0x2000124c

08009780 <_malloc_r>:
 8009780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	4606      	mov	r6, r0
 8009788:	f025 0503 	bic.w	r5, r5, #3
 800978c:	3508      	adds	r5, #8
 800978e:	2d0c      	cmp	r5, #12
 8009790:	bf38      	it	cc
 8009792:	250c      	movcc	r5, #12
 8009794:	2d00      	cmp	r5, #0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d904      	bls.n	80097a6 <_malloc_r+0x26>
 800979c:	230c      	movs	r3, #12
 800979e:	6033      	str	r3, [r6, #0]
 80097a0:	2000      	movs	r0, #0
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800987c <_malloc_r+0xfc>
 80097aa:	f000 f869 	bl	8009880 <__malloc_lock>
 80097ae:	f8d8 3000 	ldr.w	r3, [r8]
 80097b2:	461c      	mov	r4, r3
 80097b4:	bb44      	cbnz	r4, 8009808 <_malloc_r+0x88>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7ff ffbf 	bl	800973c <sbrk_aligned>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	4604      	mov	r4, r0
 80097c2:	d158      	bne.n	8009876 <_malloc_r+0xf6>
 80097c4:	f8d8 4000 	ldr.w	r4, [r8]
 80097c8:	4627      	mov	r7, r4
 80097ca:	2f00      	cmp	r7, #0
 80097cc:	d143      	bne.n	8009856 <_malloc_r+0xd6>
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	d04b      	beq.n	800986a <_malloc_r+0xea>
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	4639      	mov	r1, r7
 80097d6:	4630      	mov	r0, r6
 80097d8:	eb04 0903 	add.w	r9, r4, r3
 80097dc:	f000 fb60 	bl	8009ea0 <_sbrk_r>
 80097e0:	4581      	cmp	r9, r0
 80097e2:	d142      	bne.n	800986a <_malloc_r+0xea>
 80097e4:	6821      	ldr	r1, [r4, #0]
 80097e6:	4630      	mov	r0, r6
 80097e8:	1a6d      	subs	r5, r5, r1
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7ff ffa6 	bl	800973c <sbrk_aligned>
 80097f0:	3001      	adds	r0, #1
 80097f2:	d03a      	beq.n	800986a <_malloc_r+0xea>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	442b      	add	r3, r5
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	f8d8 3000 	ldr.w	r3, [r8]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	bb62      	cbnz	r2, 800985c <_malloc_r+0xdc>
 8009802:	f8c8 7000 	str.w	r7, [r8]
 8009806:	e00f      	b.n	8009828 <_malloc_r+0xa8>
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	1b52      	subs	r2, r2, r5
 800980c:	d420      	bmi.n	8009850 <_malloc_r+0xd0>
 800980e:	2a0b      	cmp	r2, #11
 8009810:	d917      	bls.n	8009842 <_malloc_r+0xc2>
 8009812:	1961      	adds	r1, r4, r5
 8009814:	42a3      	cmp	r3, r4
 8009816:	6025      	str	r5, [r4, #0]
 8009818:	bf18      	it	ne
 800981a:	6059      	strne	r1, [r3, #4]
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	bf08      	it	eq
 8009820:	f8c8 1000 	streq.w	r1, [r8]
 8009824:	5162      	str	r2, [r4, r5]
 8009826:	604b      	str	r3, [r1, #4]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f82f 	bl	800988c <__malloc_unlock>
 800982e:	f104 000b 	add.w	r0, r4, #11
 8009832:	1d23      	adds	r3, r4, #4
 8009834:	f020 0007 	bic.w	r0, r0, #7
 8009838:	1ac2      	subs	r2, r0, r3
 800983a:	bf1c      	itt	ne
 800983c:	1a1b      	subne	r3, r3, r0
 800983e:	50a3      	strne	r3, [r4, r2]
 8009840:	e7af      	b.n	80097a2 <_malloc_r+0x22>
 8009842:	6862      	ldr	r2, [r4, #4]
 8009844:	42a3      	cmp	r3, r4
 8009846:	bf0c      	ite	eq
 8009848:	f8c8 2000 	streq.w	r2, [r8]
 800984c:	605a      	strne	r2, [r3, #4]
 800984e:	e7eb      	b.n	8009828 <_malloc_r+0xa8>
 8009850:	4623      	mov	r3, r4
 8009852:	6864      	ldr	r4, [r4, #4]
 8009854:	e7ae      	b.n	80097b4 <_malloc_r+0x34>
 8009856:	463c      	mov	r4, r7
 8009858:	687f      	ldr	r7, [r7, #4]
 800985a:	e7b6      	b.n	80097ca <_malloc_r+0x4a>
 800985c:	461a      	mov	r2, r3
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	42a3      	cmp	r3, r4
 8009862:	d1fb      	bne.n	800985c <_malloc_r+0xdc>
 8009864:	2300      	movs	r3, #0
 8009866:	6053      	str	r3, [r2, #4]
 8009868:	e7de      	b.n	8009828 <_malloc_r+0xa8>
 800986a:	230c      	movs	r3, #12
 800986c:	4630      	mov	r0, r6
 800986e:	6033      	str	r3, [r6, #0]
 8009870:	f000 f80c 	bl	800988c <__malloc_unlock>
 8009874:	e794      	b.n	80097a0 <_malloc_r+0x20>
 8009876:	6005      	str	r5, [r0, #0]
 8009878:	e7d6      	b.n	8009828 <_malloc_r+0xa8>
 800987a:	bf00      	nop
 800987c:	20001250 	.word	0x20001250

08009880 <__malloc_lock>:
 8009880:	4801      	ldr	r0, [pc, #4]	@ (8009888 <__malloc_lock+0x8>)
 8009882:	f7ff bef9 	b.w	8009678 <__retarget_lock_acquire_recursive>
 8009886:	bf00      	nop
 8009888:	20001248 	.word	0x20001248

0800988c <__malloc_unlock>:
 800988c:	4801      	ldr	r0, [pc, #4]	@ (8009894 <__malloc_unlock+0x8>)
 800988e:	f7ff bef4 	b.w	800967a <__retarget_lock_release_recursive>
 8009892:	bf00      	nop
 8009894:	20001248 	.word	0x20001248

08009898 <__ssputs_r>:
 8009898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800989c:	461f      	mov	r7, r3
 800989e:	688e      	ldr	r6, [r1, #8]
 80098a0:	4682      	mov	sl, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	42be      	cmp	r6, r7
 80098a6:	4690      	mov	r8, r2
 80098a8:	680b      	ldr	r3, [r1, #0]
 80098aa:	d82d      	bhi.n	8009908 <__ssputs_r+0x70>
 80098ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098b4:	d026      	beq.n	8009904 <__ssputs_r+0x6c>
 80098b6:	6965      	ldr	r5, [r4, #20]
 80098b8:	6909      	ldr	r1, [r1, #16]
 80098ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098be:	eba3 0901 	sub.w	r9, r3, r1
 80098c2:	1c7b      	adds	r3, r7, #1
 80098c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c8:	444b      	add	r3, r9
 80098ca:	106d      	asrs	r5, r5, #1
 80098cc:	429d      	cmp	r5, r3
 80098ce:	bf38      	it	cc
 80098d0:	461d      	movcc	r5, r3
 80098d2:	0553      	lsls	r3, r2, #21
 80098d4:	d527      	bpl.n	8009926 <__ssputs_r+0x8e>
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7ff ff52 	bl	8009780 <_malloc_r>
 80098dc:	4606      	mov	r6, r0
 80098de:	b360      	cbz	r0, 800993a <__ssputs_r+0xa2>
 80098e0:	464a      	mov	r2, r9
 80098e2:	6921      	ldr	r1, [r4, #16]
 80098e4:	f7ff fed2 	bl	800968c <memcpy>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80098ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	6126      	str	r6, [r4, #16]
 80098f6:	444e      	add	r6, r9
 80098f8:	6165      	str	r5, [r4, #20]
 80098fa:	eba5 0509 	sub.w	r5, r5, r9
 80098fe:	6026      	str	r6, [r4, #0]
 8009900:	463e      	mov	r6, r7
 8009902:	60a5      	str	r5, [r4, #8]
 8009904:	42be      	cmp	r6, r7
 8009906:	d900      	bls.n	800990a <__ssputs_r+0x72>
 8009908:	463e      	mov	r6, r7
 800990a:	4632      	mov	r2, r6
 800990c:	4641      	mov	r1, r8
 800990e:	6820      	ldr	r0, [r4, #0]
 8009910:	f000 faac 	bl	8009e6c <memmove>
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	2000      	movs	r0, #0
 8009918:	1b9b      	subs	r3, r3, r6
 800991a:	60a3      	str	r3, [r4, #8]
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	4433      	add	r3, r6
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	462a      	mov	r2, r5
 8009928:	f000 fad8 	bl	8009edc <_realloc_r>
 800992c:	4606      	mov	r6, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	d1e0      	bne.n	80098f4 <__ssputs_r+0x5c>
 8009932:	6921      	ldr	r1, [r4, #16]
 8009934:	4650      	mov	r0, sl
 8009936:	f7ff feb7 	bl	80096a8 <_free_r>
 800993a:	230c      	movs	r3, #12
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	f8ca 3000 	str.w	r3, [sl]
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994a:	81a3      	strh	r3, [r4, #12]
 800994c:	e7e9      	b.n	8009922 <__ssputs_r+0x8a>
	...

08009950 <_svfiprintf_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4698      	mov	r8, r3
 8009956:	898b      	ldrh	r3, [r1, #12]
 8009958:	b09d      	sub	sp, #116	@ 0x74
 800995a:	4607      	mov	r7, r0
 800995c:	061b      	lsls	r3, r3, #24
 800995e:	460d      	mov	r5, r1
 8009960:	4614      	mov	r4, r2
 8009962:	d510      	bpl.n	8009986 <_svfiprintf_r+0x36>
 8009964:	690b      	ldr	r3, [r1, #16]
 8009966:	b973      	cbnz	r3, 8009986 <_svfiprintf_r+0x36>
 8009968:	2140      	movs	r1, #64	@ 0x40
 800996a:	f7ff ff09 	bl	8009780 <_malloc_r>
 800996e:	6028      	str	r0, [r5, #0]
 8009970:	6128      	str	r0, [r5, #16]
 8009972:	b930      	cbnz	r0, 8009982 <_svfiprintf_r+0x32>
 8009974:	230c      	movs	r3, #12
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b01d      	add	sp, #116	@ 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	2340      	movs	r3, #64	@ 0x40
 8009984:	616b      	str	r3, [r5, #20]
 8009986:	2300      	movs	r3, #0
 8009988:	f8cd 800c 	str.w	r8, [sp, #12]
 800998c:	f04f 0901 	mov.w	r9, #1
 8009990:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009b34 <_svfiprintf_r+0x1e4>
 8009994:	9309      	str	r3, [sp, #36]	@ 0x24
 8009996:	2320      	movs	r3, #32
 8009998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800999c:	2330      	movs	r3, #48	@ 0x30
 800999e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099a2:	4623      	mov	r3, r4
 80099a4:	469a      	mov	sl, r3
 80099a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099aa:	b10a      	cbz	r2, 80099b0 <_svfiprintf_r+0x60>
 80099ac:	2a25      	cmp	r2, #37	@ 0x25
 80099ae:	d1f9      	bne.n	80099a4 <_svfiprintf_r+0x54>
 80099b0:	ebba 0b04 	subs.w	fp, sl, r4
 80099b4:	d00b      	beq.n	80099ce <_svfiprintf_r+0x7e>
 80099b6:	465b      	mov	r3, fp
 80099b8:	4622      	mov	r2, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ff6b 	bl	8009898 <__ssputs_r>
 80099c2:	3001      	adds	r0, #1
 80099c4:	f000 80a7 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ca:	445a      	add	r2, fp
 80099cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80099ce:	f89a 3000 	ldrb.w	r3, [sl]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 809f 	beq.w	8009b16 <_svfiprintf_r+0x1c6>
 80099d8:	2300      	movs	r3, #0
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	f10a 0a01 	add.w	sl, sl, #1
 80099e2:	9304      	str	r3, [sp, #16]
 80099e4:	9307      	str	r3, [sp, #28]
 80099e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80099ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f0:	4654      	mov	r4, sl
 80099f2:	2205      	movs	r2, #5
 80099f4:	484f      	ldr	r0, [pc, #316]	@ (8009b34 <_svfiprintf_r+0x1e4>)
 80099f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fa:	f000 fa61 	bl	8009ec0 <memchr>
 80099fe:	9a04      	ldr	r2, [sp, #16]
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_svfiprintf_r+0xea>
 8009a02:	06d0      	lsls	r0, r2, #27
 8009a04:	bf44      	itt	mi
 8009a06:	2320      	movmi	r3, #32
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0c:	0711      	lsls	r1, r2, #28
 8009a0e:	bf44      	itt	mi
 8009a10:	232b      	movmi	r3, #43	@ 0x2b
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a16:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1c:	d015      	beq.n	8009a4a <_svfiprintf_r+0xfa>
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	4654      	mov	r4, sl
 8009a22:	2000      	movs	r0, #0
 8009a24:	f04f 0c0a 	mov.w	ip, #10
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2e:	3b30      	subs	r3, #48	@ 0x30
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d94b      	bls.n	8009acc <_svfiprintf_r+0x17c>
 8009a34:	b1b0      	cbz	r0, 8009a64 <_svfiprintf_r+0x114>
 8009a36:	9207      	str	r2, [sp, #28]
 8009a38:	e014      	b.n	8009a64 <_svfiprintf_r+0x114>
 8009a3a:	eba0 0308 	sub.w	r3, r0, r8
 8009a3e:	46a2      	mov	sl, r4
 8009a40:	fa09 f303 	lsl.w	r3, r9, r3
 8009a44:	4313      	orrs	r3, r2
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	e7d2      	b.n	80099f0 <_svfiprintf_r+0xa0>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	9103      	str	r1, [sp, #12]
 8009a54:	bfbb      	ittet	lt
 8009a56:	425b      	neglt	r3, r3
 8009a58:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5c:	9307      	strge	r3, [sp, #28]
 8009a5e:	9307      	strlt	r3, [sp, #28]
 8009a60:	bfb8      	it	lt
 8009a62:	9204      	strlt	r2, [sp, #16]
 8009a64:	7823      	ldrb	r3, [r4, #0]
 8009a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a68:	d10a      	bne.n	8009a80 <_svfiprintf_r+0x130>
 8009a6a:	7863      	ldrb	r3, [r4, #1]
 8009a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6e:	d132      	bne.n	8009ad6 <_svfiprintf_r+0x186>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	3402      	adds	r4, #2
 8009a74:	1d1a      	adds	r2, r3, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a7c:	9203      	str	r2, [sp, #12]
 8009a7e:	9305      	str	r3, [sp, #20]
 8009a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b44 <_svfiprintf_r+0x1f4>
 8009a84:	2203      	movs	r2, #3
 8009a86:	7821      	ldrb	r1, [r4, #0]
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f000 fa19 	bl	8009ec0 <memchr>
 8009a8e:	b138      	cbz	r0, 8009aa0 <_svfiprintf_r+0x150>
 8009a90:	eba0 000a 	sub.w	r0, r0, sl
 8009a94:	2240      	movs	r2, #64	@ 0x40
 8009a96:	9b04      	ldr	r3, [sp, #16]
 8009a98:	3401      	adds	r4, #1
 8009a9a:	4082      	lsls	r2, r0
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa4:	2206      	movs	r2, #6
 8009aa6:	4824      	ldr	r0, [pc, #144]	@ (8009b38 <_svfiprintf_r+0x1e8>)
 8009aa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aac:	f000 fa08 	bl	8009ec0 <memchr>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d036      	beq.n	8009b22 <_svfiprintf_r+0x1d2>
 8009ab4:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <_svfiprintf_r+0x1ec>)
 8009ab6:	bb1b      	cbnz	r3, 8009b00 <_svfiprintf_r+0x1b0>
 8009ab8:	9b03      	ldr	r3, [sp, #12]
 8009aba:	3307      	adds	r3, #7
 8009abc:	f023 0307 	bic.w	r3, r3, #7
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	9303      	str	r3, [sp, #12]
 8009ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac6:	4433      	add	r3, r6
 8009ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aca:	e76a      	b.n	80099a2 <_svfiprintf_r+0x52>
 8009acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7a8      	b.n	8009a28 <_svfiprintf_r+0xd8>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	f04f 0c0a 	mov.w	ip, #10
 8009ade:	4619      	mov	r1, r3
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae8:	3a30      	subs	r2, #48	@ 0x30
 8009aea:	2a09      	cmp	r2, #9
 8009aec:	d903      	bls.n	8009af6 <_svfiprintf_r+0x1a6>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0c6      	beq.n	8009a80 <_svfiprintf_r+0x130>
 8009af2:	9105      	str	r1, [sp, #20]
 8009af4:	e7c4      	b.n	8009a80 <_svfiprintf_r+0x130>
 8009af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009afa:	4604      	mov	r4, r0
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7f0      	b.n	8009ae2 <_svfiprintf_r+0x192>
 8009b00:	ab03      	add	r3, sp, #12
 8009b02:	462a      	mov	r2, r5
 8009b04:	a904      	add	r1, sp, #16
 8009b06:	4638      	mov	r0, r7
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b0c:	f3af 8000 	nop.w
 8009b10:	1c42      	adds	r2, r0, #1
 8009b12:	4606      	mov	r6, r0
 8009b14:	d1d6      	bne.n	8009ac4 <_svfiprintf_r+0x174>
 8009b16:	89ab      	ldrh	r3, [r5, #12]
 8009b18:	065b      	lsls	r3, r3, #25
 8009b1a:	f53f af2d 	bmi.w	8009978 <_svfiprintf_r+0x28>
 8009b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b20:	e72c      	b.n	800997c <_svfiprintf_r+0x2c>
 8009b22:	ab03      	add	r3, sp, #12
 8009b24:	462a      	mov	r2, r5
 8009b26:	a904      	add	r1, sp, #16
 8009b28:	4638      	mov	r0, r7
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	4b04      	ldr	r3, [pc, #16]	@ (8009b40 <_svfiprintf_r+0x1f0>)
 8009b2e:	f000 f87d 	bl	8009c2c <_printf_i>
 8009b32:	e7ed      	b.n	8009b10 <_svfiprintf_r+0x1c0>
 8009b34:	0800a16d 	.word	0x0800a16d
 8009b38:	0800a177 	.word	0x0800a177
 8009b3c:	00000000 	.word	0x00000000
 8009b40:	08009899 	.word	0x08009899
 8009b44:	0800a173 	.word	0x0800a173

08009b48 <_printf_common>:
 8009b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	4616      	mov	r6, r2
 8009b4e:	4698      	mov	r8, r3
 8009b50:	688a      	ldr	r2, [r1, #8]
 8009b52:	4607      	mov	r7, r0
 8009b54:	690b      	ldr	r3, [r1, #16]
 8009b56:	460c      	mov	r4, r1
 8009b58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	bfb8      	it	lt
 8009b60:	4613      	movlt	r3, r2
 8009b62:	6033      	str	r3, [r6, #0]
 8009b64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b68:	b10a      	cbz	r2, 8009b6e <_printf_common+0x26>
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	6033      	str	r3, [r6, #0]
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	0699      	lsls	r1, r3, #26
 8009b72:	bf42      	ittt	mi
 8009b74:	6833      	ldrmi	r3, [r6, #0]
 8009b76:	3302      	addmi	r3, #2
 8009b78:	6033      	strmi	r3, [r6, #0]
 8009b7a:	6825      	ldr	r5, [r4, #0]
 8009b7c:	f015 0506 	ands.w	r5, r5, #6
 8009b80:	d106      	bne.n	8009b90 <_printf_common+0x48>
 8009b82:	f104 0a19 	add.w	sl, r4, #25
 8009b86:	68e3      	ldr	r3, [r4, #12]
 8009b88:	6832      	ldr	r2, [r6, #0]
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	42ab      	cmp	r3, r5
 8009b8e:	dc2b      	bgt.n	8009be8 <_printf_common+0xa0>
 8009b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	3b00      	subs	r3, #0
 8009b98:	bf18      	it	ne
 8009b9a:	2301      	movne	r3, #1
 8009b9c:	0692      	lsls	r2, r2, #26
 8009b9e:	d430      	bmi.n	8009c02 <_printf_common+0xba>
 8009ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	47c8      	blx	r9
 8009baa:	3001      	adds	r0, #1
 8009bac:	d023      	beq.n	8009bf6 <_printf_common+0xae>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	341a      	adds	r4, #26
 8009bb2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009bb6:	f003 0306 	and.w	r3, r3, #6
 8009bba:	2b04      	cmp	r3, #4
 8009bbc:	bf0a      	itet	eq
 8009bbe:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009bc2:	2500      	movne	r5, #0
 8009bc4:	6833      	ldreq	r3, [r6, #0]
 8009bc6:	f04f 0600 	mov.w	r6, #0
 8009bca:	bf08      	it	eq
 8009bcc:	1aed      	subeq	r5, r5, r3
 8009bce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009bd2:	bf08      	it	eq
 8009bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	bfc4      	itt	gt
 8009bdc:	1a9b      	subgt	r3, r3, r2
 8009bde:	18ed      	addgt	r5, r5, r3
 8009be0:	42b5      	cmp	r5, r6
 8009be2:	d11a      	bne.n	8009c1a <_printf_common+0xd2>
 8009be4:	2000      	movs	r0, #0
 8009be6:	e008      	b.n	8009bfa <_printf_common+0xb2>
 8009be8:	2301      	movs	r3, #1
 8009bea:	4652      	mov	r2, sl
 8009bec:	4641      	mov	r1, r8
 8009bee:	4638      	mov	r0, r7
 8009bf0:	47c8      	blx	r9
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	d103      	bne.n	8009bfe <_printf_common+0xb6>
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfe:	3501      	adds	r5, #1
 8009c00:	e7c1      	b.n	8009b86 <_printf_common+0x3e>
 8009c02:	18e1      	adds	r1, r4, r3
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	2030      	movs	r0, #48	@ 0x30
 8009c08:	3302      	adds	r3, #2
 8009c0a:	4422      	add	r2, r4
 8009c0c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c18:	e7c2      	b.n	8009ba0 <_printf_common+0x58>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4638      	mov	r0, r7
 8009c22:	47c8      	blx	r9
 8009c24:	3001      	adds	r0, #1
 8009c26:	d0e6      	beq.n	8009bf6 <_printf_common+0xae>
 8009c28:	3601      	adds	r6, #1
 8009c2a:	e7d9      	b.n	8009be0 <_printf_common+0x98>

08009c2c <_printf_i>:
 8009c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	7e0f      	ldrb	r7, [r1, #24]
 8009c32:	4691      	mov	r9, r2
 8009c34:	4680      	mov	r8, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	2f78      	cmp	r7, #120	@ 0x78
 8009c3a:	469a      	mov	sl, r3
 8009c3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c42:	d807      	bhi.n	8009c54 <_printf_i+0x28>
 8009c44:	2f62      	cmp	r7, #98	@ 0x62
 8009c46:	d80a      	bhi.n	8009c5e <_printf_i+0x32>
 8009c48:	2f00      	cmp	r7, #0
 8009c4a:	f000 80d2 	beq.w	8009df2 <_printf_i+0x1c6>
 8009c4e:	2f58      	cmp	r7, #88	@ 0x58
 8009c50:	f000 80b9 	beq.w	8009dc6 <_printf_i+0x19a>
 8009c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c5c:	e03a      	b.n	8009cd4 <_printf_i+0xa8>
 8009c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c62:	2b15      	cmp	r3, #21
 8009c64:	d8f6      	bhi.n	8009c54 <_printf_i+0x28>
 8009c66:	a101      	add	r1, pc, #4	@ (adr r1, 8009c6c <_printf_i+0x40>)
 8009c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c6c:	08009cc5 	.word	0x08009cc5
 8009c70:	08009cd9 	.word	0x08009cd9
 8009c74:	08009c55 	.word	0x08009c55
 8009c78:	08009c55 	.word	0x08009c55
 8009c7c:	08009c55 	.word	0x08009c55
 8009c80:	08009c55 	.word	0x08009c55
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009c55 	.word	0x08009c55
 8009c8c:	08009c55 	.word	0x08009c55
 8009c90:	08009c55 	.word	0x08009c55
 8009c94:	08009c55 	.word	0x08009c55
 8009c98:	08009dd9 	.word	0x08009dd9
 8009c9c:	08009d03 	.word	0x08009d03
 8009ca0:	08009d93 	.word	0x08009d93
 8009ca4:	08009c55 	.word	0x08009c55
 8009ca8:	08009c55 	.word	0x08009c55
 8009cac:	08009dfb 	.word	0x08009dfb
 8009cb0:	08009c55 	.word	0x08009c55
 8009cb4:	08009d03 	.word	0x08009d03
 8009cb8:	08009c55 	.word	0x08009c55
 8009cbc:	08009c55 	.word	0x08009c55
 8009cc0:	08009d9b 	.word	0x08009d9b
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	1d1a      	adds	r2, r3, #4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6032      	str	r2, [r6, #0]
 8009ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e09d      	b.n	8009e14 <_printf_i+0x1e8>
 8009cd8:	6833      	ldr	r3, [r6, #0]
 8009cda:	6820      	ldr	r0, [r4, #0]
 8009cdc:	1d19      	adds	r1, r3, #4
 8009cde:	6031      	str	r1, [r6, #0]
 8009ce0:	0606      	lsls	r6, r0, #24
 8009ce2:	d501      	bpl.n	8009ce8 <_printf_i+0xbc>
 8009ce4:	681d      	ldr	r5, [r3, #0]
 8009ce6:	e003      	b.n	8009cf0 <_printf_i+0xc4>
 8009ce8:	0645      	lsls	r5, r0, #25
 8009cea:	d5fb      	bpl.n	8009ce4 <_printf_i+0xb8>
 8009cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	da03      	bge.n	8009cfc <_printf_i+0xd0>
 8009cf4:	232d      	movs	r3, #45	@ 0x2d
 8009cf6:	426d      	negs	r5, r5
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cfc:	4859      	ldr	r0, [pc, #356]	@ (8009e64 <_printf_i+0x238>)
 8009cfe:	230a      	movs	r3, #10
 8009d00:	e011      	b.n	8009d26 <_printf_i+0xfa>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	6833      	ldr	r3, [r6, #0]
 8009d06:	0608      	lsls	r0, r1, #24
 8009d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d0c:	d402      	bmi.n	8009d14 <_printf_i+0xe8>
 8009d0e:	0649      	lsls	r1, r1, #25
 8009d10:	bf48      	it	mi
 8009d12:	b2ad      	uxthmi	r5, r5
 8009d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d16:	6033      	str	r3, [r6, #0]
 8009d18:	4852      	ldr	r0, [pc, #328]	@ (8009e64 <_printf_i+0x238>)
 8009d1a:	bf14      	ite	ne
 8009d1c:	230a      	movne	r3, #10
 8009d1e:	2308      	moveq	r3, #8
 8009d20:	2100      	movs	r1, #0
 8009d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d26:	6866      	ldr	r6, [r4, #4]
 8009d28:	2e00      	cmp	r6, #0
 8009d2a:	60a6      	str	r6, [r4, #8]
 8009d2c:	bfa2      	ittt	ge
 8009d2e:	6821      	ldrge	r1, [r4, #0]
 8009d30:	f021 0104 	bicge.w	r1, r1, #4
 8009d34:	6021      	strge	r1, [r4, #0]
 8009d36:	b90d      	cbnz	r5, 8009d3c <_printf_i+0x110>
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d04b      	beq.n	8009dd4 <_printf_i+0x1a8>
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d42:	fb03 5711 	mls	r7, r3, r1, r5
 8009d46:	5dc7      	ldrb	r7, [r0, r7]
 8009d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d4c:	462f      	mov	r7, r5
 8009d4e:	460d      	mov	r5, r1
 8009d50:	42bb      	cmp	r3, r7
 8009d52:	d9f4      	bls.n	8009d3e <_printf_i+0x112>
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d10b      	bne.n	8009d70 <_printf_i+0x144>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	07df      	lsls	r7, r3, #31
 8009d5c:	d508      	bpl.n	8009d70 <_printf_i+0x144>
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	6861      	ldr	r1, [r4, #4]
 8009d62:	4299      	cmp	r1, r3
 8009d64:	bfde      	ittt	le
 8009d66:	2330      	movle	r3, #48	@ 0x30
 8009d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d70:	1b92      	subs	r2, r2, r6
 8009d72:	6122      	str	r2, [r4, #16]
 8009d74:	464b      	mov	r3, r9
 8009d76:	aa03      	add	r2, sp, #12
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f8cd a000 	str.w	sl, [sp]
 8009d80:	f7ff fee2 	bl	8009b48 <_printf_common>
 8009d84:	3001      	adds	r0, #1
 8009d86:	d14a      	bne.n	8009e1e <_printf_i+0x1f2>
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	b004      	add	sp, #16
 8009d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f043 0320 	orr.w	r3, r3, #32
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	2778      	movs	r7, #120	@ 0x78
 8009d9c:	4832      	ldr	r0, [pc, #200]	@ (8009e68 <_printf_i+0x23c>)
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009da4:	061f      	lsls	r7, r3, #24
 8009da6:	6831      	ldr	r1, [r6, #0]
 8009da8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dac:	d402      	bmi.n	8009db4 <_printf_i+0x188>
 8009dae:	065f      	lsls	r7, r3, #25
 8009db0:	bf48      	it	mi
 8009db2:	b2ad      	uxthmi	r5, r5
 8009db4:	6031      	str	r1, [r6, #0]
 8009db6:	07d9      	lsls	r1, r3, #31
 8009db8:	bf44      	itt	mi
 8009dba:	f043 0320 	orrmi.w	r3, r3, #32
 8009dbe:	6023      	strmi	r3, [r4, #0]
 8009dc0:	b11d      	cbz	r5, 8009dca <_printf_i+0x19e>
 8009dc2:	2310      	movs	r3, #16
 8009dc4:	e7ac      	b.n	8009d20 <_printf_i+0xf4>
 8009dc6:	4827      	ldr	r0, [pc, #156]	@ (8009e64 <_printf_i+0x238>)
 8009dc8:	e7e9      	b.n	8009d9e <_printf_i+0x172>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	f023 0320 	bic.w	r3, r3, #32
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	e7f6      	b.n	8009dc2 <_printf_i+0x196>
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	e7bd      	b.n	8009d54 <_printf_i+0x128>
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	1d18      	adds	r0, r3, #4
 8009dde:	6961      	ldr	r1, [r4, #20]
 8009de0:	6030      	str	r0, [r6, #0]
 8009de2:	062e      	lsls	r6, r5, #24
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	d501      	bpl.n	8009dec <_printf_i+0x1c0>
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e002      	b.n	8009df2 <_printf_i+0x1c6>
 8009dec:	0668      	lsls	r0, r5, #25
 8009dee:	d5fb      	bpl.n	8009de8 <_printf_i+0x1bc>
 8009df0:	8019      	strh	r1, [r3, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	4616      	mov	r6, r2
 8009df6:	6123      	str	r3, [r4, #16]
 8009df8:	e7bc      	b.n	8009d74 <_printf_i+0x148>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	6032      	str	r2, [r6, #0]
 8009e02:	681e      	ldr	r6, [r3, #0]
 8009e04:	6862      	ldr	r2, [r4, #4]
 8009e06:	4630      	mov	r0, r6
 8009e08:	f000 f85a 	bl	8009ec0 <memchr>
 8009e0c:	b108      	cbz	r0, 8009e12 <_printf_i+0x1e6>
 8009e0e:	1b80      	subs	r0, r0, r6
 8009e10:	6060      	str	r0, [r4, #4]
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	2300      	movs	r3, #0
 8009e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e1c:	e7aa      	b.n	8009d74 <_printf_i+0x148>
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	4632      	mov	r2, r6
 8009e22:	4649      	mov	r1, r9
 8009e24:	4640      	mov	r0, r8
 8009e26:	47d0      	blx	sl
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d0ad      	beq.n	8009d88 <_printf_i+0x15c>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	079b      	lsls	r3, r3, #30
 8009e30:	d413      	bmi.n	8009e5a <_printf_i+0x22e>
 8009e32:	68e0      	ldr	r0, [r4, #12]
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	4298      	cmp	r0, r3
 8009e38:	bfb8      	it	lt
 8009e3a:	4618      	movlt	r0, r3
 8009e3c:	e7a6      	b.n	8009d8c <_printf_i+0x160>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4632      	mov	r2, r6
 8009e42:	4649      	mov	r1, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	47d0      	blx	sl
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d09d      	beq.n	8009d88 <_printf_i+0x15c>
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	68e3      	ldr	r3, [r4, #12]
 8009e50:	9903      	ldr	r1, [sp, #12]
 8009e52:	1a5b      	subs	r3, r3, r1
 8009e54:	42ab      	cmp	r3, r5
 8009e56:	dcf2      	bgt.n	8009e3e <_printf_i+0x212>
 8009e58:	e7eb      	b.n	8009e32 <_printf_i+0x206>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	f104 0619 	add.w	r6, r4, #25
 8009e60:	e7f5      	b.n	8009e4e <_printf_i+0x222>
 8009e62:	bf00      	nop
 8009e64:	0800a17e 	.word	0x0800a17e
 8009e68:	0800a18f 	.word	0x0800a18f

08009e6c <memmove>:
 8009e6c:	4288      	cmp	r0, r1
 8009e6e:	b510      	push	{r4, lr}
 8009e70:	eb01 0402 	add.w	r4, r1, r2
 8009e74:	d902      	bls.n	8009e7c <memmove+0x10>
 8009e76:	4284      	cmp	r4, r0
 8009e78:	4623      	mov	r3, r4
 8009e7a:	d807      	bhi.n	8009e8c <memmove+0x20>
 8009e7c:	1e43      	subs	r3, r0, #1
 8009e7e:	42a1      	cmp	r1, r4
 8009e80:	d008      	beq.n	8009e94 <memmove+0x28>
 8009e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e8a:	e7f8      	b.n	8009e7e <memmove+0x12>
 8009e8c:	4402      	add	r2, r0
 8009e8e:	4601      	mov	r1, r0
 8009e90:	428a      	cmp	r2, r1
 8009e92:	d100      	bne.n	8009e96 <memmove+0x2a>
 8009e94:	bd10      	pop	{r4, pc}
 8009e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e9e:	e7f7      	b.n	8009e90 <memmove+0x24>

08009ea0 <_sbrk_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4d05      	ldr	r5, [pc, #20]	@ (8009ebc <_sbrk_r+0x1c>)
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	f7f8 f8d2 	bl	8002054 <_sbrk>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_sbrk_r+0x1a>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_sbrk_r+0x1a>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	20001244 	.word	0x20001244

08009ec0 <memchr>:
 8009ec0:	b2c9      	uxtb	r1, r1
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	4402      	add	r2, r0
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	d101      	bne.n	8009ed2 <memchr+0x12>
 8009ece:	2000      	movs	r0, #0
 8009ed0:	e003      	b.n	8009eda <memchr+0x1a>
 8009ed2:	7804      	ldrb	r4, [r0, #0]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	428c      	cmp	r4, r1
 8009ed8:	d1f6      	bne.n	8009ec8 <memchr+0x8>
 8009eda:	bd10      	pop	{r4, pc}

08009edc <_realloc_r>:
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4615      	mov	r5, r2
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	b921      	cbnz	r1, 8009ef2 <_realloc_r+0x16>
 8009ee8:	4611      	mov	r1, r2
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	f7ff bc47 	b.w	8009780 <_malloc_r>
 8009ef2:	b92a      	cbnz	r2, 8009f00 <_realloc_r+0x24>
 8009ef4:	f7ff fbd8 	bl	80096a8 <_free_r>
 8009ef8:	2400      	movs	r4, #0
 8009efa:	4620      	mov	r0, r4
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	f000 f81a 	bl	8009f38 <_malloc_usable_size_r>
 8009f04:	4285      	cmp	r5, r0
 8009f06:	4606      	mov	r6, r0
 8009f08:	d802      	bhi.n	8009f10 <_realloc_r+0x34>
 8009f0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f0e:	d8f4      	bhi.n	8009efa <_realloc_r+0x1e>
 8009f10:	4629      	mov	r1, r5
 8009f12:	4640      	mov	r0, r8
 8009f14:	f7ff fc34 	bl	8009780 <_malloc_r>
 8009f18:	4607      	mov	r7, r0
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0ec      	beq.n	8009ef8 <_realloc_r+0x1c>
 8009f1e:	42b5      	cmp	r5, r6
 8009f20:	462a      	mov	r2, r5
 8009f22:	4621      	mov	r1, r4
 8009f24:	bf28      	it	cs
 8009f26:	4632      	movcs	r2, r6
 8009f28:	f7ff fbb0 	bl	800968c <memcpy>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4640      	mov	r0, r8
 8009f30:	463c      	mov	r4, r7
 8009f32:	f7ff fbb9 	bl	80096a8 <_free_r>
 8009f36:	e7e0      	b.n	8009efa <_realloc_r+0x1e>

08009f38 <_malloc_usable_size_r>:
 8009f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f3c:	1f18      	subs	r0, r3, #4
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bfbc      	itt	lt
 8009f42:	580b      	ldrlt	r3, [r1, r0]
 8009f44:	18c0      	addlt	r0, r0, r3
 8009f46:	4770      	bx	lr

08009f48 <_init>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	bf00      	nop
 8009f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4e:	bc08      	pop	{r3}
 8009f50:	469e      	mov	lr, r3
 8009f52:	4770      	bx	lr

08009f54 <_fini>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	bf00      	nop
 8009f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f5a:	bc08      	pop	{r3}
 8009f5c:	469e      	mov	lr, r3
 8009f5e:	4770      	bx	lr
